
/Users/friedl/Desktop/Projects/Power_Monitor/target/5.3.1/argon/Power_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002d18  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6d38  000b6d38  00006d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .data         0000006c  2003e63c  000b6d5c  0000e63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000148  2003e6a8  2003e6a8  0001e6a8  2**2
                  ALLOC
  6 .backup       00000004  2003f400  000b6dc8  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_product 00000006  000b6dcc  000b6dcc  00016dcc  2**0
                  ALLOC
  8 .module_info_suffix 00000024  000b6dd2  000b6dd2  00016dd2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b6df6  000b6df6  00016df6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   000f0f66  00000000  00000000  00016dfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000f039  00000000  00000000  00107d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000328ed  00000000  00000000  00116d99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002398  00000000  00000000  00149686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00009390  00000000  00000000  0014ba1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003482b  00000000  00000000  00154dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00034930  00000000  00000000  001895d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0013723a  00000000  00000000  001bdf09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000667c  00000000  00000000  002f5144  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <__aeabi_drsub>:
   b4020:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b4024:	e002      	b.n	b402c <__adddf3>
   b4026:	bf00      	nop

000b4028 <__aeabi_dsub>:
   b4028:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b402c <__adddf3>:
   b402c:	b530      	push	{r4, r5, lr}
   b402e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b4032:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b4036:	ea94 0f05 	teq	r4, r5
   b403a:	bf08      	it	eq
   b403c:	ea90 0f02 	teqeq	r0, r2
   b4040:	bf1f      	itttt	ne
   b4042:	ea54 0c00 	orrsne.w	ip, r4, r0
   b4046:	ea55 0c02 	orrsne.w	ip, r5, r2
   b404a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b404e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4052:	f000 80e2 	beq.w	b421a <__adddf3+0x1ee>
   b4056:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b405a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b405e:	bfb8      	it	lt
   b4060:	426d      	neglt	r5, r5
   b4062:	dd0c      	ble.n	b407e <__adddf3+0x52>
   b4064:	442c      	add	r4, r5
   b4066:	ea80 0202 	eor.w	r2, r0, r2
   b406a:	ea81 0303 	eor.w	r3, r1, r3
   b406e:	ea82 0000 	eor.w	r0, r2, r0
   b4072:	ea83 0101 	eor.w	r1, r3, r1
   b4076:	ea80 0202 	eor.w	r2, r0, r2
   b407a:	ea81 0303 	eor.w	r3, r1, r3
   b407e:	2d36      	cmp	r5, #54	; 0x36
   b4080:	bf88      	it	hi
   b4082:	bd30      	pophi	{r4, r5, pc}
   b4084:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b4088:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b408c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b4090:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b4094:	d002      	beq.n	b409c <__adddf3+0x70>
   b4096:	4240      	negs	r0, r0
   b4098:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b409c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b40a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b40a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b40a8:	d002      	beq.n	b40b0 <__adddf3+0x84>
   b40aa:	4252      	negs	r2, r2
   b40ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b40b0:	ea94 0f05 	teq	r4, r5
   b40b4:	f000 80a7 	beq.w	b4206 <__adddf3+0x1da>
   b40b8:	f1a4 0401 	sub.w	r4, r4, #1
   b40bc:	f1d5 0e20 	rsbs	lr, r5, #32
   b40c0:	db0d      	blt.n	b40de <__adddf3+0xb2>
   b40c2:	fa02 fc0e 	lsl.w	ip, r2, lr
   b40c6:	fa22 f205 	lsr.w	r2, r2, r5
   b40ca:	1880      	adds	r0, r0, r2
   b40cc:	f141 0100 	adc.w	r1, r1, #0
   b40d0:	fa03 f20e 	lsl.w	r2, r3, lr
   b40d4:	1880      	adds	r0, r0, r2
   b40d6:	fa43 f305 	asr.w	r3, r3, r5
   b40da:	4159      	adcs	r1, r3
   b40dc:	e00e      	b.n	b40fc <__adddf3+0xd0>
   b40de:	f1a5 0520 	sub.w	r5, r5, #32
   b40e2:	f10e 0e20 	add.w	lr, lr, #32
   b40e6:	2a01      	cmp	r2, #1
   b40e8:	fa03 fc0e 	lsl.w	ip, r3, lr
   b40ec:	bf28      	it	cs
   b40ee:	f04c 0c02 	orrcs.w	ip, ip, #2
   b40f2:	fa43 f305 	asr.w	r3, r3, r5
   b40f6:	18c0      	adds	r0, r0, r3
   b40f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b40fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4100:	d507      	bpl.n	b4112 <__adddf3+0xe6>
   b4102:	f04f 0e00 	mov.w	lr, #0
   b4106:	f1dc 0c00 	rsbs	ip, ip, #0
   b410a:	eb7e 0000 	sbcs.w	r0, lr, r0
   b410e:	eb6e 0101 	sbc.w	r1, lr, r1
   b4112:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b4116:	d31b      	bcc.n	b4150 <__adddf3+0x124>
   b4118:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b411c:	d30c      	bcc.n	b4138 <__adddf3+0x10c>
   b411e:	0849      	lsrs	r1, r1, #1
   b4120:	ea5f 0030 	movs.w	r0, r0, rrx
   b4124:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b4128:	f104 0401 	add.w	r4, r4, #1
   b412c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b4130:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b4134:	f080 809a 	bcs.w	b426c <__adddf3+0x240>
   b4138:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b413c:	bf08      	it	eq
   b413e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4142:	f150 0000 	adcs.w	r0, r0, #0
   b4146:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b414a:	ea41 0105 	orr.w	r1, r1, r5
   b414e:	bd30      	pop	{r4, r5, pc}
   b4150:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b4154:	4140      	adcs	r0, r0
   b4156:	eb41 0101 	adc.w	r1, r1, r1
   b415a:	3c01      	subs	r4, #1
   b415c:	bf28      	it	cs
   b415e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b4162:	d2e9      	bcs.n	b4138 <__adddf3+0x10c>
   b4164:	f091 0f00 	teq	r1, #0
   b4168:	bf04      	itt	eq
   b416a:	4601      	moveq	r1, r0
   b416c:	2000      	moveq	r0, #0
   b416e:	fab1 f381 	clz	r3, r1
   b4172:	bf08      	it	eq
   b4174:	3320      	addeq	r3, #32
   b4176:	f1a3 030b 	sub.w	r3, r3, #11
   b417a:	f1b3 0220 	subs.w	r2, r3, #32
   b417e:	da0c      	bge.n	b419a <__adddf3+0x16e>
   b4180:	320c      	adds	r2, #12
   b4182:	dd08      	ble.n	b4196 <__adddf3+0x16a>
   b4184:	f102 0c14 	add.w	ip, r2, #20
   b4188:	f1c2 020c 	rsb	r2, r2, #12
   b418c:	fa01 f00c 	lsl.w	r0, r1, ip
   b4190:	fa21 f102 	lsr.w	r1, r1, r2
   b4194:	e00c      	b.n	b41b0 <__adddf3+0x184>
   b4196:	f102 0214 	add.w	r2, r2, #20
   b419a:	bfd8      	it	le
   b419c:	f1c2 0c20 	rsble	ip, r2, #32
   b41a0:	fa01 f102 	lsl.w	r1, r1, r2
   b41a4:	fa20 fc0c 	lsr.w	ip, r0, ip
   b41a8:	bfdc      	itt	le
   b41aa:	ea41 010c 	orrle.w	r1, r1, ip
   b41ae:	4090      	lslle	r0, r2
   b41b0:	1ae4      	subs	r4, r4, r3
   b41b2:	bfa2      	ittt	ge
   b41b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b41b8:	4329      	orrge	r1, r5
   b41ba:	bd30      	popge	{r4, r5, pc}
   b41bc:	ea6f 0404 	mvn.w	r4, r4
   b41c0:	3c1f      	subs	r4, #31
   b41c2:	da1c      	bge.n	b41fe <__adddf3+0x1d2>
   b41c4:	340c      	adds	r4, #12
   b41c6:	dc0e      	bgt.n	b41e6 <__adddf3+0x1ba>
   b41c8:	f104 0414 	add.w	r4, r4, #20
   b41cc:	f1c4 0220 	rsb	r2, r4, #32
   b41d0:	fa20 f004 	lsr.w	r0, r0, r4
   b41d4:	fa01 f302 	lsl.w	r3, r1, r2
   b41d8:	ea40 0003 	orr.w	r0, r0, r3
   b41dc:	fa21 f304 	lsr.w	r3, r1, r4
   b41e0:	ea45 0103 	orr.w	r1, r5, r3
   b41e4:	bd30      	pop	{r4, r5, pc}
   b41e6:	f1c4 040c 	rsb	r4, r4, #12
   b41ea:	f1c4 0220 	rsb	r2, r4, #32
   b41ee:	fa20 f002 	lsr.w	r0, r0, r2
   b41f2:	fa01 f304 	lsl.w	r3, r1, r4
   b41f6:	ea40 0003 	orr.w	r0, r0, r3
   b41fa:	4629      	mov	r1, r5
   b41fc:	bd30      	pop	{r4, r5, pc}
   b41fe:	fa21 f004 	lsr.w	r0, r1, r4
   b4202:	4629      	mov	r1, r5
   b4204:	bd30      	pop	{r4, r5, pc}
   b4206:	f094 0f00 	teq	r4, #0
   b420a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b420e:	bf06      	itte	eq
   b4210:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b4214:	3401      	addeq	r4, #1
   b4216:	3d01      	subne	r5, #1
   b4218:	e74e      	b.n	b40b8 <__adddf3+0x8c>
   b421a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b421e:	bf18      	it	ne
   b4220:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b4224:	d029      	beq.n	b427a <__adddf3+0x24e>
   b4226:	ea94 0f05 	teq	r4, r5
   b422a:	bf08      	it	eq
   b422c:	ea90 0f02 	teqeq	r0, r2
   b4230:	d005      	beq.n	b423e <__adddf3+0x212>
   b4232:	ea54 0c00 	orrs.w	ip, r4, r0
   b4236:	bf04      	itt	eq
   b4238:	4619      	moveq	r1, r3
   b423a:	4610      	moveq	r0, r2
   b423c:	bd30      	pop	{r4, r5, pc}
   b423e:	ea91 0f03 	teq	r1, r3
   b4242:	bf1e      	ittt	ne
   b4244:	2100      	movne	r1, #0
   b4246:	2000      	movne	r0, #0
   b4248:	bd30      	popne	{r4, r5, pc}
   b424a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b424e:	d105      	bne.n	b425c <__adddf3+0x230>
   b4250:	0040      	lsls	r0, r0, #1
   b4252:	4149      	adcs	r1, r1
   b4254:	bf28      	it	cs
   b4256:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b425a:	bd30      	pop	{r4, r5, pc}
   b425c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b4260:	bf3c      	itt	cc
   b4262:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b4266:	bd30      	popcc	{r4, r5, pc}
   b4268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b426c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b4270:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b4274:	f04f 0000 	mov.w	r0, #0
   b4278:	bd30      	pop	{r4, r5, pc}
   b427a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b427e:	bf1a      	itte	ne
   b4280:	4619      	movne	r1, r3
   b4282:	4610      	movne	r0, r2
   b4284:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b4288:	bf1c      	itt	ne
   b428a:	460b      	movne	r3, r1
   b428c:	4602      	movne	r2, r0
   b428e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4292:	bf06      	itte	eq
   b4294:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b4298:	ea91 0f03 	teqeq	r1, r3
   b429c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b42a0:	bd30      	pop	{r4, r5, pc}
   b42a2:	bf00      	nop

000b42a4 <__aeabi_ui2d>:
   b42a4:	f090 0f00 	teq	r0, #0
   b42a8:	bf04      	itt	eq
   b42aa:	2100      	moveq	r1, #0
   b42ac:	4770      	bxeq	lr
   b42ae:	b530      	push	{r4, r5, lr}
   b42b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42b8:	f04f 0500 	mov.w	r5, #0
   b42bc:	f04f 0100 	mov.w	r1, #0
   b42c0:	e750      	b.n	b4164 <__adddf3+0x138>
   b42c2:	bf00      	nop

000b42c4 <__aeabi_i2d>:
   b42c4:	f090 0f00 	teq	r0, #0
   b42c8:	bf04      	itt	eq
   b42ca:	2100      	moveq	r1, #0
   b42cc:	4770      	bxeq	lr
   b42ce:	b530      	push	{r4, r5, lr}
   b42d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b42d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b42d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b42dc:	bf48      	it	mi
   b42de:	4240      	negmi	r0, r0
   b42e0:	f04f 0100 	mov.w	r1, #0
   b42e4:	e73e      	b.n	b4164 <__adddf3+0x138>
   b42e6:	bf00      	nop

000b42e8 <__aeabi_f2d>:
   b42e8:	0042      	lsls	r2, r0, #1
   b42ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b42ee:	ea4f 0131 	mov.w	r1, r1, rrx
   b42f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b42f6:	bf1f      	itttt	ne
   b42f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b42fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b4300:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b4304:	4770      	bxne	lr
   b4306:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b430a:	bf08      	it	eq
   b430c:	4770      	bxeq	lr
   b430e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b4312:	bf04      	itt	eq
   b4314:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b4318:	4770      	bxeq	lr
   b431a:	b530      	push	{r4, r5, lr}
   b431c:	f44f 7460 	mov.w	r4, #896	; 0x380
   b4320:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b4324:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b4328:	e71c      	b.n	b4164 <__adddf3+0x138>
   b432a:	bf00      	nop

000b432c <__aeabi_ul2d>:
   b432c:	ea50 0201 	orrs.w	r2, r0, r1
   b4330:	bf08      	it	eq
   b4332:	4770      	bxeq	lr
   b4334:	b530      	push	{r4, r5, lr}
   b4336:	f04f 0500 	mov.w	r5, #0
   b433a:	e00a      	b.n	b4352 <__aeabi_l2d+0x16>

000b433c <__aeabi_l2d>:
   b433c:	ea50 0201 	orrs.w	r2, r0, r1
   b4340:	bf08      	it	eq
   b4342:	4770      	bxeq	lr
   b4344:	b530      	push	{r4, r5, lr}
   b4346:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b434a:	d502      	bpl.n	b4352 <__aeabi_l2d+0x16>
   b434c:	4240      	negs	r0, r0
   b434e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b4352:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b4356:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b435a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b435e:	f43f aed8 	beq.w	b4112 <__adddf3+0xe6>
   b4362:	f04f 0203 	mov.w	r2, #3
   b4366:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b436a:	bf18      	it	ne
   b436c:	3203      	addne	r2, #3
   b436e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b4372:	bf18      	it	ne
   b4374:	3203      	addne	r2, #3
   b4376:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b437a:	f1c2 0320 	rsb	r3, r2, #32
   b437e:	fa00 fc03 	lsl.w	ip, r0, r3
   b4382:	fa20 f002 	lsr.w	r0, r0, r2
   b4386:	fa01 fe03 	lsl.w	lr, r1, r3
   b438a:	ea40 000e 	orr.w	r0, r0, lr
   b438e:	fa21 f102 	lsr.w	r1, r1, r2
   b4392:	4414      	add	r4, r2
   b4394:	e6bd      	b.n	b4112 <__adddf3+0xe6>
   b4396:	bf00      	nop

000b4398 <__aeabi_dmul>:
   b4398:	b570      	push	{r4, r5, r6, lr}
   b439a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b439e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b43a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b43a6:	bf1d      	ittte	ne
   b43a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b43ac:	ea94 0f0c 	teqne	r4, ip
   b43b0:	ea95 0f0c 	teqne	r5, ip
   b43b4:	f000 f8de 	bleq	b4574 <__aeabi_dmul+0x1dc>
   b43b8:	442c      	add	r4, r5
   b43ba:	ea81 0603 	eor.w	r6, r1, r3
   b43be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b43c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b43c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b43ca:	bf18      	it	ne
   b43cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b43d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b43d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b43d8:	d038      	beq.n	b444c <__aeabi_dmul+0xb4>
   b43da:	fba0 ce02 	umull	ip, lr, r0, r2
   b43de:	f04f 0500 	mov.w	r5, #0
   b43e2:	fbe1 e502 	umlal	lr, r5, r1, r2
   b43e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b43ea:	fbe0 e503 	umlal	lr, r5, r0, r3
   b43ee:	f04f 0600 	mov.w	r6, #0
   b43f2:	fbe1 5603 	umlal	r5, r6, r1, r3
   b43f6:	f09c 0f00 	teq	ip, #0
   b43fa:	bf18      	it	ne
   b43fc:	f04e 0e01 	orrne.w	lr, lr, #1
   b4400:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b4404:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b4408:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b440c:	d204      	bcs.n	b4418 <__aeabi_dmul+0x80>
   b440e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b4412:	416d      	adcs	r5, r5
   b4414:	eb46 0606 	adc.w	r6, r6, r6
   b4418:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b441c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b4420:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b4424:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b4428:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b442c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b4430:	bf88      	it	hi
   b4432:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4436:	d81e      	bhi.n	b4476 <__aeabi_dmul+0xde>
   b4438:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b443c:	bf08      	it	eq
   b443e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b4442:	f150 0000 	adcs.w	r0, r0, #0
   b4446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b444a:	bd70      	pop	{r4, r5, r6, pc}
   b444c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b4450:	ea46 0101 	orr.w	r1, r6, r1
   b4454:	ea40 0002 	orr.w	r0, r0, r2
   b4458:	ea81 0103 	eor.w	r1, r1, r3
   b445c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b4460:	bfc2      	ittt	gt
   b4462:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4466:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b446a:	bd70      	popgt	{r4, r5, r6, pc}
   b446c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b4470:	f04f 0e00 	mov.w	lr, #0
   b4474:	3c01      	subs	r4, #1
   b4476:	f300 80ab 	bgt.w	b45d0 <__aeabi_dmul+0x238>
   b447a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b447e:	bfde      	ittt	le
   b4480:	2000      	movle	r0, #0
   b4482:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b4486:	bd70      	pople	{r4, r5, r6, pc}
   b4488:	f1c4 0400 	rsb	r4, r4, #0
   b448c:	3c20      	subs	r4, #32
   b448e:	da35      	bge.n	b44fc <__aeabi_dmul+0x164>
   b4490:	340c      	adds	r4, #12
   b4492:	dc1b      	bgt.n	b44cc <__aeabi_dmul+0x134>
   b4494:	f104 0414 	add.w	r4, r4, #20
   b4498:	f1c4 0520 	rsb	r5, r4, #32
   b449c:	fa00 f305 	lsl.w	r3, r0, r5
   b44a0:	fa20 f004 	lsr.w	r0, r0, r4
   b44a4:	fa01 f205 	lsl.w	r2, r1, r5
   b44a8:	ea40 0002 	orr.w	r0, r0, r2
   b44ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b44b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b44b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44b8:	fa21 f604 	lsr.w	r6, r1, r4
   b44bc:	eb42 0106 	adc.w	r1, r2, r6
   b44c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44c4:	bf08      	it	eq
   b44c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44ca:	bd70      	pop	{r4, r5, r6, pc}
   b44cc:	f1c4 040c 	rsb	r4, r4, #12
   b44d0:	f1c4 0520 	rsb	r5, r4, #32
   b44d4:	fa00 f304 	lsl.w	r3, r0, r4
   b44d8:	fa20 f005 	lsr.w	r0, r0, r5
   b44dc:	fa01 f204 	lsl.w	r2, r1, r4
   b44e0:	ea40 0002 	orr.w	r0, r0, r2
   b44e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b44e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b44ec:	f141 0100 	adc.w	r1, r1, #0
   b44f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b44f4:	bf08      	it	eq
   b44f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b44fa:	bd70      	pop	{r4, r5, r6, pc}
   b44fc:	f1c4 0520 	rsb	r5, r4, #32
   b4500:	fa00 f205 	lsl.w	r2, r0, r5
   b4504:	ea4e 0e02 	orr.w	lr, lr, r2
   b4508:	fa20 f304 	lsr.w	r3, r0, r4
   b450c:	fa01 f205 	lsl.w	r2, r1, r5
   b4510:	ea43 0302 	orr.w	r3, r3, r2
   b4514:	fa21 f004 	lsr.w	r0, r1, r4
   b4518:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b451c:	fa21 f204 	lsr.w	r2, r1, r4
   b4520:	ea20 0002 	bic.w	r0, r0, r2
   b4524:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b4528:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b452c:	bf08      	it	eq
   b452e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b4532:	bd70      	pop	{r4, r5, r6, pc}
   b4534:	f094 0f00 	teq	r4, #0
   b4538:	d10f      	bne.n	b455a <__aeabi_dmul+0x1c2>
   b453a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b453e:	0040      	lsls	r0, r0, #1
   b4540:	eb41 0101 	adc.w	r1, r1, r1
   b4544:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4548:	bf08      	it	eq
   b454a:	3c01      	subeq	r4, #1
   b454c:	d0f7      	beq.n	b453e <__aeabi_dmul+0x1a6>
   b454e:	ea41 0106 	orr.w	r1, r1, r6
   b4552:	f095 0f00 	teq	r5, #0
   b4556:	bf18      	it	ne
   b4558:	4770      	bxne	lr
   b455a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b455e:	0052      	lsls	r2, r2, #1
   b4560:	eb43 0303 	adc.w	r3, r3, r3
   b4564:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b4568:	bf08      	it	eq
   b456a:	3d01      	subeq	r5, #1
   b456c:	d0f7      	beq.n	b455e <__aeabi_dmul+0x1c6>
   b456e:	ea43 0306 	orr.w	r3, r3, r6
   b4572:	4770      	bx	lr
   b4574:	ea94 0f0c 	teq	r4, ip
   b4578:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b457c:	bf18      	it	ne
   b457e:	ea95 0f0c 	teqne	r5, ip
   b4582:	d00c      	beq.n	b459e <__aeabi_dmul+0x206>
   b4584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b4588:	bf18      	it	ne
   b458a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b458e:	d1d1      	bne.n	b4534 <__aeabi_dmul+0x19c>
   b4590:	ea81 0103 	eor.w	r1, r1, r3
   b4594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b4598:	f04f 0000 	mov.w	r0, #0
   b459c:	bd70      	pop	{r4, r5, r6, pc}
   b459e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b45a2:	bf06      	itte	eq
   b45a4:	4610      	moveq	r0, r2
   b45a6:	4619      	moveq	r1, r3
   b45a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b45ac:	d019      	beq.n	b45e2 <__aeabi_dmul+0x24a>
   b45ae:	ea94 0f0c 	teq	r4, ip
   b45b2:	d102      	bne.n	b45ba <__aeabi_dmul+0x222>
   b45b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b45b8:	d113      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45ba:	ea95 0f0c 	teq	r5, ip
   b45be:	d105      	bne.n	b45cc <__aeabi_dmul+0x234>
   b45c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b45c4:	bf1c      	itt	ne
   b45c6:	4610      	movne	r0, r2
   b45c8:	4619      	movne	r1, r3
   b45ca:	d10a      	bne.n	b45e2 <__aeabi_dmul+0x24a>
   b45cc:	ea81 0103 	eor.w	r1, r1, r3
   b45d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b45d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b45dc:	f04f 0000 	mov.w	r0, #0
   b45e0:	bd70      	pop	{r4, r5, r6, pc}
   b45e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b45e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b45ea:	bd70      	pop	{r4, r5, r6, pc}

000b45ec <__aeabi_ddiv>:
   b45ec:	b570      	push	{r4, r5, r6, lr}
   b45ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b45f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b45f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b45fa:	bf1d      	ittte	ne
   b45fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b4600:	ea94 0f0c 	teqne	r4, ip
   b4604:	ea95 0f0c 	teqne	r5, ip
   b4608:	f000 f8a7 	bleq	b475a <__aeabi_ddiv+0x16e>
   b460c:	eba4 0405 	sub.w	r4, r4, r5
   b4610:	ea81 0e03 	eor.w	lr, r1, r3
   b4614:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4618:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b461c:	f000 8088 	beq.w	b4730 <__aeabi_ddiv+0x144>
   b4620:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b4624:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b4628:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b462c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b4630:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b4634:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b4638:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b463c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b4640:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b4644:	429d      	cmp	r5, r3
   b4646:	bf08      	it	eq
   b4648:	4296      	cmpeq	r6, r2
   b464a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b464e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b4652:	d202      	bcs.n	b465a <__aeabi_ddiv+0x6e>
   b4654:	085b      	lsrs	r3, r3, #1
   b4656:	ea4f 0232 	mov.w	r2, r2, rrx
   b465a:	1ab6      	subs	r6, r6, r2
   b465c:	eb65 0503 	sbc.w	r5, r5, r3
   b4660:	085b      	lsrs	r3, r3, #1
   b4662:	ea4f 0232 	mov.w	r2, r2, rrx
   b4666:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b466a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b466e:	ebb6 0e02 	subs.w	lr, r6, r2
   b4672:	eb75 0e03 	sbcs.w	lr, r5, r3
   b4676:	bf22      	ittt	cs
   b4678:	1ab6      	subcs	r6, r6, r2
   b467a:	4675      	movcs	r5, lr
   b467c:	ea40 000c 	orrcs.w	r0, r0, ip
   b4680:	085b      	lsrs	r3, r3, #1
   b4682:	ea4f 0232 	mov.w	r2, r2, rrx
   b4686:	ebb6 0e02 	subs.w	lr, r6, r2
   b468a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b468e:	bf22      	ittt	cs
   b4690:	1ab6      	subcs	r6, r6, r2
   b4692:	4675      	movcs	r5, lr
   b4694:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b4698:	085b      	lsrs	r3, r3, #1
   b469a:	ea4f 0232 	mov.w	r2, r2, rrx
   b469e:	ebb6 0e02 	subs.w	lr, r6, r2
   b46a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46a6:	bf22      	ittt	cs
   b46a8:	1ab6      	subcs	r6, r6, r2
   b46aa:	4675      	movcs	r5, lr
   b46ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b46b0:	085b      	lsrs	r3, r3, #1
   b46b2:	ea4f 0232 	mov.w	r2, r2, rrx
   b46b6:	ebb6 0e02 	subs.w	lr, r6, r2
   b46ba:	eb75 0e03 	sbcs.w	lr, r5, r3
   b46be:	bf22      	ittt	cs
   b46c0:	1ab6      	subcs	r6, r6, r2
   b46c2:	4675      	movcs	r5, lr
   b46c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b46c8:	ea55 0e06 	orrs.w	lr, r5, r6
   b46cc:	d018      	beq.n	b4700 <__aeabi_ddiv+0x114>
   b46ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b46d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b46d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b46da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b46de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b46e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b46e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b46ea:	d1c0      	bne.n	b466e <__aeabi_ddiv+0x82>
   b46ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b46f0:	d10b      	bne.n	b470a <__aeabi_ddiv+0x11e>
   b46f2:	ea41 0100 	orr.w	r1, r1, r0
   b46f6:	f04f 0000 	mov.w	r0, #0
   b46fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b46fe:	e7b6      	b.n	b466e <__aeabi_ddiv+0x82>
   b4700:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b4704:	bf04      	itt	eq
   b4706:	4301      	orreq	r1, r0
   b4708:	2000      	moveq	r0, #0
   b470a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b470e:	bf88      	it	hi
   b4710:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b4714:	f63f aeaf 	bhi.w	b4476 <__aeabi_dmul+0xde>
   b4718:	ebb5 0c03 	subs.w	ip, r5, r3
   b471c:	bf04      	itt	eq
   b471e:	ebb6 0c02 	subseq.w	ip, r6, r2
   b4722:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b4726:	f150 0000 	adcs.w	r0, r0, #0
   b472a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b472e:	bd70      	pop	{r4, r5, r6, pc}
   b4730:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b4734:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b4738:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b473c:	bfc2      	ittt	gt
   b473e:	ebd4 050c 	rsbsgt	r5, r4, ip
   b4742:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b4746:	bd70      	popgt	{r4, r5, r6, pc}
   b4748:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b474c:	f04f 0e00 	mov.w	lr, #0
   b4750:	3c01      	subs	r4, #1
   b4752:	e690      	b.n	b4476 <__aeabi_dmul+0xde>
   b4754:	ea45 0e06 	orr.w	lr, r5, r6
   b4758:	e68d      	b.n	b4476 <__aeabi_dmul+0xde>
   b475a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b475e:	ea94 0f0c 	teq	r4, ip
   b4762:	bf08      	it	eq
   b4764:	ea95 0f0c 	teqeq	r5, ip
   b4768:	f43f af3b 	beq.w	b45e2 <__aeabi_dmul+0x24a>
   b476c:	ea94 0f0c 	teq	r4, ip
   b4770:	d10a      	bne.n	b4788 <__aeabi_ddiv+0x19c>
   b4772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b4776:	f47f af34 	bne.w	b45e2 <__aeabi_dmul+0x24a>
   b477a:	ea95 0f0c 	teq	r5, ip
   b477e:	f47f af25 	bne.w	b45cc <__aeabi_dmul+0x234>
   b4782:	4610      	mov	r0, r2
   b4784:	4619      	mov	r1, r3
   b4786:	e72c      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b4788:	ea95 0f0c 	teq	r5, ip
   b478c:	d106      	bne.n	b479c <__aeabi_ddiv+0x1b0>
   b478e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b4792:	f43f aefd 	beq.w	b4590 <__aeabi_dmul+0x1f8>
   b4796:	4610      	mov	r0, r2
   b4798:	4619      	mov	r1, r3
   b479a:	e722      	b.n	b45e2 <__aeabi_dmul+0x24a>
   b479c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b47a0:	bf18      	it	ne
   b47a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b47a6:	f47f aec5 	bne.w	b4534 <__aeabi_dmul+0x19c>
   b47aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b47ae:	f47f af0d 	bne.w	b45cc <__aeabi_dmul+0x234>
   b47b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b47b6:	f47f aeeb 	bne.w	b4590 <__aeabi_dmul+0x1f8>
   b47ba:	e712      	b.n	b45e2 <__aeabi_dmul+0x24a>

000b47bc <__gedf2>:
   b47bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b47c0:	e006      	b.n	b47d0 <__cmpdf2+0x4>
   b47c2:	bf00      	nop

000b47c4 <__ledf2>:
   b47c4:	f04f 0c01 	mov.w	ip, #1
   b47c8:	e002      	b.n	b47d0 <__cmpdf2+0x4>
   b47ca:	bf00      	nop

000b47cc <__cmpdf2>:
   b47cc:	f04f 0c01 	mov.w	ip, #1
   b47d0:	f84d cd04 	str.w	ip, [sp, #-4]!
   b47d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b47d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b47dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b47e0:	bf18      	it	ne
   b47e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b47e6:	d01b      	beq.n	b4820 <__cmpdf2+0x54>
   b47e8:	b001      	add	sp, #4
   b47ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b47ee:	bf0c      	ite	eq
   b47f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b47f4:	ea91 0f03 	teqne	r1, r3
   b47f8:	bf02      	ittt	eq
   b47fa:	ea90 0f02 	teqeq	r0, r2
   b47fe:	2000      	moveq	r0, #0
   b4800:	4770      	bxeq	lr
   b4802:	f110 0f00 	cmn.w	r0, #0
   b4806:	ea91 0f03 	teq	r1, r3
   b480a:	bf58      	it	pl
   b480c:	4299      	cmppl	r1, r3
   b480e:	bf08      	it	eq
   b4810:	4290      	cmpeq	r0, r2
   b4812:	bf2c      	ite	cs
   b4814:	17d8      	asrcs	r0, r3, #31
   b4816:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b481a:	f040 0001 	orr.w	r0, r0, #1
   b481e:	4770      	bx	lr
   b4820:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b4824:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4828:	d102      	bne.n	b4830 <__cmpdf2+0x64>
   b482a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b482e:	d107      	bne.n	b4840 <__cmpdf2+0x74>
   b4830:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b4834:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b4838:	d1d6      	bne.n	b47e8 <__cmpdf2+0x1c>
   b483a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b483e:	d0d3      	beq.n	b47e8 <__cmpdf2+0x1c>
   b4840:	f85d 0b04 	ldr.w	r0, [sp], #4
   b4844:	4770      	bx	lr
   b4846:	bf00      	nop

000b4848 <__aeabi_cdrcmple>:
   b4848:	4684      	mov	ip, r0
   b484a:	4610      	mov	r0, r2
   b484c:	4662      	mov	r2, ip
   b484e:	468c      	mov	ip, r1
   b4850:	4619      	mov	r1, r3
   b4852:	4663      	mov	r3, ip
   b4854:	e000      	b.n	b4858 <__aeabi_cdcmpeq>
   b4856:	bf00      	nop

000b4858 <__aeabi_cdcmpeq>:
   b4858:	b501      	push	{r0, lr}
   b485a:	f7ff ffb7 	bl	b47cc <__cmpdf2>
   b485e:	2800      	cmp	r0, #0
   b4860:	bf48      	it	mi
   b4862:	f110 0f00 	cmnmi.w	r0, #0
   b4866:	bd01      	pop	{r0, pc}

000b4868 <__aeabi_dcmpeq>:
   b4868:	f84d ed08 	str.w	lr, [sp, #-8]!
   b486c:	f7ff fff4 	bl	b4858 <__aeabi_cdcmpeq>
   b4870:	bf0c      	ite	eq
   b4872:	2001      	moveq	r0, #1
   b4874:	2000      	movne	r0, #0
   b4876:	f85d fb08 	ldr.w	pc, [sp], #8
   b487a:	bf00      	nop

000b487c <__aeabi_dcmplt>:
   b487c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4880:	f7ff ffea 	bl	b4858 <__aeabi_cdcmpeq>
   b4884:	bf34      	ite	cc
   b4886:	2001      	movcc	r0, #1
   b4888:	2000      	movcs	r0, #0
   b488a:	f85d fb08 	ldr.w	pc, [sp], #8
   b488e:	bf00      	nop

000b4890 <__aeabi_dcmple>:
   b4890:	f84d ed08 	str.w	lr, [sp, #-8]!
   b4894:	f7ff ffe0 	bl	b4858 <__aeabi_cdcmpeq>
   b4898:	bf94      	ite	ls
   b489a:	2001      	movls	r0, #1
   b489c:	2000      	movhi	r0, #0
   b489e:	f85d fb08 	ldr.w	pc, [sp], #8
   b48a2:	bf00      	nop

000b48a4 <__aeabi_dcmpge>:
   b48a4:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48a8:	f7ff ffce 	bl	b4848 <__aeabi_cdrcmple>
   b48ac:	bf94      	ite	ls
   b48ae:	2001      	movls	r0, #1
   b48b0:	2000      	movhi	r0, #0
   b48b2:	f85d fb08 	ldr.w	pc, [sp], #8
   b48b6:	bf00      	nop

000b48b8 <__aeabi_dcmpgt>:
   b48b8:	f84d ed08 	str.w	lr, [sp, #-8]!
   b48bc:	f7ff ffc4 	bl	b4848 <__aeabi_cdrcmple>
   b48c0:	bf34      	ite	cc
   b48c2:	2001      	movcc	r0, #1
   b48c4:	2000      	movcs	r0, #0
   b48c6:	f85d fb08 	ldr.w	pc, [sp], #8
   b48ca:	bf00      	nop

000b48cc <__aeabi_dcmpun>:
   b48cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b48d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48d4:	d102      	bne.n	b48dc <__aeabi_dcmpun+0x10>
   b48d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b48da:	d10a      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b48e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b48e4:	d102      	bne.n	b48ec <__aeabi_dcmpun+0x20>
   b48e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b48ea:	d102      	bne.n	b48f2 <__aeabi_dcmpun+0x26>
   b48ec:	f04f 0000 	mov.w	r0, #0
   b48f0:	4770      	bx	lr
   b48f2:	f04f 0001 	mov.w	r0, #1
   b48f6:	4770      	bx	lr

000b48f8 <__aeabi_d2iz>:
   b48f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b48fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4900:	d215      	bcs.n	b492e <__aeabi_d2iz+0x36>
   b4902:	d511      	bpl.n	b4928 <__aeabi_d2iz+0x30>
   b4904:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4908:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b490c:	d912      	bls.n	b4934 <__aeabi_d2iz+0x3c>
   b490e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4912:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4916:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b491a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b491e:	fa23 f002 	lsr.w	r0, r3, r2
   b4922:	bf18      	it	ne
   b4924:	4240      	negne	r0, r0
   b4926:	4770      	bx	lr
   b4928:	f04f 0000 	mov.w	r0, #0
   b492c:	4770      	bx	lr
   b492e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b4932:	d105      	bne.n	b4940 <__aeabi_d2iz+0x48>
   b4934:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b4938:	bf08      	it	eq
   b493a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b493e:	4770      	bx	lr
   b4940:	f04f 0000 	mov.w	r0, #0
   b4944:	4770      	bx	lr
   b4946:	bf00      	nop

000b4948 <__aeabi_d2uiz>:
   b4948:	004a      	lsls	r2, r1, #1
   b494a:	d211      	bcs.n	b4970 <__aeabi_d2uiz+0x28>
   b494c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b4950:	d211      	bcs.n	b4976 <__aeabi_d2uiz+0x2e>
   b4952:	d50d      	bpl.n	b4970 <__aeabi_d2uiz+0x28>
   b4954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b4958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b495c:	d40e      	bmi.n	b497c <__aeabi_d2uiz+0x34>
   b495e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b4962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b4966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b496a:	fa23 f002 	lsr.w	r0, r3, r2
   b496e:	4770      	bx	lr
   b4970:	f04f 0000 	mov.w	r0, #0
   b4974:	4770      	bx	lr
   b4976:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b497a:	d102      	bne.n	b4982 <__aeabi_d2uiz+0x3a>
   b497c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b4980:	4770      	bx	lr
   b4982:	f04f 0000 	mov.w	r0, #0
   b4986:	4770      	bx	lr

000b4988 <__aeabi_d2f>:
   b4988:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b498c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b4990:	bf24      	itt	cs
   b4992:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b4996:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b499a:	d90d      	bls.n	b49b8 <__aeabi_d2f+0x30>
   b499c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b49a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b49a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b49a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b49ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b49b0:	bf08      	it	eq
   b49b2:	f020 0001 	biceq.w	r0, r0, #1
   b49b6:	4770      	bx	lr
   b49b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b49bc:	d121      	bne.n	b4a02 <__aeabi_d2f+0x7a>
   b49be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b49c2:	bfbc      	itt	lt
   b49c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b49c8:	4770      	bxlt	lr
   b49ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b49ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b49d2:	f1c2 0218 	rsb	r2, r2, #24
   b49d6:	f1c2 0c20 	rsb	ip, r2, #32
   b49da:	fa10 f30c 	lsls.w	r3, r0, ip
   b49de:	fa20 f002 	lsr.w	r0, r0, r2
   b49e2:	bf18      	it	ne
   b49e4:	f040 0001 	orrne.w	r0, r0, #1
   b49e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b49ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b49f0:	fa03 fc0c 	lsl.w	ip, r3, ip
   b49f4:	ea40 000c 	orr.w	r0, r0, ip
   b49f8:	fa23 f302 	lsr.w	r3, r3, r2
   b49fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b4a00:	e7cc      	b.n	b499c <__aeabi_d2f+0x14>
   b4a02:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b4a06:	d107      	bne.n	b4a18 <__aeabi_d2f+0x90>
   b4a08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b4a0c:	bf1e      	ittt	ne
   b4a0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b4a12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b4a16:	4770      	bxne	lr
   b4a18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b4a1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b4a20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b4a24:	4770      	bx	lr
   b4a26:	bf00      	nop

000b4a28 <strlen>:
   b4a28:	4603      	mov	r3, r0
   b4a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
   b4a2e:	2a00      	cmp	r2, #0
   b4a30:	d1fb      	bne.n	b4a2a <strlen+0x2>
   b4a32:	1a18      	subs	r0, r3, r0
   b4a34:	3801      	subs	r0, #1
   b4a36:	4770      	bx	lr

000b4a38 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a38:	4809      	ldr	r0, [pc, #36]	; (b4a60 <module_user_pre_init+0x28>)
   b4a3a:	490a      	ldr	r1, [pc, #40]	; (b4a64 <module_user_pre_init+0x2c>)
   b4a3c:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4a3e:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4a40:	d005      	beq.n	b4a4e <module_user_pre_init+0x16>
   b4a42:	4a09      	ldr	r2, [pc, #36]	; (b4a68 <module_user_pre_init+0x30>)
   b4a44:	4282      	cmp	r2, r0
   b4a46:	d002      	beq.n	b4a4e <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4a48:	1a12      	subs	r2, r2, r0
   b4a4a:	f001 fc3f 	bl	b62cc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4a4e:	4807      	ldr	r0, [pc, #28]	; (b4a6c <module_user_pre_init+0x34>)
   b4a50:	4a07      	ldr	r2, [pc, #28]	; (b4a70 <module_user_pre_init+0x38>)
   b4a52:	2100      	movs	r1, #0
   b4a54:	1a12      	subs	r2, r2, r0
   b4a56:	f001 fc47 	bl	b62e8 <memset>
    return &link_global_data_start;
}
   b4a5a:	4801      	ldr	r0, [pc, #4]	; (b4a60 <module_user_pre_init+0x28>)
   b4a5c:	bd08      	pop	{r3, pc}
   b4a5e:	bf00      	nop
   b4a60:	2003e63c 	.word	0x2003e63c
   b4a64:	000b6d5c 	.word	0x000b6d5c
   b4a68:	2003e6a8 	.word	0x2003e6a8
   b4a6c:	2003e6a8 	.word	0x2003e6a8
   b4a70:	2003e7f0 	.word	0x2003e7f0

000b4a74 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4a74:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a76:	4e07      	ldr	r6, [pc, #28]	; (b4a94 <module_user_init+0x20>)
   b4a78:	4c07      	ldr	r4, [pc, #28]	; (b4a98 <module_user_init+0x24>)
    module_user_init_hook();
   b4a7a:	f001 fb6d 	bl	b6158 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a7e:	1ba4      	subs	r4, r4, r6
   b4a80:	08a4      	lsrs	r4, r4, #2
   b4a82:	2500      	movs	r5, #0
   b4a84:	42ac      	cmp	r4, r5
   b4a86:	d100      	bne.n	b4a8a <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4a88:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4a8a:	f856 3b04 	ldr.w	r3, [r6], #4
   b4a8e:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4a90:	3501      	adds	r5, #1
   b4a92:	e7f7      	b.n	b4a84 <module_user_init+0x10>
   b4a94:	000b6d14 	.word	0x000b6d14
   b4a98:	000b6d38 	.word	0x000b6d38

000b4a9c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4a9c:	f000 b814 	b.w	b4ac8 <setup>

000b4aa0 <module_user_loop>:
}

void module_user_loop() {
   b4aa0:	b508      	push	{r3, lr}
    loop();
   b4aa2:	f000 f843 	bl	b4b2c <loop>
    _post_loop();
}
   b4aa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4aaa:	f001 bb0d 	b.w	b60c8 <_post_loop>

000b4aae <_Znaj>:
   b4aae:	f000 be37 	b.w	b5720 <malloc>

000b4ab2 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b4ab2:	f000 be3d 	b.w	b5730 <free>

000b4ab6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b4ab6:	7800      	ldrb	r0, [r0, #0]
   b4ab8:	fab0 f080 	clz	r0, r0
   b4abc:	0940      	lsrs	r0, r0, #5
   b4abe:	4770      	bx	lr

000b4ac0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b4ac0:	2301      	movs	r3, #1
   b4ac2:	7003      	strb	r3, [r0, #0]
   b4ac4:	4770      	bx	lr
	...

000b4ac8 <setup>:
#include <Wire.h>

ACS37800 mySensor; //Create an object of the ACS37800 class

void setup()
{
   b4ac8:	b508      	push	{r3, lr}
  Serial.begin(115200);
   b4aca:	f001 fa77 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4ace:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b4ad2:	f001 fa67 	bl	b5fa4 <_ZN9USBSerial5beginEl>
  Serial.println(F("ACS37800 Example"));
   b4ad6:	f001 fa71 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4ada:	4910      	ldr	r1, [pc, #64]	; (b4b1c <setup+0x54>)
   b4adc:	f001 f889 	bl	b5bf2 <_ZN5Print7printlnEPK19__FlashStringHelper>

  Wire.begin();
   b4ae0:	f001 fb88 	bl	b61f4 <_Z19__fetch_global_Wirev>
   b4ae4:	f000 fed0 	bl	b5888 <_ZN7TwoWire5beginEv>

  //mySensor.enableDebugging(); // Uncomment this line to print useful debug messages to Serial

  //Initialize sensor using default I2C address
  if (mySensor.begin() == false)
   b4ae8:	f001 fb84 	bl	b61f4 <_Z19__fetch_global_Wirev>
   b4aec:	2160      	movs	r1, #96	; 0x60
   b4aee:	4602      	mov	r2, r0
   b4af0:	480b      	ldr	r0, [pc, #44]	; (b4b20 <setup+0x58>)
   b4af2:	f000 fa4f 	bl	b4f94 <_ZN8ACS378005beginEhR7TwoWire>
   b4af6:	b928      	cbnz	r0, b4b04 <setup+0x3c>
  {
    Serial.print(F("ACS37800 not detected. Check connections and I2C address. Freezing..."));
   b4af8:	f001 fa60 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4afc:	4909      	ldr	r1, [pc, #36]	; (b4b24 <setup+0x5c>)
   b4afe:	f001 f85e 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    while (1)
   b4b02:	e7fe      	b.n	b4b02 <setup+0x3a>

  // From the ACS37800 datasheet:
  // CONFIGURING THE DEVICE FOR AC APPLICATIONS : DYNAMIC CALCULATION OF N
  // Set bypass_n_en = 0 (default). This setting enables the device to
  // dynamically calculate N based off the voltage zero crossings.
  mySensor.setBypassNenable(false, false); // Disable bypass_n in shadow memory and eeprom
   b4b04:	2200      	movs	r2, #0
   b4b06:	4806      	ldr	r0, [pc, #24]	; (b4b20 <setup+0x58>)
   b4b08:	4611      	mov	r1, r2
   b4b0a:	f000 f979 	bl	b4e00 <_ZN8ACS3780016setBypassNenableEbb>
  

  // We need to connect the LO pin to the 'low' side of the AC source.
  // So we need to set the divider resistance to 4M Ohms (instead of 2M).
  mySensor.setDividerRes(4000000); // Comment this line if you are using GND to measure the 'low' side of the AC voltage
}
   b4b0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mySensor.setDividerRes(4000000); // Comment this line if you are using GND to measure the 'low' side of the AC voltage
   b4b12:	ed9f 0a05 	vldr	s0, [pc, #20]	; b4b28 <setup+0x60>
   b4b16:	4802      	ldr	r0, [pc, #8]	; (b4b20 <setup+0x58>)
   b4b18:	f000 bc82 	b.w	b5420 <_ZN8ACS3780013setDividerResEf>
   b4b1c:	000b6434 	.word	0x000b6434
   b4b20:	2003e6a8 	.word	0x2003e6a8
   b4b24:	000b6445 	.word	0x000b6445
   b4b28:	4a742400 	.word	0x4a742400

000b4b2c <loop>:

void loop()
{
   b4b2c:	b510      	push	{r4, lr}
   b4b2e:	b08a      	sub	sp, #40	; 0x28
  float volts = 0.0;
  float amps = 0.0;

  mySensor.readRMS(&volts, &amps); // Read the RMS voltage and current
   b4b30:	aa05      	add	r2, sp, #20
  float volts = 0.0;
   b4b32:	2400      	movs	r4, #0
  mySensor.readRMS(&volts, &amps); // Read the RMS voltage and current
   b4b34:	a904      	add	r1, sp, #16
   b4b36:	4841      	ldr	r0, [pc, #260]	; (b4c3c <loop+0x110>)
  float volts = 0.0;
   b4b38:	9404      	str	r4, [sp, #16]
  float amps = 0.0;
   b4b3a:	9405      	str	r4, [sp, #20]
  mySensor.readRMS(&volts, &amps); // Read the RMS voltage and current
   b4b3c:	f000 fa52 	bl	b4fe4 <_ZN8ACS378007readRMSEPfS0_>
  Serial.print(F("Volts: "));
   b4b40:	f001 fa3c 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4b44:	493e      	ldr	r1, [pc, #248]	; (b4c40 <loop+0x114>)
   b4b46:	f001 f83a 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(volts, 2);
   b4b4a:	f001 fa37 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4b4e:	ed9d 0a04 	vldr	s0, [sp, #16]
   b4b52:	2102      	movs	r1, #2
   b4b54:	f001 f936 	bl	b5dc4 <_ZN5Print5printEfi>
  Serial.print(F(" Amps: "));
   b4b58:	f001 fa30 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4b5c:	4939      	ldr	r1, [pc, #228]	; (b4c44 <loop+0x118>)
   b4b5e:	f001 f82e 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(amps, 2);
   b4b62:	f001 fa2b 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4b66:	ed9d 0a05 	vldr	s0, [sp, #20]
   b4b6a:	2102      	movs	r1, #2
   b4b6c:	f001 f944 	bl	b5df8 <_ZN5Print7printlnEfi>

  float pactive = 0.0;
  float preactive = 0.0;
  
  mySensor.readPowerActiveReactive(&pactive, &preactive); // Read the active and reactive power
   b4b70:	aa07      	add	r2, sp, #28
   b4b72:	a906      	add	r1, sp, #24
   b4b74:	4831      	ldr	r0, [pc, #196]	; (b4c3c <loop+0x110>)
  float pactive = 0.0;
   b4b76:	9406      	str	r4, [sp, #24]
  float preactive = 0.0;
   b4b78:	9407      	str	r4, [sp, #28]
  mySensor.readPowerActiveReactive(&pactive, &preactive); // Read the active and reactive power
   b4b7a:	f000 fad5 	bl	b5128 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_>
  Serial.print(F("Power: Active (W): "));
   b4b7e:	f001 fa1d 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4b82:	4931      	ldr	r1, [pc, #196]	; (b4c48 <loop+0x11c>)
   b4b84:	f001 f81b 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(pactive, 2);
   b4b88:	f001 fa18 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4b8c:	ed9d 0a06 	vldr	s0, [sp, #24]
   b4b90:	2102      	movs	r1, #2
   b4b92:	f001 f917 	bl	b5dc4 <_ZN5Print5printEfi>
  Serial.print(F(" Reactive (VAR): "));
   b4b96:	f001 fa11 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4b9a:	492c      	ldr	r1, [pc, #176]	; (b4c4c <loop+0x120>)
   b4b9c:	f001 f80f 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(preactive, 2);
   b4ba0:	f001 fa0c 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4ba4:	ed9d 0a07 	vldr	s0, [sp, #28]
   b4ba8:	2102      	movs	r1, #2
   b4baa:	f001 f925 	bl	b5df8 <_ZN5Print7printlnEfi>
  
  float papparent = 0.0;
  float pfactor = 0.0;
  bool posangle = 0;
   b4bae:	2300      	movs	r3, #0
   b4bb0:	f88d 300e 	strb.w	r3, [sp, #14]
  bool pospf = 0;
   b4bb4:	f88d 300f 	strb.w	r3, [sp, #15]
  
  mySensor.readPowerFactor(&papparent, &pfactor, &posangle, &pospf); // Read the apparent power and the power factor
   b4bb8:	f10d 030f 	add.w	r3, sp, #15
   b4bbc:	aa09      	add	r2, sp, #36	; 0x24
   b4bbe:	a908      	add	r1, sp, #32
   b4bc0:	9300      	str	r3, [sp, #0]
   b4bc2:	481e      	ldr	r0, [pc, #120]	; (b4c3c <loop+0x110>)
  float papparent = 0.0;
   b4bc4:	9408      	str	r4, [sp, #32]
  mySensor.readPowerFactor(&papparent, &pfactor, &posangle, &pospf); // Read the apparent power and the power factor
   b4bc6:	f10d 030e 	add.w	r3, sp, #14
  float pfactor = 0.0;
   b4bca:	9409      	str	r4, [sp, #36]	; 0x24
  mySensor.readPowerFactor(&papparent, &pfactor, &posangle, &pospf); // Read the apparent power and the power factor
   b4bcc:	f000 fb7c 	bl	b52c8 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_>
  Serial.print(F("Power: Apparent (VA): "));
   b4bd0:	f001 f9f4 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4bd4:	491e      	ldr	r1, [pc, #120]	; (b4c50 <loop+0x124>)
   b4bd6:	f000 fff2 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(papparent, 2);
   b4bda:	f001 f9ef 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4bde:	ed9d 0a08 	vldr	s0, [sp, #32]
   b4be2:	2102      	movs	r1, #2
   b4be4:	f001 f8ee 	bl	b5dc4 <_ZN5Print5printEfi>
  Serial.print(F(" Power Factor: "));
   b4be8:	f001 f9e8 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4bec:	4919      	ldr	r1, [pc, #100]	; (b4c54 <loop+0x128>)
   b4bee:	f000 ffe6 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(pfactor, 2);
   b4bf2:	f001 f9e3 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4bf6:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   b4bfa:	2102      	movs	r1, #2
   b4bfc:	f001 f8e2 	bl	b5dc4 <_ZN5Print5printEfi>
  if (posangle)
   b4c00:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b4c04:	b18b      	cbz	r3, b4c2a <loop+0xfe>
    Serial.print(F(" Lagging"));
   b4c06:	f001 f9d9 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4c0a:	4913      	ldr	r1, [pc, #76]	; (b4c58 <loop+0x12c>)
  else
    Serial.print(F(" Leading"));
   b4c0c:	f000 ffd7 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
  if (pospf)
   b4c10:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b4c14:	b16b      	cbz	r3, b4c32 <loop+0x106>
    Serial.println(F(" Consumed"));
   b4c16:	f001 f9d1 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4c1a:	4910      	ldr	r1, [pc, #64]	; (b4c5c <loop+0x130>)
  else
    Serial.println(F(" Generated"));
   b4c1c:	f000 ffe9 	bl	b5bf2 <_ZN5Print7printlnEPK19__FlashStringHelper>
  
  delay(250);
   b4c20:	20fa      	movs	r0, #250	; 0xfa
   b4c22:	f000 fd9d 	bl	b5760 <delay>
}
   b4c26:	b00a      	add	sp, #40	; 0x28
   b4c28:	bd10      	pop	{r4, pc}
    Serial.print(F(" Leading"));
   b4c2a:	f001 f9c7 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4c2e:	490c      	ldr	r1, [pc, #48]	; (b4c60 <loop+0x134>)
   b4c30:	e7ec      	b.n	b4c0c <loop+0xe0>
    Serial.println(F(" Generated"));
   b4c32:	f001 f9c3 	bl	b5fbc <_Z16_fetch_usbserialv>
   b4c36:	490b      	ldr	r1, [pc, #44]	; (b4c64 <loop+0x138>)
   b4c38:	e7f0      	b.n	b4c1c <loop+0xf0>
   b4c3a:	bf00      	nop
   b4c3c:	2003e6a8 	.word	0x2003e6a8
   b4c40:	000b648b 	.word	0x000b648b
   b4c44:	000b6493 	.word	0x000b6493
   b4c48:	000b649b 	.word	0x000b649b
   b4c4c:	000b64af 	.word	0x000b64af
   b4c50:	000b64c1 	.word	0x000b64c1
   b4c54:	000b64d8 	.word	0x000b64d8
   b4c58:	000b64e8 	.word	0x000b64e8
   b4c5c:	000b64fa 	.word	0x000b64fa
   b4c60:	000b64f1 	.word	0x000b64f1
   b4c64:	000b6504 	.word	0x000b6504

000b4c68 <_GLOBAL__sub_I_mySensor>:
ACS37800 mySensor; //Create an object of the ACS37800 class
   b4c68:	4801      	ldr	r0, [pc, #4]	; (b4c70 <_GLOBAL__sub_I_mySensor+0x8>)
   b4c6a:	f000 b827 	b.w	b4cbc <_ZN8ACS37800C1Ev>
   b4c6e:	bf00      	nop
   b4c70:	2003e6a8 	.word	0x2003e6a8

000b4c74 <_ZN5Print7printlnImLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b4c74:	b510      	push	{r4, lr}
   b4c76:	4604      	mov	r4, r0

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b4c78:	b942      	cbnz	r2, b4c8c <_ZN5Print7printlnImLi0EEEjT_i.isra.0+0x18>
        return write(n);
   b4c7a:	6802      	ldr	r2, [r0, #0]
   b4c7c:	b2c9      	uxtb	r1, r1
   b4c7e:	6892      	ldr	r2, [r2, #8]
   b4c80:	4790      	blx	r2
        n += println();
   b4c82:	4620      	mov	r0, r4
    }
   b4c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4c88:	f000 bf9d 	b.w	b5bc6 <_ZN5Print7printlnEv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4c8c:	b2d2      	uxtb	r2, r2
   b4c8e:	f000 ffb2 	bl	b5bf6 <_ZN5Print11printNumberEmh>
   b4c92:	e7f6      	b.n	b4c82 <_ZN5Print7printlnImLi0EEEjT_i.isra.0+0xe>

000b4c94 <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b4c94:	b510      	push	{r4, lr}
   b4c96:	4604      	mov	r4, r0
    if (base == 0) {
   b4c98:	b93a      	cbnz	r2, b4caa <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b4c9a:	6803      	ldr	r3, [r0, #0]
   b4c9c:	689b      	ldr	r3, [r3, #8]
   b4c9e:	4798      	blx	r3
        n += println();
   b4ca0:	4620      	mov	r0, r4
    }
   b4ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4ca6:	f000 bf8e 	b.w	b5bc6 <_ZN5Print7printlnEv>
        return printNumber(val, base) + t;
   b4caa:	b2d2      	uxtb	r2, r2
   b4cac:	f000 ffa3 	bl	b5bf6 <_ZN5Print11printNumberEmh>
   b4cb0:	e7f6      	b.n	b4ca0 <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0+0xc>

000b4cb2 <_ZN7TwoWire5writeEm.isra.0>:
  void onRequest(void (*)(void));

  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
   b4cb2:	6803      	ldr	r3, [r0, #0]
   b4cb4:	b2c9      	uxtb	r1, r1
   b4cb6:	689b      	ldr	r3, [r3, #8]
   b4cb8:	4718      	bx	r3
	...

000b4cbc <_ZN8ACS37800C1Ev>:
*/

#include "SparkFun_ACS37800_Arduino_Library.h"

//Constructor
ACS37800::ACS37800()
   b4cbc:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
   b4cc0:	8102      	strh	r2, [r0, #8]
   b4cc2:	4a03      	ldr	r2, [pc, #12]	; (b4cd0 <_ZN8ACS37800C1Ev+0x14>)
   b4cc4:	60c2      	str	r2, [r0, #12]
   b4cc6:	4a03      	ldr	r2, [pc, #12]	; (b4cd4 <_ZN8ACS37800C1Ev+0x18>)
   b4cc8:	6102      	str	r2, [r0, #16]
   b4cca:	4a03      	ldr	r2, [pc, #12]	; (b4cd8 <_ZN8ACS37800C1Ev+0x1c>)
   b4ccc:	6142      	str	r2, [r0, #20]
{
}
   b4cce:	4770      	bx	lr
   b4cd0:	4528c000 	.word	0x4528c000
   b4cd4:	4a742400 	.word	0x4a742400
   b4cd8:	41f00000 	.word	0x41f00000

000b4cdc <_ZN8ACS3780012readRegisterEPmh>:
	_printDebug = true;
}

//Read a register's contents. Contents are returned in data.
ACS37800ERR ACS37800::readRegister(uint32_t *data, uint8_t address)
{
   b4cdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b4ce0:	4604      	mov	r4, r0
   b4ce2:	460f      	mov	r7, r1
  _i2cPort->beginTransmission(_ACS37800Address);
   b4ce4:	7a41      	ldrb	r1, [r0, #9]
   b4ce6:	6800      	ldr	r0, [r0, #0]
{
   b4ce8:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(_ACS37800Address);
   b4cea:	f000 fdff 	bl	b58ec <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(address); //Write the register address
   b4cee:	6820      	ldr	r0, [r4, #0]
   b4cf0:	6803      	ldr	r3, [r0, #0]
   b4cf2:	4629      	mov	r1, r5
   b4cf4:	689b      	ldr	r3, [r3, #8]
   b4cf6:	4798      	blx	r3
  uint8_t i2cResult = _i2cPort->endTransmission(false); //Send restart. Don't release the bus.
   b4cf8:	6820      	ldr	r0, [r4, #0]
   b4cfa:	2100      	movs	r1, #0
   b4cfc:	f000 fdfa 	bl	b58f4 <_ZN7TwoWire15endTransmissionEh>

  if (i2cResult != 0)
   b4d00:	4606      	mov	r6, r0
   b4d02:	b198      	cbz	r0, b4d2c <_ZN8ACS3780012readRegisterEPmh+0x50>
  {
    if (_printDebug == true)
   b4d04:	7a23      	ldrb	r3, [r4, #8]
   b4d06:	b91b      	cbnz	r3, b4d10 <_ZN8ACS3780012readRegisterEPmh+0x34>
    {
      _debugPort->print(F("readRegister: endTransmission returned: "));
      _debugPort->println(i2cResult);
    }
    return (ACS37800_ERR_I2C_ERROR); // Bail
   b4d08:	2601      	movs	r6, #1
  readData |= ((uint32_t)_i2cPort->read()) << 16;
  readData |= ((uint32_t)_i2cPort->read()) << 24; //store MSB

  *data = readData; //Return the data
  return (ACS37800_SUCCESS);
}
   b4d0a:	4630      	mov	r0, r6
   b4d0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      _debugPort->print(F("readRegister: endTransmission returned: "));
   b4d10:	491d      	ldr	r1, [pc, #116]	; (b4d88 <_ZN8ACS3780012readRegisterEPmh+0xac>)
   b4d12:	6860      	ldr	r0, [r4, #4]
   b4d14:	f000 ff53 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(i2cResult);
   b4d18:	6864      	ldr	r4, [r4, #4]
   b4d1a:	220a      	movs	r2, #10
   b4d1c:	4631      	mov	r1, r6
   b4d1e:	4620      	mov	r0, r4
   b4d20:	f000 ff69 	bl	b5bf6 <_ZN5Print11printNumberEmh>
        n += println();
   b4d24:	4620      	mov	r0, r4
   b4d26:	f000 ff4e 	bl	b5bc6 <_ZN5Print7printlnEv>
   b4d2a:	e7ed      	b.n	b4d08 <_ZN8ACS3780012readRegisterEPmh+0x2c>
  uint8_t toRead = _i2cPort->requestFrom(_ACS37800Address, (uint8_t)4);
   b4d2c:	7a61      	ldrb	r1, [r4, #9]
   b4d2e:	6820      	ldr	r0, [r4, #0]
   b4d30:	2204      	movs	r2, #4
   b4d32:	f000 fdd8 	bl	b58e6 <_ZN7TwoWire11requestFromEhj>
  if (toRead != 4)
   b4d36:	b2c5      	uxtb	r5, r0
   b4d38:	2d04      	cmp	r5, #4
   b4d3a:	d00a      	beq.n	b4d52 <_ZN8ACS3780012readRegisterEPmh+0x76>
    if (_printDebug == true)
   b4d3c:	7a23      	ldrb	r3, [r4, #8]
   b4d3e:	2b00      	cmp	r3, #0
   b4d40:	d0e2      	beq.n	b4d08 <_ZN8ACS3780012readRegisterEPmh+0x2c>
      _debugPort->print(F("readRegister: requestFrom returned: "));
   b4d42:	4912      	ldr	r1, [pc, #72]	; (b4d8c <_ZN8ACS3780012readRegisterEPmh+0xb0>)
   b4d44:	6860      	ldr	r0, [r4, #4]
   b4d46:	f000 ff3a 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(toRead);
   b4d4a:	6864      	ldr	r4, [r4, #4]
        return printNumber(val, base) + t;
   b4d4c:	220a      	movs	r2, #10
   b4d4e:	4629      	mov	r1, r5
   b4d50:	e7e5      	b.n	b4d1e <_ZN8ACS3780012readRegisterEPmh+0x42>
  uint32_t readData = _i2cPort->read(); //store LSB
   b4d52:	6820      	ldr	r0, [r4, #0]
   b4d54:	6803      	ldr	r3, [r0, #0]
   b4d56:	695b      	ldr	r3, [r3, #20]
   b4d58:	4798      	blx	r3
   b4d5a:	4680      	mov	r8, r0
  readData |= ((uint32_t)_i2cPort->read()) << 8;
   b4d5c:	6820      	ldr	r0, [r4, #0]
   b4d5e:	6803      	ldr	r3, [r0, #0]
   b4d60:	695b      	ldr	r3, [r3, #20]
   b4d62:	4798      	blx	r3
   b4d64:	4605      	mov	r5, r0
  readData |= ((uint32_t)_i2cPort->read()) << 16;
   b4d66:	6820      	ldr	r0, [r4, #0]
   b4d68:	6803      	ldr	r3, [r0, #0]
   b4d6a:	695b      	ldr	r3, [r3, #20]
   b4d6c:	4798      	blx	r3
   b4d6e:	0402      	lsls	r2, r0, #16
  readData |= ((uint32_t)_i2cPort->read()) << 24; //store MSB
   b4d70:	6820      	ldr	r0, [r4, #0]
  readData |= ((uint32_t)_i2cPort->read()) << 16;
   b4d72:	ea42 2305 	orr.w	r3, r2, r5, lsl #8
   b4d76:	ea43 0508 	orr.w	r5, r3, r8
  readData |= ((uint32_t)_i2cPort->read()) << 24; //store MSB
   b4d7a:	6803      	ldr	r3, [r0, #0]
   b4d7c:	695b      	ldr	r3, [r3, #20]
   b4d7e:	4798      	blx	r3
   b4d80:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
  *data = readData; //Return the data
   b4d84:	603d      	str	r5, [r7, #0]
  return (ACS37800_SUCCESS);
   b4d86:	e7c0      	b.n	b4d0a <_ZN8ACS3780012readRegisterEPmh+0x2e>
   b4d88:	000b650f 	.word	0x000b650f
   b4d8c:	000b6538 	.word	0x000b6538

000b4d90 <_ZN8ACS3780013writeRegisterEmh>:

//Write data to the selected register
ACS37800ERR ACS37800::writeRegister(uint32_t data, uint8_t address)
{
   b4d90:	b570      	push	{r4, r5, r6, lr}
   b4d92:	4604      	mov	r4, r0
   b4d94:	460d      	mov	r5, r1
  //   _debugPort->print(data, HEX);
  //   _debugPort->print(F(" to address 0x"));
  //   _debugPort->println(address, HEX);
  // }

  _i2cPort->beginTransmission(_ACS37800Address);
   b4d96:	7a41      	ldrb	r1, [r0, #9]
   b4d98:	6800      	ldr	r0, [r0, #0]
{
   b4d9a:	4616      	mov	r6, r2
  _i2cPort->beginTransmission(_ACS37800Address);
   b4d9c:	f000 fda6 	bl	b58ec <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(address); //Write the register address
   b4da0:	6820      	ldr	r0, [r4, #0]
   b4da2:	6803      	ldr	r3, [r0, #0]
   b4da4:	4631      	mov	r1, r6
   b4da6:	689b      	ldr	r3, [r3, #8]
   b4da8:	4798      	blx	r3
  _i2cPort->write(data & 0xFF); //Write the data LSB first (little endian)
   b4daa:	b2e9      	uxtb	r1, r5
   b4dac:	6820      	ldr	r0, [r4, #0]
   b4dae:	f7ff ff80 	bl	b4cb2 <_ZN7TwoWire5writeEm.isra.0>
  _i2cPort->write((data >> 8) & 0xFF);
   b4db2:	f3c5 2107 	ubfx	r1, r5, #8, #8
   b4db6:	6820      	ldr	r0, [r4, #0]
   b4db8:	f7ff ff7b 	bl	b4cb2 <_ZN7TwoWire5writeEm.isra.0>
  _i2cPort->write((data >> 16) & 0xFF);
   b4dbc:	f3c5 4107 	ubfx	r1, r5, #16, #8
   b4dc0:	6820      	ldr	r0, [r4, #0]
   b4dc2:	f7ff ff76 	bl	b4cb2 <_ZN7TwoWire5writeEm.isra.0>
  _i2cPort->write((data >> 24) & 0xFF);
   b4dc6:	0e29      	lsrs	r1, r5, #24
   b4dc8:	6820      	ldr	r0, [r4, #0]
   b4dca:	f7ff ff72 	bl	b4cb2 <_ZN7TwoWire5writeEm.isra.0>
  uint8_t i2cResult = _i2cPort->endTransmission(); //Release the bus.
   b4dce:	6820      	ldr	r0, [r4, #0]
   b4dd0:	f000 fd94 	bl	b58fc <_ZN7TwoWire15endTransmissionEv>

  if (i2cResult != 0)
   b4dd4:	4605      	mov	r5, r0
   b4dd6:	b178      	cbz	r0, b4df8 <_ZN8ACS3780013writeRegisterEmh+0x68>
  {
    if (_printDebug == true)
   b4dd8:	7a23      	ldrb	r3, [r4, #8]
   b4dda:	b163      	cbz	r3, b4df6 <_ZN8ACS3780013writeRegisterEmh+0x66>
    {
      _debugPort->print(F("writeRegister: endTransmission returned: "));
   b4ddc:	4907      	ldr	r1, [pc, #28]	; (b4dfc <_ZN8ACS3780013writeRegisterEmh+0x6c>)
   b4dde:	6860      	ldr	r0, [r4, #4]
   b4de0:	f000 feed 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(i2cResult);
   b4de4:	6864      	ldr	r4, [r4, #4]
   b4de6:	220a      	movs	r2, #10
   b4de8:	4629      	mov	r1, r5
   b4dea:	4620      	mov	r0, r4
   b4dec:	f000 ff03 	bl	b5bf6 <_ZN5Print11printNumberEmh>
        n += println();
   b4df0:	4620      	mov	r0, r4
   b4df2:	f000 fee8 	bl	b5bc6 <_ZN5Print7printlnEv>
    }
    return (ACS37800_ERR_I2C_ERROR); // Bail
   b4df6:	2501      	movs	r5, #1
  }

  return (ACS37800_SUCCESS);
}
   b4df8:	4628      	mov	r0, r5
   b4dfa:	bd70      	pop	{r4, r5, r6, pc}
   b4dfc:	000b655d 	.word	0x000b655d

000b4e00 <_ZN8ACS3780016setBypassNenableEbb>:
  return (error);
}

//Set/Clear the Bypass_N_Enable flag
ACS37800ERR ACS37800::setBypassNenable(bool bypass, bool _eeprom)
{
   b4e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b4e02:	460e      	mov	r6, r1
   b4e04:	4617      	mov	r7, r2
  ACS37800ERR error = writeRegister(ACS37800_CUSTOMER_ACCESS_CODE, ACS37800_REGISTER_VOLATILE_2F); // Set the customer access code
   b4e06:	493e      	ldr	r1, [pc, #248]	; (b4f00 <_ZN8ACS3780016setBypassNenableEbb+0x100>)
   b4e08:	222f      	movs	r2, #47	; 0x2f
{
   b4e0a:	4604      	mov	r4, r0
  ACS37800ERR error = writeRegister(ACS37800_CUSTOMER_ACCESS_CODE, ACS37800_REGISTER_VOLATILE_2F); // Set the customer access code
   b4e0c:	f7ff ffc0 	bl	b4d90 <_ZN8ACS3780013writeRegisterEmh>

  if (error != ACS37800_SUCCESS)
   b4e10:	4605      	mov	r5, r0
   b4e12:	b118      	cbz	r0, b4e1c <_ZN8ACS3780016setBypassNenableEbb+0x1c>

  error = writeRegister(0, ACS37800_REGISTER_VOLATILE_2F); // Clear the customer access code

  if (error != ACS37800_SUCCESS)
  {
    if (_printDebug == true)
   b4e14:	7a23      	ldrb	r3, [r4, #8]
   b4e16:	b19b      	cbz	r3, b4e40 <_ZN8ACS3780016setBypassNenableEbb+0x40>
    {
      _debugPort->print(F("setBypassNenable: writeRegister (2F) returned: "));
   b4e18:	493a      	ldr	r1, [pc, #232]	; (b4f04 <_ZN8ACS3780016setBypassNenableEbb+0x104>)
   b4e1a:	e009      	b.n	b4e30 <_ZN8ACS3780016setBypassNenableEbb+0x30>
  error = readRegister(&store.data.all, ACS37800_REGISTER_SHADOW_1F); // Read register 1F
   b4e1c:	221f      	movs	r2, #31
   b4e1e:	a901      	add	r1, sp, #4
   b4e20:	4620      	mov	r0, r4
   b4e22:	f7ff ff5b 	bl	b4cdc <_ZN8ACS3780012readRegisterEPmh>
  if (error != ACS37800_SUCCESS)
   b4e26:	7a23      	ldrb	r3, [r4, #8]
   b4e28:	4605      	mov	r5, r0
   b4e2a:	b160      	cbz	r0, b4e46 <_ZN8ACS3780016setBypassNenableEbb+0x46>
    if (_printDebug == true)
   b4e2c:	b143      	cbz	r3, b4e40 <_ZN8ACS3780016setBypassNenableEbb+0x40>
      _debugPort->print(F("setBypassNenable: readRegister (1F) returned: "));
   b4e2e:	4936      	ldr	r1, [pc, #216]	; (b4f08 <_ZN8ACS3780016setBypassNenableEbb+0x108>)
   b4e30:	6860      	ldr	r0, [r4, #4]
   b4e32:	f000 fec4 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
   b4e36:	6860      	ldr	r0, [r4, #4]
   b4e38:	220a      	movs	r2, #10
   b4e3a:	4629      	mov	r1, r5
   b4e3c:	f7ff ff2a 	bl	b4c94 <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
  }

  delay(100); // Allow time for the shadow/eeprom memory to be updated - otherwise the next readRegister will return zero...

  return (error);
}
   b4e40:	4628      	mov	r0, r5
   b4e42:	b003      	add	sp, #12
   b4e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_printDebug == true)
   b4e46:	b15b      	cbz	r3, b4e60 <_ZN8ACS3780016setBypassNenableEbb+0x60>
    _debugPort->print(F("setBypassNenable: bypass_n_en is currently: "));
   b4e48:	4930      	ldr	r1, [pc, #192]	; (b4f0c <_ZN8ACS3780016setBypassNenableEbb+0x10c>)
   b4e4a:	6860      	ldr	r0, [r4, #4]
   b4e4c:	f000 feb7 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.bypass_n_en);
   b4e50:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b4e54:	6860      	ldr	r0, [r4, #4]
   b4e56:	220a      	movs	r2, #10
   b4e58:	f001 0101 	and.w	r1, r1, #1
   b4e5c:	f7ff ff0a 	bl	b4c74 <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  if (bypass) //Adjust bypass_n_en
   b4e60:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b4e64:	f366 0300 	bfi	r3, r6, #0, #1
   b4e68:	f88d 3007 	strb.w	r3, [sp, #7]
  error = writeRegister(store.data.all, ACS37800_REGISTER_SHADOW_1F); // Write register 1F
   b4e6c:	9901      	ldr	r1, [sp, #4]
   b4e6e:	221f      	movs	r2, #31
   b4e70:	4620      	mov	r0, r4
   b4e72:	f7ff ff8d 	bl	b4d90 <_ZN8ACS3780013writeRegisterEmh>
  if (error != ACS37800_SUCCESS)
   b4e76:	4605      	mov	r5, r0
   b4e78:	b120      	cbz	r0, b4e84 <_ZN8ACS3780016setBypassNenableEbb+0x84>
    if (_printDebug == true)
   b4e7a:	7a23      	ldrb	r3, [r4, #8]
   b4e7c:	2b00      	cmp	r3, #0
   b4e7e:	d0df      	beq.n	b4e40 <_ZN8ACS3780016setBypassNenableEbb+0x40>
      _debugPort->print(F("setBypassNenable: writeRegister (1F) returned: "));
   b4e80:	4923      	ldr	r1, [pc, #140]	; (b4f10 <_ZN8ACS3780016setBypassNenableEbb+0x110>)
   b4e82:	e7d5      	b.n	b4e30 <_ZN8ACS3780016setBypassNenableEbb+0x30>
  if (_eeprom) // Check if user wants to set eeprom too
   b4e84:	b387      	cbz	r7, b4ee8 <_ZN8ACS3780016setBypassNenableEbb+0xe8>
    error = readRegister(&store.data.all, ACS37800_REGISTER_EEPROM_0F); // Read register 0F
   b4e86:	220f      	movs	r2, #15
   b4e88:	a901      	add	r1, sp, #4
   b4e8a:	4620      	mov	r0, r4
   b4e8c:	f7ff ff26 	bl	b4cdc <_ZN8ACS3780012readRegisterEPmh>
    if (error != ACS37800_SUCCESS)
   b4e90:	7a23      	ldrb	r3, [r4, #8]
   b4e92:	4605      	mov	r5, r0
   b4e94:	b118      	cbz	r0, b4e9e <_ZN8ACS3780016setBypassNenableEbb+0x9e>
      if (_printDebug == true)
   b4e96:	2b00      	cmp	r3, #0
   b4e98:	d0d2      	beq.n	b4e40 <_ZN8ACS3780016setBypassNenableEbb+0x40>
        _debugPort->print(F("setBypassNenable: readRegister (0F) returned: "));
   b4e9a:	491e      	ldr	r1, [pc, #120]	; (b4f14 <_ZN8ACS3780016setBypassNenableEbb+0x114>)
   b4e9c:	e7c8      	b.n	b4e30 <_ZN8ACS3780016setBypassNenableEbb+0x30>
    if (_printDebug == true)
   b4e9e:	b15b      	cbz	r3, b4eb8 <_ZN8ACS3780016setBypassNenableEbb+0xb8>
      _debugPort->print(F("setBypassNenable: eeprom bypass_n_en is currently: "));
   b4ea0:	491d      	ldr	r1, [pc, #116]	; (b4f18 <_ZN8ACS3780016setBypassNenableEbb+0x118>)
   b4ea2:	6860      	ldr	r0, [r4, #4]
   b4ea4:	f000 fe8b 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(store.data.bits.bypass_n_en);
   b4ea8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b4eac:	6860      	ldr	r0, [r4, #4]
   b4eae:	220a      	movs	r2, #10
   b4eb0:	f001 0101 	and.w	r1, r1, #1
   b4eb4:	f7ff fede 	bl	b4c74 <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    if (bypass) //Adjust bypass_n_en
   b4eb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b4ebc:	f366 0300 	bfi	r3, r6, #0, #1
   b4ec0:	f88d 3007 	strb.w	r3, [sp, #7]
    error = writeRegister(store.data.all, ACS37800_REGISTER_EEPROM_0F); // Write register 0F
   b4ec4:	9901      	ldr	r1, [sp, #4]
   b4ec6:	220f      	movs	r2, #15
   b4ec8:	4620      	mov	r0, r4
   b4eca:	f7ff ff61 	bl	b4d90 <_ZN8ACS3780013writeRegisterEmh>
    if (error != ACS37800_SUCCESS)
   b4ece:	4605      	mov	r5, r0
   b4ed0:	b150      	cbz	r0, b4ee8 <_ZN8ACS3780016setBypassNenableEbb+0xe8>
      if (_printDebug == true)
   b4ed2:	7a23      	ldrb	r3, [r4, #8]
   b4ed4:	b143      	cbz	r3, b4ee8 <_ZN8ACS3780016setBypassNenableEbb+0xe8>
        _debugPort->print(F("setBypassNenable: writeRegister (0F) returned: "));
   b4ed6:	4911      	ldr	r1, [pc, #68]	; (b4f1c <_ZN8ACS3780016setBypassNenableEbb+0x11c>)
   b4ed8:	6860      	ldr	r0, [r4, #4]
   b4eda:	f000 fe70 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
        _debugPort->println(error);
   b4ede:	6860      	ldr	r0, [r4, #4]
   b4ee0:	220a      	movs	r2, #10
   b4ee2:	4629      	mov	r1, r5
   b4ee4:	f7ff fed6 	bl	b4c94 <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
  error = writeRegister(0, ACS37800_REGISTER_VOLATILE_2F); // Clear the customer access code
   b4ee8:	222f      	movs	r2, #47	; 0x2f
   b4eea:	2100      	movs	r1, #0
   b4eec:	4620      	mov	r0, r4
   b4eee:	f7ff ff4f 	bl	b4d90 <_ZN8ACS3780013writeRegisterEmh>
  if (error != ACS37800_SUCCESS)
   b4ef2:	4605      	mov	r5, r0
   b4ef4:	2800      	cmp	r0, #0
   b4ef6:	d18d      	bne.n	b4e14 <_ZN8ACS3780016setBypassNenableEbb+0x14>
  delay(100); // Allow time for the shadow/eeprom memory to be updated - otherwise the next readRegister will return zero...
   b4ef8:	2064      	movs	r0, #100	; 0x64
   b4efa:	f000 fc31 	bl	b5760 <delay>
  return (error);
   b4efe:	e79f      	b.n	b4e40 <_ZN8ACS3780016setBypassNenableEbb+0x40>
   b4f00:	4f70656e 	.word	0x4f70656e
   b4f04:	000b6587 	.word	0x000b6587
   b4f08:	000b65b7 	.word	0x000b65b7
   b4f0c:	000b65e6 	.word	0x000b65e6
   b4f10:	000b6613 	.word	0x000b6613
   b4f14:	000b6643 	.word	0x000b6643
   b4f18:	000b6672 	.word	0x000b6672
   b4f1c:	000b66a6 	.word	0x000b66a6

000b4f20 <_ZN8ACS3780020getCurrentCoarseGainEPf>:
  return (error);
}

//Get the coarse current gain from shadow memory
ACS37800ERR ACS37800::getCurrentCoarseGain(float *currentCoarseGain)
{
   b4f20:	b570      	push	{r4, r5, r6, lr}
   b4f22:	ed2d 8b02 	vpush	{d8}
   b4f26:	b082      	sub	sp, #8
   b4f28:	460e      	mov	r6, r1
  ACS37800_REGISTER_0B_t store;
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_SHADOW_1B); // Read register 1B
   b4f2a:	221b      	movs	r2, #27
   b4f2c:	a901      	add	r1, sp, #4
{
   b4f2e:	4604      	mov	r4, r0
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_SHADOW_1B); // Read register 1B
   b4f30:	f7ff fed4 	bl	b4cdc <_ZN8ACS3780012readRegisterEPmh>

  if (error != ACS37800_SUCCESS)
   b4f34:	7a21      	ldrb	r1, [r4, #8]
   b4f36:	4605      	mov	r5, r0
   b4f38:	b170      	cbz	r0, b4f58 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x38>
  {
    if (_printDebug == true)
   b4f3a:	b141      	cbz	r1, b4f4e <_ZN8ACS3780020getCurrentCoarseGainEPf+0x2e>
    {
      _debugPort->print(F("getCurrentCoarseGain: readRegister (1B) returned: "));
   b4f3c:	4912      	ldr	r1, [pc, #72]	; (b4f88 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x68>)
   b4f3e:	6860      	ldr	r0, [r4, #4]
   b4f40:	f000 fe3d 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
   b4f44:	6860      	ldr	r0, [r4, #4]
   b4f46:	220a      	movs	r2, #10
   b4f48:	4629      	mov	r1, r5
   b4f4a:	f7ff fea3 	bl	b4c94 <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
  }

  *currentCoarseGain = gain; //Return the gain

  return (error);
}
   b4f4e:	4628      	mov	r0, r5
   b4f50:	b002      	add	sp, #8
   b4f52:	ecbd 8b02 	vpop	{d8}
   b4f56:	bd70      	pop	{r4, r5, r6, pc}
  float gain = ACS37800_CRS_SNS_GAINS[store.data.bits.crs_sns];
   b4f58:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b4f5c:	f3c3 02c2 	ubfx	r2, r3, #3, #3
   b4f60:	4b0a      	ldr	r3, [pc, #40]	; (b4f8c <_ZN8ACS3780020getCurrentCoarseGainEPf+0x6c>)
   b4f62:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   b4f66:	ed93 8a00 	vldr	s16, [r3]
  if (_printDebug == true)
   b4f6a:	b149      	cbz	r1, b4f80 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x60>
    _debugPort->print(F("getCurrentCoarseGain: shadow gain setting is currently: "));
   b4f6c:	4908      	ldr	r1, [pc, #32]	; (b4f90 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x70>)
   b4f6e:	6860      	ldr	r0, [r4, #4]
   b4f70:	f000 fe25 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(gain, 1);
   b4f74:	6860      	ldr	r0, [r4, #4]
   b4f76:	2101      	movs	r1, #1
   b4f78:	eeb0 0a48 	vmov.f32	s0, s16
   b4f7c:	f000 ff3c 	bl	b5df8 <_ZN5Print7printlnEfi>
  *currentCoarseGain = gain; //Return the gain
   b4f80:	ed86 8a00 	vstr	s16, [r6]
  return (error);
   b4f84:	e7e3      	b.n	b4f4e <_ZN8ACS3780020getCurrentCoarseGainEPf+0x2e>
   b4f86:	bf00      	nop
   b4f88:	000b66d6 	.word	0x000b66d6
   b4f8c:	000b6b04 	.word	0x000b6b04
   b4f90:	000b6709 	.word	0x000b6709

000b4f94 <_ZN8ACS378005beginEhR7TwoWire>:
{
   b4f94:	b538      	push	{r3, r4, r5, lr}
  _ACS37800Address = address; //Grab which i2c address the user wants us to use
   b4f96:	7241      	strb	r1, [r0, #9]
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b4f98:	4601      	mov	r1, r0
{
   b4f9a:	4604      	mov	r4, r0
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b4f9c:	f841 2b18 	str.w	r2, [r1], #24
  ACS37800ERR error = getCurrentCoarseGain(&_currentCoarseGain); // Get the current gain from shadow memory
   b4fa0:	f7ff ffbe 	bl	b4f20 <_ZN8ACS3780020getCurrentCoarseGainEPf>
  if (_printDebug == true)
   b4fa4:	7a23      	ldrb	r3, [r4, #8]
  ACS37800ERR error = getCurrentCoarseGain(&_currentCoarseGain); // Get the current gain from shadow memory
   b4fa6:	4605      	mov	r5, r0
  if (_printDebug == true)
   b4fa8:	b14b      	cbz	r3, b4fbe <_ZN8ACS378005beginEhR7TwoWire+0x2a>
      _debugPort->print(F("ACS37800::begin: failed! getCurrentCoarseGain returned: "));
   b4faa:	6860      	ldr	r0, [r4, #4]
    if  (error != ACS37800_SUCCESS)
   b4fac:	b15d      	cbz	r5, b4fc6 <_ZN8ACS378005beginEhR7TwoWire+0x32>
      _debugPort->print(F("ACS37800::begin: failed! getCurrentCoarseGain returned: "));
   b4fae:	490b      	ldr	r1, [pc, #44]	; (b4fdc <_ZN8ACS378005beginEhR7TwoWire+0x48>)
   b4fb0:	f000 fe05 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
   b4fb4:	6860      	ldr	r0, [r4, #4]
   b4fb6:	220a      	movs	r2, #10
   b4fb8:	4629      	mov	r1, r5
   b4fba:	f7ff fe6b 	bl	b4c94 <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
}
   b4fbe:	fab5 f085 	clz	r0, r5
   b4fc2:	0940      	lsrs	r0, r0, #5
   b4fc4:	bd38      	pop	{r3, r4, r5, pc}
      _debugPort->print(F("ACS37800::begin: success! _currentCoarseGain is: "));
   b4fc6:	4906      	ldr	r1, [pc, #24]	; (b4fe0 <_ZN8ACS378005beginEhR7TwoWire+0x4c>)
   b4fc8:	f000 fdf9 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(_currentCoarseGain, 1);
   b4fcc:	ed94 0a06 	vldr	s0, [r4, #24]
   b4fd0:	6860      	ldr	r0, [r4, #4]
   b4fd2:	2101      	movs	r1, #1
   b4fd4:	f000 ff10 	bl	b5df8 <_ZN5Print7printlnEfi>
   b4fd8:	e7f1      	b.n	b4fbe <_ZN8ACS378005beginEhR7TwoWire+0x2a>
   b4fda:	bf00      	nop
   b4fdc:	000b6742 	.word	0x000b6742
   b4fe0:	000b677b 	.word	0x000b677b

000b4fe4 <_ZN8ACS378007readRMSEPfS0_>:

// Read volatile register 0x20. Return the vInst (Volts) and iInst (Amps).
ACS37800ERR ACS37800::readRMS(float *vRMS, float *iRMS)
{
   b4fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4fe6:	ed2d 8b04 	vpush	{d8-d9}
   b4fea:	b083      	sub	sp, #12
   b4fec:	460f      	mov	r7, r1
   b4fee:	4616      	mov	r6, r2
  ACS37800_REGISTER_20_t store;
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_20); // Read register 20
   b4ff0:	a901      	add	r1, sp, #4
   b4ff2:	2220      	movs	r2, #32
{
   b4ff4:	4604      	mov	r4, r0
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_20); // Read register 20
   b4ff6:	f7ff fe71 	bl	b4cdc <_ZN8ACS3780012readRegisterEPmh>

  if (error != ACS37800_SUCCESS)
   b4ffa:	7a23      	ldrb	r3, [r4, #8]
   b4ffc:	4605      	mov	r5, r0
   b4ffe:	b170      	cbz	r0, b501e <_ZN8ACS378007readRMSEPfS0_+0x3a>
  {
    if (_printDebug == true)
   b5000:	b143      	cbz	r3, b5014 <_ZN8ACS378007readRMSEPfS0_+0x30>
    {
      _debugPort->print(F("readRMS: readRegister (20) returned: "));
   b5002:	493f      	ldr	r1, [pc, #252]	; (b5100 <_ZN8ACS378007readRMSEPfS0_+0x11c>)
   b5004:	6860      	ldr	r0, [r4, #4]
   b5006:	f000 fdda 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
   b500a:	6860      	ldr	r0, [r4, #4]
   b500c:	220a      	movs	r2, #10
   b500e:	4629      	mov	r1, r5
   b5010:	f7ff fe40 	bl	b4c94 <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
    _debugPort->println(amps);
  }
  *iRMS = amps;

  return (error);
}
   b5014:	4628      	mov	r0, r5
   b5016:	b003      	add	sp, #12
   b5018:	ecbd 8b04 	vpop	{d8-d9}
   b501c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  float volts = (float)store.data.bits.vrms;
   b501e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   b5022:	ee08 2a10 	vmov	s16, r2
   b5026:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  if (_printDebug == true)
   b502a:	b19b      	cbz	r3, b5054 <_ZN8ACS378007readRMSEPfS0_+0x70>
    _debugPort->print(F("readRMS: vrms: 0x"));
   b502c:	4935      	ldr	r1, [pc, #212]	; (b5104 <_ZN8ACS378007readRMSEPfS0_+0x120>)
   b502e:	6860      	ldr	r0, [r4, #4]
   b5030:	f000 fdc5 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.vrms, HEX);
   b5034:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   b5038:	6860      	ldr	r0, [r4, #4]
   b503a:	2210      	movs	r2, #16
   b503c:	f7ff fe1a 	bl	b4c74 <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readRMS: volts (LSB, before correction) is "));
   b5040:	4931      	ldr	r1, [pc, #196]	; (b5108 <_ZN8ACS378007readRMSEPfS0_+0x124>)
   b5042:	6860      	ldr	r0, [r4, #4]
   b5044:	f000 fdbb 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(volts);
   b5048:	6860      	ldr	r0, [r4, #4]
   b504a:	2102      	movs	r1, #2
   b504c:	eeb0 0a48 	vmov.f32	s0, s16
   b5050:	f000 fed2 	bl	b5df8 <_ZN5Print7printlnEfi>
  volts /= 55000.0; //Convert from codes to the fraction of ADC Full Scale (16-bit)
   b5054:	ed9f 9a2d 	vldr	s18, [pc, #180]	; b510c <_ZN8ACS378007readRMSEPfS0_+0x128>
  volts *= 250; //Convert to mV (Differential Input Range is +/- 250mV)
   b5058:	ed9f 7a2d 	vldr	s14, [pc, #180]	; b5110 <_ZN8ACS378007readRMSEPfS0_+0x12c>
  if (_printDebug == true)
   b505c:	7a23      	ldrb	r3, [r4, #8]
  volts /= 55000.0; //Convert from codes to the fraction of ADC Full Scale (16-bit)
   b505e:	eec8 7a09 	vdiv.f32	s15, s16, s18
  volts *= 250; //Convert to mV (Differential Input Range is +/- 250mV)
   b5062:	ee67 7a87 	vmul.f32	s15, s15, s14
  volts /= 1000; //Convert to Volts
   b5066:	ed9f 7a2b 	vldr	s14, [pc, #172]	; b5114 <_ZN8ACS378007readRMSEPfS0_+0x130>
   b506a:	ee87 0a87 	vdiv.f32	s0, s15, s14
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
   b506e:	ed94 7a03 	vldr	s14, [r4, #12]
   b5072:	edd4 7a04 	vldr	s15, [r4, #16]
   b5076:	ee77 7a27 	vadd.f32	s15, s14, s15
   b507a:	ee87 8a87 	vdiv.f32	s16, s15, s14
  volts *= resistorMultiplier;
   b507e:	ee28 8a00 	vmul.f32	s16, s16, s0
  if (_printDebug == true)
   b5082:	b14b      	cbz	r3, b5098 <_ZN8ACS378007readRMSEPfS0_+0xb4>
    _debugPort->print(F("readRMS: volts (V, after correction) is "));
   b5084:	4924      	ldr	r1, [pc, #144]	; (b5118 <_ZN8ACS378007readRMSEPfS0_+0x134>)
   b5086:	6860      	ldr	r0, [r4, #4]
   b5088:	f000 fd99 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(volts);
   b508c:	6860      	ldr	r0, [r4, #4]
   b508e:	2102      	movs	r1, #2
   b5090:	eeb0 0a48 	vmov.f32	s0, s16
   b5094:	f000 feb0 	bl	b5df8 <_ZN5Print7printlnEfi>
  float amps = (float)signedUnsigned.Signed;
   b5098:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  *vRMS = volts;
   b509c:	ed87 8a00 	vstr	s16, [r7]
  float amps = (float)signedUnsigned.Signed;
   b50a0:	ee08 3a90 	vmov	s17, r3
  if (_printDebug == true)
   b50a4:	7a23      	ldrb	r3, [r4, #8]
  float amps = (float)signedUnsigned.Signed;
   b50a6:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  if (_printDebug == true)
   b50aa:	b19b      	cbz	r3, b50d4 <_ZN8ACS378007readRMSEPfS0_+0xf0>
    _debugPort->print(F("readRMS: irms: 0x"));
   b50ac:	491b      	ldr	r1, [pc, #108]	; (b511c <_ZN8ACS378007readRMSEPfS0_+0x138>)
   b50ae:	6860      	ldr	r0, [r4, #4]
   b50b0:	f000 fd85 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.irms, HEX);
   b50b4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   b50b8:	6860      	ldr	r0, [r4, #4]
   b50ba:	2210      	movs	r2, #16
   b50bc:	f7ff fdda 	bl	b4c74 <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readRMS: amps (LSB, before correction) is "));
   b50c0:	4917      	ldr	r1, [pc, #92]	; (b5120 <_ZN8ACS378007readRMSEPfS0_+0x13c>)
   b50c2:	6860      	ldr	r0, [r4, #4]
   b50c4:	f000 fd7b 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(amps);
   b50c8:	6860      	ldr	r0, [r4, #4]
   b50ca:	2102      	movs	r1, #2
   b50cc:	eeb0 0a68 	vmov.f32	s0, s17
   b50d0:	f000 fe92 	bl	b5df8 <_ZN5Print7printlnEfi>
  amps /= 55000.0; //Convert from codes to the fraction of ADC Full Scale (16-bit)
   b50d4:	ee88 8a89 	vdiv.f32	s16, s17, s18
  if (_printDebug == true)
   b50d8:	7a23      	ldrb	r3, [r4, #8]
  amps *= _currentSensingRange; //Convert to Amps
   b50da:	ed94 0a05 	vldr	s0, [r4, #20]
   b50de:	ee28 8a00 	vmul.f32	s16, s16, s0
  if (_printDebug == true)
   b50e2:	b14b      	cbz	r3, b50f8 <_ZN8ACS378007readRMSEPfS0_+0x114>
    _debugPort->print(F("readRMS: amps (A, after correction) is "));
   b50e4:	490f      	ldr	r1, [pc, #60]	; (b5124 <_ZN8ACS378007readRMSEPfS0_+0x140>)
   b50e6:	6860      	ldr	r0, [r4, #4]
   b50e8:	f000 fd69 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(amps);
   b50ec:	6860      	ldr	r0, [r4, #4]
   b50ee:	2102      	movs	r1, #2
   b50f0:	eeb0 0a48 	vmov.f32	s0, s16
   b50f4:	f000 fe80 	bl	b5df8 <_ZN5Print7printlnEfi>
  *iRMS = amps;
   b50f8:	ed86 8a00 	vstr	s16, [r6]
  return (error);
   b50fc:	e78a      	b.n	b5014 <_ZN8ACS378007readRMSEPfS0_+0x30>
   b50fe:	bf00      	nop
   b5100:	000b67ad 	.word	0x000b67ad
   b5104:	000b67d3 	.word	0x000b67d3
   b5108:	000b67e5 	.word	0x000b67e5
   b510c:	4756d800 	.word	0x4756d800
   b5110:	437a0000 	.word	0x437a0000
   b5114:	447a0000 	.word	0x447a0000
   b5118:	000b6811 	.word	0x000b6811
   b511c:	000b683a 	.word	0x000b683a
   b5120:	000b684c 	.word	0x000b684c
   b5124:	000b6877 	.word	0x000b6877

000b5128 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_>:

// Read volatile register 0x21. Return the pactive and pimag.
ACS37800ERR ACS37800::readPowerActiveReactive(float *pActive, float *pReactive)
{
   b5128:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b512c:	ed2d 8b04 	vpush	{d8-d9}
   b5130:	b083      	sub	sp, #12
   b5132:	460f      	mov	r7, r1
   b5134:	4616      	mov	r6, r2
  ACS37800_REGISTER_21_t store;
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_21); // Read register 21
   b5136:	a901      	add	r1, sp, #4
   b5138:	2221      	movs	r2, #33	; 0x21
{
   b513a:	4604      	mov	r4, r0
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_21); // Read register 21
   b513c:	f7ff fdce 	bl	b4cdc <_ZN8ACS3780012readRegisterEPmh>

  if (error != ACS37800_SUCCESS)
   b5140:	7a23      	ldrb	r3, [r4, #8]
   b5142:	4605      	mov	r5, r0
   b5144:	b178      	cbz	r0, b5166 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x3e>
  {
    if (_printDebug == true)
   b5146:	b143      	cbz	r3, b515a <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x32>
    {
      _debugPort->print(F("readPowerActiveReactive: readRegister (21) returned: "));
   b5148:	4955      	ldr	r1, [pc, #340]	; (b52a0 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x178>)
   b514a:	6860      	ldr	r0, [r4, #4]
   b514c:	f000 fd37 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
   b5150:	6860      	ldr	r0, [r4, #4]
   b5152:	220a      	movs	r2, #10
   b5154:	4629      	mov	r1, r5
   b5156:	f7ff fd9d 	bl	b4c94 <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
    _debugPort->println(power);
  }
  *pReactive = power;

  return (error);
}
   b515a:	4628      	mov	r0, r5
   b515c:	b003      	add	sp, #12
   b515e:	ecbd 8b04 	vpop	{d8-d9}
   b5162:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  float power = (float)signedUnsigned.Signed;
   b5166:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
  signedUnsigned.unSigned = store.data.bits.pactive;
   b516a:	f8bd 9004 	ldrh.w	r9, [sp, #4]
  float power = (float)signedUnsigned.Signed;
   b516e:	ee08 2a10 	vmov	s16, r2
   b5172:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  if (_printDebug == true)
   b5176:	b1bb      	cbz	r3, b51a8 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x80>
    _debugPort->print(F("readPowerActiveReactive: pactive: 0x"));
   b5178:	494a      	ldr	r1, [pc, #296]	; (b52a4 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x17c>)
   b517a:	6860      	ldr	r0, [r4, #4]
   b517c:	f000 fd1f 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(signedUnsigned.unSigned, HEX);
   b5180:	f8d4 8004 	ldr.w	r8, [r4, #4]
        return printNumber(val, base) + t;
   b5184:	2210      	movs	r2, #16
   b5186:	4649      	mov	r1, r9
   b5188:	4640      	mov	r0, r8
   b518a:	f000 fd34 	bl	b5bf6 <_ZN5Print11printNumberEmh>
        n += println();
   b518e:	4640      	mov	r0, r8
   b5190:	f000 fd19 	bl	b5bc6 <_ZN5Print7printlnEv>
    _debugPort->print(F("readPowerActiveReactive: pactive (LSB, before correction) is "));
   b5194:	4944      	ldr	r1, [pc, #272]	; (b52a8 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x180>)
   b5196:	6860      	ldr	r0, [r4, #4]
   b5198:	f000 fd11 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
   b519c:	6860      	ldr	r0, [r4, #4]
   b519e:	2102      	movs	r1, #2
   b51a0:	eeb0 0a48 	vmov.f32	s0, s16
   b51a4:	f000 fe28 	bl	b5df8 <_ZN5Print7printlnEfi>
  LSBpermW *= 30.0 / _currentSensingRange; // Correct for sensor version
   b51a8:	6960      	ldr	r0, [r4, #20]
  power /= 1000; // Convert from mW to W
   b51aa:	ed9f 9a40 	vldr	s18, [pc, #256]	; b52ac <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x184>
  LSBpermW *= 30.0 / _currentSensingRange; // Correct for sensor version
   b51ae:	f7ff f89b 	bl	b42e8 <__aeabi_f2d>
   b51b2:	4602      	mov	r2, r0
   b51b4:	460b      	mov	r3, r1
   b51b6:	2000      	movs	r0, #0
   b51b8:	493d      	ldr	r1, [pc, #244]	; (b52b0 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x188>)
   b51ba:	f7ff fa17 	bl	b45ec <__aeabi_ddiv>
   b51be:	a334      	add	r3, pc, #208	; (adr r3, b5290 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x168>)
   b51c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   b51c4:	f7ff f8e8 	bl	b4398 <__aeabi_dmul>
   b51c8:	f7ff fbde 	bl	b4988 <__aeabi_d2f>
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
   b51cc:	edd4 6a03 	vldr	s13, [r4, #12]
   b51d0:	ed94 7a04 	vldr	s14, [r4, #16]
  if (_printDebug == true)
   b51d4:	7a23      	ldrb	r3, [r4, #8]
  power /= LSBpermW; //Convert from codes to mW
   b51d6:	ee07 0a90 	vmov	s15, r0
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
   b51da:	ee36 7a87 	vadd.f32	s14, s13, s14
  power /= LSBpermW; //Convert from codes to mW
   b51de:	eec8 7a27 	vdiv.f32	s15, s16, s15
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
   b51e2:	ee87 8a26 	vdiv.f32	s16, s14, s13
  power *= resistorMultiplier;
   b51e6:	ee67 7a88 	vmul.f32	s15, s15, s16
  power /= 1000; // Convert from mW to W
   b51ea:	eec7 8a89 	vdiv.f32	s17, s15, s18
  if (_printDebug == true)
   b51ee:	b14b      	cbz	r3, b5204 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0xdc>
    _debugPort->print(F("readPowerActiveReactive: pactive (W, after correction) is "));
   b51f0:	4930      	ldr	r1, [pc, #192]	; (b52b4 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x18c>)
   b51f2:	6860      	ldr	r0, [r4, #4]
   b51f4:	f000 fce3 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
   b51f8:	6860      	ldr	r0, [r4, #4]
   b51fa:	2102      	movs	r1, #2
   b51fc:	eeb0 0a68 	vmov.f32	s0, s17
   b5200:	f000 fdfa 	bl	b5df8 <_ZN5Print7printlnEfi>
  power = (float)store.data.bits.pimag;
   b5204:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  *pActive = power;
   b5208:	edc7 8a00 	vstr	s17, [r7]
  power = (float)store.data.bits.pimag;
   b520c:	ee08 3a90 	vmov	s17, r3
  if (_printDebug == true)
   b5210:	7a23      	ldrb	r3, [r4, #8]
  power = (float)store.data.bits.pimag;
   b5212:	eef8 8a68 	vcvt.f32.u32	s17, s17
  if (_printDebug == true)
   b5216:	b19b      	cbz	r3, b5240 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x118>
    _debugPort->print(F("readPowerActiveReactive: pimag: 0x"));
   b5218:	4927      	ldr	r1, [pc, #156]	; (b52b8 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x190>)
   b521a:	6860      	ldr	r0, [r4, #4]
   b521c:	f000 fccf 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.pimag, HEX);
   b5220:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   b5224:	6860      	ldr	r0, [r4, #4]
   b5226:	2210      	movs	r2, #16
   b5228:	f7ff fd24 	bl	b4c74 <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readPowerActiveReactive: pimag (LSB, before correction) is "));
   b522c:	4923      	ldr	r1, [pc, #140]	; (b52bc <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x194>)
   b522e:	6860      	ldr	r0, [r4, #4]
   b5230:	f000 fcc5 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
   b5234:	6860      	ldr	r0, [r4, #4]
   b5236:	2102      	movs	r1, #2
   b5238:	eeb0 0a68 	vmov.f32	s0, s17
   b523c:	f000 fddc 	bl	b5df8 <_ZN5Print7printlnEfi>
  LSBpermVAR *= 30.0 / _currentSensingRange; // Correct for sensor version
   b5240:	6960      	ldr	r0, [r4, #20]
   b5242:	f7ff f851 	bl	b42e8 <__aeabi_f2d>
   b5246:	4602      	mov	r2, r0
   b5248:	460b      	mov	r3, r1
   b524a:	2000      	movs	r0, #0
   b524c:	4918      	ldr	r1, [pc, #96]	; (b52b0 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x188>)
   b524e:	f7ff f9cd 	bl	b45ec <__aeabi_ddiv>
   b5252:	a311      	add	r3, pc, #68	; (adr r3, b5298 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x170>)
   b5254:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5258:	f7ff f89e 	bl	b4398 <__aeabi_dmul>
   b525c:	f7ff fb94 	bl	b4988 <__aeabi_d2f>
  power /= LSBpermVAR; //Convert from codes to mVAR
   b5260:	ee07 0a90 	vmov	s15, r0
   b5264:	eec8 7aa7 	vdiv.f32	s15, s17, s15
  if (_printDebug == true)
   b5268:	7a23      	ldrb	r3, [r4, #8]
  power *= resistorMultiplier;
   b526a:	ee28 8a27 	vmul.f32	s16, s16, s15
  power /= 1000; // Convert from mVAR to VAR
   b526e:	eec8 8a09 	vdiv.f32	s17, s16, s18
  if (_printDebug == true)
   b5272:	b14b      	cbz	r3, b5288 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x160>
    _debugPort->print(F("readPowerActiveReactive: pimag (VAR, after correction) is "));
   b5274:	4912      	ldr	r1, [pc, #72]	; (b52c0 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x198>)
   b5276:	6860      	ldr	r0, [r4, #4]
   b5278:	f000 fca1 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
   b527c:	6860      	ldr	r0, [r4, #4]
   b527e:	2102      	movs	r1, #2
   b5280:	eeb0 0a68 	vmov.f32	s0, s17
   b5284:	f000 fdb8 	bl	b5df8 <_ZN5Print7printlnEfi>
  *pReactive = power;
   b5288:	edc6 8a00 	vstr	s17, [r6]
  return (error);
   b528c:	e765      	b.n	b515a <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x32>
   b528e:	bf00      	nop
   b5290:	00000000 	.word	0x00000000
   b5294:	4008a3d7 	.word	0x4008a3d7
   b5298:	a0000000 	.word	0xa0000000
   b529c:	40189999 	.word	0x40189999
   b52a0:	000b689f 	.word	0x000b689f
   b52a4:	000b68d5 	.word	0x000b68d5
   b52a8:	000b68fa 	.word	0x000b68fa
   b52ac:	447a0000 	.word	0x447a0000
   b52b0:	403e0000 	.word	0x403e0000
   b52b4:	000b6938 	.word	0x000b6938
   b52b8:	000b6973 	.word	0x000b6973
   b52bc:	000b6996 	.word	0x000b6996
   b52c0:	000b69d2 	.word	0x000b69d2
   b52c4:	00000000 	.word	0x00000000

000b52c8 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_>:

// Read volatile register 0x22. Return the apparent power, power factor, leading / lagging, generated / consumed
ACS37800ERR ACS37800::readPowerFactor(float *pApparent, float *pFactor, bool *posangle, bool *pospf)
{
   b52c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b52cc:	ed2d 8b02 	vpush	{d8}
   b52d0:	b082      	sub	sp, #8
   b52d2:	460d      	mov	r5, r1
   b52d4:	4690      	mov	r8, r2
  ACS37800_REGISTER_22_t store;
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_22); // Read register 22
   b52d6:	a901      	add	r1, sp, #4
   b52d8:	2222      	movs	r2, #34	; 0x22
{
   b52da:	4604      	mov	r4, r0
   b52dc:	461f      	mov	r7, r3
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_22); // Read register 22
   b52de:	f7ff fcfd 	bl	b4cdc <_ZN8ACS3780012readRegisterEPmh>

  if (error != ACS37800_SUCCESS)
   b52e2:	7a23      	ldrb	r3, [r4, #8]
   b52e4:	4606      	mov	r6, r0
   b52e6:	b178      	cbz	r0, b5308 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x40>
  {
    if (_printDebug == true)
   b52e8:	b143      	cbz	r3, b52fc <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x34>
    {
      _debugPort->print(F("readPowerFactor: readRegister (22) returned: "));
   b52ea:	4945      	ldr	r1, [pc, #276]	; (b5400 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x138>)
   b52ec:	6860      	ldr	r0, [r4, #4]
   b52ee:	f000 fc66 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
   b52f2:	6860      	ldr	r0, [r4, #4]
   b52f4:	220a      	movs	r2, #10
   b52f6:	4631      	mov	r1, r6
   b52f8:	f7ff fccc 	bl	b4c94 <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
  // Extract posangle and pospf
  *posangle = store.data.bits.posangle & 0x1;
  *pospf = store.data.bits.pospf & 0x1;

  return (error);
}
   b52fc:	4630      	mov	r0, r6
   b52fe:	b002      	add	sp, #8
   b5300:	ecbd 8b02 	vpop	{d8}
   b5304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  float power = (float)store.data.bits.papparent;
   b5308:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   b530c:	ee08 2a10 	vmov	s16, r2
   b5310:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  if (_printDebug == true)
   b5314:	b19b      	cbz	r3, b533e <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x76>
    _debugPort->print(F("readPowerFactor: papparent: 0x"));
   b5316:	493b      	ldr	r1, [pc, #236]	; (b5404 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x13c>)
   b5318:	6860      	ldr	r0, [r4, #4]
   b531a:	f000 fc50 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.papparent, HEX);
   b531e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   b5322:	6860      	ldr	r0, [r4, #4]
   b5324:	2210      	movs	r2, #16
   b5326:	f7ff fca5 	bl	b4c74 <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readPowerFactor: papparent (LSB, before correction) is "));
   b532a:	4937      	ldr	r1, [pc, #220]	; (b5408 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x140>)
   b532c:	6860      	ldr	r0, [r4, #4]
   b532e:	f000 fc46 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
   b5332:	6860      	ldr	r0, [r4, #4]
   b5334:	2102      	movs	r1, #2
   b5336:	eeb0 0a48 	vmov.f32	s0, s16
   b533a:	f000 fd5d 	bl	b5df8 <_ZN5Print7printlnEfi>
  LSBpermVA *= 30.0 / _currentSensingRange; // Correct for sensor version
   b533e:	6960      	ldr	r0, [r4, #20]
   b5340:	f7fe ffd2 	bl	b42e8 <__aeabi_f2d>
   b5344:	4602      	mov	r2, r0
   b5346:	460b      	mov	r3, r1
   b5348:	2000      	movs	r0, #0
   b534a:	4930      	ldr	r1, [pc, #192]	; (b540c <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x144>)
   b534c:	f7ff f94e 	bl	b45ec <__aeabi_ddiv>
   b5350:	a329      	add	r3, pc, #164	; (adr r3, b53f8 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x130>)
   b5352:	e9d3 2300 	ldrd	r2, r3, [r3]
   b5356:	f7ff f81f 	bl	b4398 <__aeabi_dmul>
   b535a:	f7ff fb15 	bl	b4988 <__aeabi_d2f>
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
   b535e:	edd4 6a03 	vldr	s13, [r4, #12]
   b5362:	ed94 7a04 	vldr	s14, [r4, #16]
  if (_printDebug == true)
   b5366:	7a23      	ldrb	r3, [r4, #8]
  power /= LSBpermVA; //Convert from codes to mVA
   b5368:	ee07 0a90 	vmov	s15, r0
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
   b536c:	ee36 7a87 	vadd.f32	s14, s13, s14
  power /= LSBpermVA; //Convert from codes to mVA
   b5370:	ee88 6a27 	vdiv.f32	s12, s16, s15
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
   b5374:	eec7 7a26 	vdiv.f32	s15, s14, s13
  power /= 1000; // Convert from mVAR to VAR
   b5378:	ed9f 7a25 	vldr	s14, [pc, #148]	; b5410 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x148>
  power *= resistorMultiplier;
   b537c:	ee67 7a86 	vmul.f32	s15, s15, s12
  power /= 1000; // Convert from mVAR to VAR
   b5380:	ee87 8a87 	vdiv.f32	s16, s15, s14
  if (_printDebug == true)
   b5384:	b14b      	cbz	r3, b539a <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0xd2>
    _debugPort->print(F("readPowerFactor: papparent (VA, after correction) is "));
   b5386:	4923      	ldr	r1, [pc, #140]	; (b5414 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x14c>)
   b5388:	6860      	ldr	r0, [r4, #4]
   b538a:	f000 fc18 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
   b538e:	6860      	ldr	r0, [r4, #4]
   b5390:	2102      	movs	r1, #2
   b5392:	eeb0 0a48 	vmov.f32	s0, s16
   b5396:	f000 fd2f 	bl	b5df8 <_ZN5Print7printlnEfi>
  *pApparent = power;
   b539a:	ed85 8a00 	vstr	s16, [r5]
  signedUnsigned.unSigned = store.data.bits.pfactor << 5; // Move 11-bit number into 16-bits (signed)
   b539e:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   b53a2:	f345 050a 	sbfx	r5, r5, #0, #11
  float pfactor = (float)signedUnsigned.Signed / 32768.0; // Convert to +/- 1
   b53a6:	016b      	lsls	r3, r5, #5
   b53a8:	ee08 3a10 	vmov	s16, r3
  if (_printDebug == true)
   b53ac:	7a23      	ldrb	r3, [r4, #8]
  float pfactor = (float)signedUnsigned.Signed / 32768.0; // Convert to +/- 1
   b53ae:	eeba 8ae8 	vcvt.f32.s32	s16, s16, #15
  if (_printDebug == true)
   b53b2:	b1ab      	cbz	r3, b53e0 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x118>
    _debugPort->print(F("readPowerFactor: pfactor: 0x"));
   b53b4:	4918      	ldr	r1, [pc, #96]	; (b5418 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x150>)
   b53b6:	6860      	ldr	r0, [r4, #4]
   b53b8:	f000 fc01 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.pfactor, HEX);
   b53bc:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   b53c0:	6860      	ldr	r0, [r4, #4]
   b53c2:	2210      	movs	r2, #16
   b53c4:	f3c1 010a 	ubfx	r1, r1, #0, #11
   b53c8:	f7ff fc54 	bl	b4c74 <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readPowerFactor: pfactor is "));
   b53cc:	4913      	ldr	r1, [pc, #76]	; (b541c <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x154>)
   b53ce:	6860      	ldr	r0, [r4, #4]
   b53d0:	f000 fbf5 	bl	b5bbe <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(pfactor);
   b53d4:	6860      	ldr	r0, [r4, #4]
   b53d6:	2102      	movs	r1, #2
   b53d8:	eeb0 0a48 	vmov.f32	s0, s16
   b53dc:	f000 fd0c 	bl	b5df8 <_ZN5Print7printlnEfi>
  *posangle = store.data.bits.posangle & 0x1;
   b53e0:	f89d 2007 	ldrb.w	r2, [sp, #7]
  *pFactor = pfactor;
   b53e4:	ed88 8a00 	vstr	s16, [r8]
  *posangle = store.data.bits.posangle & 0x1;
   b53e8:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   b53ec:	703b      	strb	r3, [r7, #0]
  *pospf = store.data.bits.pospf & 0x1;
   b53ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b53f0:	f3c2 1200 	ubfx	r2, r2, #4, #1
   b53f4:	701a      	strb	r2, [r3, #0]
  return (error);
   b53f6:	e781      	b.n	b52fc <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x34>
   b53f8:	a0000000 	.word	0xa0000000
   b53fc:	40189999 	.word	0x40189999
   b5400:	000b6a0d 	.word	0x000b6a0d
   b5404:	000b6a3b 	.word	0x000b6a3b
   b5408:	000b6a5a 	.word	0x000b6a5a
   b540c:	403e0000 	.word	0x403e0000
   b5410:	447a0000 	.word	0x447a0000
   b5414:	000b6a92 	.word	0x000b6a92
   b5418:	000b6ac8 	.word	0x000b6ac8
   b541c:	000b6ae5 	.word	0x000b6ae5

000b5420 <_ZN8ACS3780013setDividerResEf>:
}

//Change the value of the voltage divider resistance (Ohms)
void ACS37800::setDividerRes(float newRes)
{
  _dividerResistance = newRes;
   b5420:	ed80 0a04 	vstr	s0, [r0, #16]
}
   b5424:	4770      	bx	lr
	...

000b5428 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b5428:	b508      	push	{r3, lr}
   b542a:	4b02      	ldr	r3, [pc, #8]	; (b5434 <os_mutex_recursive_create+0xc>)
   b542c:	681b      	ldr	r3, [r3, #0]
   b542e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5430:	9301      	str	r3, [sp, #4]
   b5432:	bd08      	pop	{r3, pc}
   b5434:	00030248 	.word	0x00030248

000b5438 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b5438:	b508      	push	{r3, lr}
   b543a:	4b02      	ldr	r3, [pc, #8]	; (b5444 <HAL_RNG_GetRandomNumber+0xc>)
   b543c:	681b      	ldr	r3, [r3, #0]
   b543e:	685b      	ldr	r3, [r3, #4]
   b5440:	9301      	str	r3, [sp, #4]
   b5442:	bd08      	pop	{r3, pc}
   b5444:	00030218 	.word	0x00030218

000b5448 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b5448:	b508      	push	{r3, lr}
   b544a:	4b02      	ldr	r3, [pc, #8]	; (b5454 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b544c:	681b      	ldr	r3, [r3, #0]
   b544e:	695b      	ldr	r3, [r3, #20]
   b5450:	9301      	str	r3, [sp, #4]
   b5452:	bd08      	pop	{r3, pc}
   b5454:	00030218 	.word	0x00030218

000b5458 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b5458:	b508      	push	{r3, lr}
   b545a:	4b02      	ldr	r3, [pc, #8]	; (b5464 <hal_i2c_begin+0xc>)
   b545c:	681b      	ldr	r3, [r3, #0]
   b545e:	68db      	ldr	r3, [r3, #12]
   b5460:	9301      	str	r3, [sp, #4]
   b5462:	bd08      	pop	{r3, pc}
   b5464:	00030228 	.word	0x00030228

000b5468 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b5468:	b508      	push	{r3, lr}
   b546a:	4b02      	ldr	r3, [pc, #8]	; (b5474 <hal_i2c_begin_transmission+0xc>)
   b546c:	681b      	ldr	r3, [r3, #0]
   b546e:	699b      	ldr	r3, [r3, #24]
   b5470:	9301      	str	r3, [sp, #4]
   b5472:	bd08      	pop	{r3, pc}
   b5474:	00030228 	.word	0x00030228

000b5478 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b5478:	b508      	push	{r3, lr}
   b547a:	4b02      	ldr	r3, [pc, #8]	; (b5484 <hal_i2c_end_transmission+0xc>)
   b547c:	681b      	ldr	r3, [r3, #0]
   b547e:	69db      	ldr	r3, [r3, #28]
   b5480:	9301      	str	r3, [sp, #4]
   b5482:	bd08      	pop	{r3, pc}
   b5484:	00030228 	.word	0x00030228

000b5488 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b5488:	b508      	push	{r3, lr}
   b548a:	4b02      	ldr	r3, [pc, #8]	; (b5494 <hal_i2c_write+0xc>)
   b548c:	681b      	ldr	r3, [r3, #0]
   b548e:	6a1b      	ldr	r3, [r3, #32]
   b5490:	9301      	str	r3, [sp, #4]
   b5492:	bd08      	pop	{r3, pc}
   b5494:	00030228 	.word	0x00030228

000b5498 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b5498:	b508      	push	{r3, lr}
   b549a:	4b02      	ldr	r3, [pc, #8]	; (b54a4 <hal_i2c_available+0xc>)
   b549c:	681b      	ldr	r3, [r3, #0]
   b549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b54a0:	9301      	str	r3, [sp, #4]
   b54a2:	bd08      	pop	{r3, pc}
   b54a4:	00030228 	.word	0x00030228

000b54a8 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b54a8:	b508      	push	{r3, lr}
   b54aa:	4b02      	ldr	r3, [pc, #8]	; (b54b4 <hal_i2c_read+0xc>)
   b54ac:	681b      	ldr	r3, [r3, #0]
   b54ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b54b0:	9301      	str	r3, [sp, #4]
   b54b2:	bd08      	pop	{r3, pc}
   b54b4:	00030228 	.word	0x00030228

000b54b8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b54b8:	b508      	push	{r3, lr}
   b54ba:	4b02      	ldr	r3, [pc, #8]	; (b54c4 <hal_i2c_peek+0xc>)
   b54bc:	681b      	ldr	r3, [r3, #0]
   b54be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b54c0:	9301      	str	r3, [sp, #4]
   b54c2:	bd08      	pop	{r3, pc}
   b54c4:	00030228 	.word	0x00030228

000b54c8 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b54c8:	b508      	push	{r3, lr}
   b54ca:	4b02      	ldr	r3, [pc, #8]	; (b54d4 <hal_i2c_flush+0xc>)
   b54cc:	681b      	ldr	r3, [r3, #0]
   b54ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b54d0:	9301      	str	r3, [sp, #4]
   b54d2:	bd08      	pop	{r3, pc}
   b54d4:	00030228 	.word	0x00030228

000b54d8 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b54d8:	b508      	push	{r3, lr}
   b54da:	4b02      	ldr	r3, [pc, #8]	; (b54e4 <hal_i2c_init+0xc>)
   b54dc:	681b      	ldr	r3, [r3, #0]
   b54de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b54e0:	9301      	str	r3, [sp, #4]
   b54e2:	bd08      	pop	{r3, pc}
   b54e4:	00030228 	.word	0x00030228

000b54e8 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b54e8:	b508      	push	{r3, lr}
   b54ea:	4b02      	ldr	r3, [pc, #8]	; (b54f4 <hal_i2c_request_ex+0xc>)
   b54ec:	681b      	ldr	r3, [r3, #0]
   b54ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b54f0:	9301      	str	r3, [sp, #4]
   b54f2:	bd08      	pop	{r3, pc}
   b54f4:	00030228 	.word	0x00030228

000b54f8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b54f8:	b508      	push	{r3, lr}
   b54fa:	4b02      	ldr	r3, [pc, #8]	; (b5504 <inet_inet_ntop+0xc>)
   b54fc:	681b      	ldr	r3, [r3, #0]
   b54fe:	695b      	ldr	r3, [r3, #20]
   b5500:	9301      	str	r3, [sp, #4]
   b5502:	bd08      	pop	{r3, pc}
   b5504:	00030264 	.word	0x00030264

000b5508 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b5508:	b508      	push	{r3, lr}
   b550a:	4b02      	ldr	r3, [pc, #8]	; (b5514 <netdb_freeaddrinfo+0xc>)
   b550c:	681b      	ldr	r3, [r3, #0]
   b550e:	689b      	ldr	r3, [r3, #8]
   b5510:	9301      	str	r3, [sp, #4]
   b5512:	bd08      	pop	{r3, pc}
   b5514:	00030268 	.word	0x00030268

000b5518 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b5518:	b508      	push	{r3, lr}
   b551a:	4b02      	ldr	r3, [pc, #8]	; (b5524 <netdb_getaddrinfo+0xc>)
   b551c:	681b      	ldr	r3, [r3, #0]
   b551e:	68db      	ldr	r3, [r3, #12]
   b5520:	9301      	str	r3, [sp, #4]
   b5522:	bd08      	pop	{r3, pc}
   b5524:	00030268 	.word	0x00030268

000b5528 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b5528:	b508      	push	{r3, lr}
   b552a:	4b02      	ldr	r3, [pc, #8]	; (b5534 <hal_usart_write+0xc>)
   b552c:	681b      	ldr	r3, [r3, #0]
   b552e:	68db      	ldr	r3, [r3, #12]
   b5530:	9301      	str	r3, [sp, #4]
   b5532:	bd08      	pop	{r3, pc}
   b5534:	0003023c 	.word	0x0003023c

000b5538 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b5538:	b508      	push	{r3, lr}
   b553a:	4b02      	ldr	r3, [pc, #8]	; (b5544 <hal_usart_available+0xc>)
   b553c:	681b      	ldr	r3, [r3, #0]
   b553e:	691b      	ldr	r3, [r3, #16]
   b5540:	9301      	str	r3, [sp, #4]
   b5542:	bd08      	pop	{r3, pc}
   b5544:	0003023c 	.word	0x0003023c

000b5548 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b5548:	b508      	push	{r3, lr}
   b554a:	4b02      	ldr	r3, [pc, #8]	; (b5554 <hal_usart_read+0xc>)
   b554c:	681b      	ldr	r3, [r3, #0]
   b554e:	695b      	ldr	r3, [r3, #20]
   b5550:	9301      	str	r3, [sp, #4]
   b5552:	bd08      	pop	{r3, pc}
   b5554:	0003023c 	.word	0x0003023c

000b5558 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b5558:	b508      	push	{r3, lr}
   b555a:	4b02      	ldr	r3, [pc, #8]	; (b5564 <hal_usart_peek+0xc>)
   b555c:	681b      	ldr	r3, [r3, #0]
   b555e:	699b      	ldr	r3, [r3, #24]
   b5560:	9301      	str	r3, [sp, #4]
   b5562:	bd08      	pop	{r3, pc}
   b5564:	0003023c 	.word	0x0003023c

000b5568 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b5568:	b508      	push	{r3, lr}
   b556a:	4b02      	ldr	r3, [pc, #8]	; (b5574 <hal_usart_flush+0xc>)
   b556c:	681b      	ldr	r3, [r3, #0]
   b556e:	69db      	ldr	r3, [r3, #28]
   b5570:	9301      	str	r3, [sp, #4]
   b5572:	bd08      	pop	{r3, pc}
   b5574:	0003023c 	.word	0x0003023c

000b5578 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b5578:	b508      	push	{r3, lr}
   b557a:	4b02      	ldr	r3, [pc, #8]	; (b5584 <hal_usart_available_data_for_write+0xc>)
   b557c:	681b      	ldr	r3, [r3, #0]
   b557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b5580:	9301      	str	r3, [sp, #4]
   b5582:	bd08      	pop	{r3, pc}
   b5584:	0003023c 	.word	0x0003023c

000b5588 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b5588:	b508      	push	{r3, lr}
   b558a:	4b02      	ldr	r3, [pc, #8]	; (b5594 <hal_usart_init_ex+0xc>)
   b558c:	681b      	ldr	r3, [r3, #0]
   b558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5590:	9301      	str	r3, [sp, #4]
   b5592:	bd08      	pop	{r3, pc}
   b5594:	0003023c 	.word	0x0003023c

000b5598 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b5598:	b508      	push	{r3, lr}
   b559a:	4b02      	ldr	r3, [pc, #8]	; (b55a4 <HAL_USB_USART_Init+0xc>)
   b559c:	681b      	ldr	r3, [r3, #0]
   b559e:	681b      	ldr	r3, [r3, #0]
   b55a0:	9301      	str	r3, [sp, #4]
   b55a2:	bd08      	pop	{r3, pc}
   b55a4:	0003024c 	.word	0x0003024c

000b55a8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b55a8:	b508      	push	{r3, lr}
   b55aa:	4b02      	ldr	r3, [pc, #8]	; (b55b4 <HAL_USB_USART_Begin+0xc>)
   b55ac:	681b      	ldr	r3, [r3, #0]
   b55ae:	685b      	ldr	r3, [r3, #4]
   b55b0:	9301      	str	r3, [sp, #4]
   b55b2:	bd08      	pop	{r3, pc}
   b55b4:	0003024c 	.word	0x0003024c

000b55b8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b55b8:	b508      	push	{r3, lr}
   b55ba:	4b02      	ldr	r3, [pc, #8]	; (b55c4 <HAL_USB_USART_Available_Data+0xc>)
   b55bc:	681b      	ldr	r3, [r3, #0]
   b55be:	691b      	ldr	r3, [r3, #16]
   b55c0:	9301      	str	r3, [sp, #4]
   b55c2:	bd08      	pop	{r3, pc}
   b55c4:	0003024c 	.word	0x0003024c

000b55c8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b55c8:	b508      	push	{r3, lr}
   b55ca:	4b02      	ldr	r3, [pc, #8]	; (b55d4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b55cc:	681b      	ldr	r3, [r3, #0]
   b55ce:	695b      	ldr	r3, [r3, #20]
   b55d0:	9301      	str	r3, [sp, #4]
   b55d2:	bd08      	pop	{r3, pc}
   b55d4:	0003024c 	.word	0x0003024c

000b55d8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b55d8:	b508      	push	{r3, lr}
   b55da:	4b02      	ldr	r3, [pc, #8]	; (b55e4 <HAL_USB_USART_Receive_Data+0xc>)
   b55dc:	681b      	ldr	r3, [r3, #0]
   b55de:	699b      	ldr	r3, [r3, #24]
   b55e0:	9301      	str	r3, [sp, #4]
   b55e2:	bd08      	pop	{r3, pc}
   b55e4:	0003024c 	.word	0x0003024c

000b55e8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b55e8:	b508      	push	{r3, lr}
   b55ea:	4b02      	ldr	r3, [pc, #8]	; (b55f4 <HAL_USB_USART_Send_Data+0xc>)
   b55ec:	681b      	ldr	r3, [r3, #0]
   b55ee:	69db      	ldr	r3, [r3, #28]
   b55f0:	9301      	str	r3, [sp, #4]
   b55f2:	bd08      	pop	{r3, pc}
   b55f4:	0003024c 	.word	0x0003024c

000b55f8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b55f8:	b508      	push	{r3, lr}
   b55fa:	4b02      	ldr	r3, [pc, #8]	; (b5604 <HAL_USB_USART_Flush_Data+0xc>)
   b55fc:	681b      	ldr	r3, [r3, #0]
   b55fe:	6a1b      	ldr	r3, [r3, #32]
   b5600:	9301      	str	r3, [sp, #4]
   b5602:	bd08      	pop	{r3, pc}
   b5604:	0003024c 	.word	0x0003024c

000b5608 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b5608:	b508      	push	{r3, lr}
   b560a:	4b02      	ldr	r3, [pc, #8]	; (b5614 <set_system_mode+0xc>)
   b560c:	681b      	ldr	r3, [r3, #0]
   b560e:	685b      	ldr	r3, [r3, #4]
   b5610:	9301      	str	r3, [sp, #4]
   b5612:	bd08      	pop	{r3, pc}
   b5614:	00030220 	.word	0x00030220

000b5618 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b5618:	b508      	push	{r3, lr}
   b561a:	4b02      	ldr	r3, [pc, #8]	; (b5624 <system_delay_ms+0xc>)
   b561c:	681b      	ldr	r3, [r3, #0]
   b561e:	695b      	ldr	r3, [r3, #20]
   b5620:	9301      	str	r3, [sp, #4]
   b5622:	bd08      	pop	{r3, pc}
   b5624:	00030220 	.word	0x00030220

000b5628 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b5628:	b508      	push	{r3, lr}
   b562a:	4b03      	ldr	r3, [pc, #12]	; (b5638 <system_ctrl_set_app_request_handler+0x10>)
   b562c:	681b      	ldr	r3, [r3, #0]
   b562e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b5632:	9301      	str	r3, [sp, #4]
   b5634:	bd08      	pop	{r3, pc}
   b5636:	0000      	.short	0x0000
   b5638:	00030220 	.word	0x00030220

000b563c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b563c:	b508      	push	{r3, lr}
   b563e:	4b03      	ldr	r3, [pc, #12]	; (b564c <system_ctrl_set_result+0x10>)
   b5640:	681b      	ldr	r3, [r3, #0]
   b5642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b5646:	9301      	str	r3, [sp, #4]
   b5648:	bd08      	pop	{r3, pc}
   b564a:	0000      	.short	0x0000
   b564c:	00030220 	.word	0x00030220

000b5650 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b5650:	b508      	push	{r3, lr}
   b5652:	4b02      	ldr	r3, [pc, #8]	; (b565c <spark_set_random_seed_from_cloud_handler+0xc>)
   b5654:	681b      	ldr	r3, [r3, #0]
   b5656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b5658:	9301      	str	r3, [sp, #4]
   b565a:	bd08      	pop	{r3, pc}
   b565c:	00030244 	.word	0x00030244

000b5660 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b5660:	b508      	push	{r3, lr}
   b5662:	4b02      	ldr	r3, [pc, #8]	; (b566c <network_connect+0xc>)
   b5664:	681b      	ldr	r3, [r3, #0]
   b5666:	685b      	ldr	r3, [r3, #4]
   b5668:	9301      	str	r3, [sp, #4]
   b566a:	bd08      	pop	{r3, pc}
   b566c:	00030240 	.word	0x00030240

000b5670 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b5670:	b508      	push	{r3, lr}
   b5672:	4b02      	ldr	r3, [pc, #8]	; (b567c <network_connecting+0xc>)
   b5674:	681b      	ldr	r3, [r3, #0]
   b5676:	689b      	ldr	r3, [r3, #8]
   b5678:	9301      	str	r3, [sp, #4]
   b567a:	bd08      	pop	{r3, pc}
   b567c:	00030240 	.word	0x00030240

000b5680 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b5680:	b508      	push	{r3, lr}
   b5682:	4b02      	ldr	r3, [pc, #8]	; (b568c <network_disconnect+0xc>)
   b5684:	681b      	ldr	r3, [r3, #0]
   b5686:	68db      	ldr	r3, [r3, #12]
   b5688:	9301      	str	r3, [sp, #4]
   b568a:	bd08      	pop	{r3, pc}
   b568c:	00030240 	.word	0x00030240

000b5690 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b5690:	b508      	push	{r3, lr}
   b5692:	4b02      	ldr	r3, [pc, #8]	; (b569c <network_ready+0xc>)
   b5694:	681b      	ldr	r3, [r3, #0]
   b5696:	691b      	ldr	r3, [r3, #16]
   b5698:	9301      	str	r3, [sp, #4]
   b569a:	bd08      	pop	{r3, pc}
   b569c:	00030240 	.word	0x00030240

000b56a0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b56a0:	b508      	push	{r3, lr}
   b56a2:	4b02      	ldr	r3, [pc, #8]	; (b56ac <network_on+0xc>)
   b56a4:	681b      	ldr	r3, [r3, #0]
   b56a6:	695b      	ldr	r3, [r3, #20]
   b56a8:	9301      	str	r3, [sp, #4]
   b56aa:	bd08      	pop	{r3, pc}
   b56ac:	00030240 	.word	0x00030240

000b56b0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b56b0:	b508      	push	{r3, lr}
   b56b2:	4b02      	ldr	r3, [pc, #8]	; (b56bc <network_off+0xc>)
   b56b4:	681b      	ldr	r3, [r3, #0]
   b56b6:	699b      	ldr	r3, [r3, #24]
   b56b8:	9301      	str	r3, [sp, #4]
   b56ba:	bd08      	pop	{r3, pc}
   b56bc:	00030240 	.word	0x00030240

000b56c0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b56c0:	b508      	push	{r3, lr}
   b56c2:	4b02      	ldr	r3, [pc, #8]	; (b56cc <network_listen+0xc>)
   b56c4:	681b      	ldr	r3, [r3, #0]
   b56c6:	69db      	ldr	r3, [r3, #28]
   b56c8:	9301      	str	r3, [sp, #4]
   b56ca:	bd08      	pop	{r3, pc}
   b56cc:	00030240 	.word	0x00030240

000b56d0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b56d0:	b508      	push	{r3, lr}
   b56d2:	4b02      	ldr	r3, [pc, #8]	; (b56dc <network_listening+0xc>)
   b56d4:	681b      	ldr	r3, [r3, #0]
   b56d6:	6a1b      	ldr	r3, [r3, #32]
   b56d8:	9301      	str	r3, [sp, #4]
   b56da:	bd08      	pop	{r3, pc}
   b56dc:	00030240 	.word	0x00030240

000b56e0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b56e0:	b508      	push	{r3, lr}
   b56e2:	4b02      	ldr	r3, [pc, #8]	; (b56ec <network_set_listen_timeout+0xc>)
   b56e4:	681b      	ldr	r3, [r3, #0]
   b56e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b56e8:	9301      	str	r3, [sp, #4]
   b56ea:	bd08      	pop	{r3, pc}
   b56ec:	00030240 	.word	0x00030240

000b56f0 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b56f0:	b508      	push	{r3, lr}
   b56f2:	4b02      	ldr	r3, [pc, #8]	; (b56fc <network_get_listen_timeout+0xc>)
   b56f4:	681b      	ldr	r3, [r3, #0]
   b56f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b56f8:	9301      	str	r3, [sp, #4]
   b56fa:	bd08      	pop	{r3, pc}
   b56fc:	00030240 	.word	0x00030240

000b5700 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5700:	b508      	push	{r3, lr}
   b5702:	4b02      	ldr	r3, [pc, #8]	; (b570c <network_is_on+0xc>)
   b5704:	681b      	ldr	r3, [r3, #0]
   b5706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5708:	9301      	str	r3, [sp, #4]
   b570a:	bd08      	pop	{r3, pc}
   b570c:	00030240 	.word	0x00030240

000b5710 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5710:	b508      	push	{r3, lr}
   b5712:	4b02      	ldr	r3, [pc, #8]	; (b571c <network_is_off+0xc>)
   b5714:	681b      	ldr	r3, [r3, #0]
   b5716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5718:	9301      	str	r3, [sp, #4]
   b571a:	bd08      	pop	{r3, pc}
   b571c:	00030240 	.word	0x00030240

000b5720 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5720:	b508      	push	{r3, lr}
   b5722:	4b02      	ldr	r3, [pc, #8]	; (b572c <malloc+0xc>)
   b5724:	681b      	ldr	r3, [r3, #0]
   b5726:	681b      	ldr	r3, [r3, #0]
   b5728:	9301      	str	r3, [sp, #4]
   b572a:	bd08      	pop	{r3, pc}
   b572c:	0003021c 	.word	0x0003021c

000b5730 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5730:	b508      	push	{r3, lr}
   b5732:	4b02      	ldr	r3, [pc, #8]	; (b573c <free+0xc>)
   b5734:	681b      	ldr	r3, [r3, #0]
   b5736:	685b      	ldr	r3, [r3, #4]
   b5738:	9301      	str	r3, [sp, #4]
   b573a:	bd08      	pop	{r3, pc}
   b573c:	0003021c 	.word	0x0003021c

000b5740 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b5740:	b508      	push	{r3, lr}
   b5742:	4b02      	ldr	r3, [pc, #8]	; (b574c <__assert_func+0xc>)
   b5744:	681b      	ldr	r3, [r3, #0]
   b5746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5748:	9301      	str	r3, [sp, #4]
   b574a:	bd08      	pop	{r3, pc}
   b574c:	0003021c 	.word	0x0003021c

000b5750 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b5750:	b508      	push	{r3, lr}
   b5752:	4b02      	ldr	r3, [pc, #8]	; (b575c <newlib_impure_ptr_callback+0xc>)
   b5754:	681b      	ldr	r3, [r3, #0]
   b5756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5758:	9301      	str	r3, [sp, #4]
   b575a:	bd08      	pop	{r3, pc}
   b575c:	0003021c 	.word	0x0003021c

000b5760 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b5760:	2100      	movs	r1, #0
   b5762:	f7ff bf59 	b.w	b5618 <system_delay_ms>
	...

000b5768 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b5768:	4802      	ldr	r0, [pc, #8]	; (b5774 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b576a:	2300      	movs	r3, #0
   b576c:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b576e:	f7ff be5b 	b.w	b5428 <os_mutex_recursive_create>
   b5772:	bf00      	nop
   b5774:	2003e6c4 	.word	0x2003e6c4

000b5778 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5778:	2200      	movs	r2, #0
   b577a:	6840      	ldr	r0, [r0, #4]
   b577c:	4611      	mov	r1, r2
   b577e:	f7ff bfa7 	b.w	b56d0 <network_listening>

000b5782 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5782:	2200      	movs	r2, #0
   b5784:	6840      	ldr	r0, [r0, #4]
   b5786:	4611      	mov	r1, r2
   b5788:	f7ff bfb2 	b.w	b56f0 <network_get_listen_timeout>

000b578c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b578c:	6840      	ldr	r0, [r0, #4]
   b578e:	2200      	movs	r2, #0
   b5790:	f7ff bfa6 	b.w	b56e0 <network_set_listen_timeout>

000b5794 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5794:	6840      	ldr	r0, [r0, #4]
   b5796:	2200      	movs	r2, #0
   b5798:	f081 0101 	eor.w	r1, r1, #1
   b579c:	f7ff bf90 	b.w	b56c0 <network_listen>

000b57a0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b57a0:	2300      	movs	r3, #0
   b57a2:	6840      	ldr	r0, [r0, #4]
   b57a4:	461a      	mov	r2, r3
   b57a6:	4619      	mov	r1, r3
   b57a8:	f7ff bf82 	b.w	b56b0 <network_off>

000b57ac <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b57ac:	2300      	movs	r3, #0
   b57ae:	6840      	ldr	r0, [r0, #4]
   b57b0:	461a      	mov	r2, r3
   b57b2:	4619      	mov	r1, r3
   b57b4:	f7ff bf74 	b.w	b56a0 <network_on>

000b57b8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b57b8:	2200      	movs	r2, #0
   b57ba:	6840      	ldr	r0, [r0, #4]
   b57bc:	4611      	mov	r1, r2
   b57be:	f7ff bf67 	b.w	b5690 <network_ready>

000b57c2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b57c2:	2200      	movs	r2, #0
   b57c4:	6840      	ldr	r0, [r0, #4]
   b57c6:	4611      	mov	r1, r2
   b57c8:	f7ff bf52 	b.w	b5670 <network_connecting>

000b57cc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b57cc:	6840      	ldr	r0, [r0, #4]
   b57ce:	2200      	movs	r2, #0
   b57d0:	2102      	movs	r1, #2
   b57d2:	f7ff bf55 	b.w	b5680 <network_disconnect>

000b57d6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b57d6:	2300      	movs	r3, #0
   b57d8:	6840      	ldr	r0, [r0, #4]
   b57da:	461a      	mov	r2, r3
   b57dc:	f7ff bf40 	b.w	b5660 <network_connect>

000b57e0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b57e0:	4b02      	ldr	r3, [pc, #8]	; (b57ec <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b57e2:	2203      	movs	r2, #3
   b57e4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b57e6:	4a02      	ldr	r2, [pc, #8]	; (b57f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b57e8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b57ea:	4770      	bx	lr
   b57ec:	2003e6c8 	.word	0x2003e6c8
   b57f0:	000b6b2c 	.word	0x000b6b2c

000b57f4 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b57f4:	4770      	bx	lr

000b57f6 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b57f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b57f8:	4606      	mov	r6, r0
   b57fa:	4615      	mov	r5, r2
   b57fc:	460c      	mov	r4, r1
   b57fe:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5800:	42bc      	cmp	r4, r7
   b5802:	d006      	beq.n	b5812 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b5804:	6833      	ldr	r3, [r6, #0]
   b5806:	f814 1b01 	ldrb.w	r1, [r4], #1
   b580a:	689b      	ldr	r3, [r3, #8]
   b580c:	4630      	mov	r0, r6
   b580e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5810:	e7f6      	b.n	b5800 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b5812:	4628      	mov	r0, r5
   b5814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5816 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b5816:	7c00      	ldrb	r0, [r0, #16]
   b5818:	2200      	movs	r2, #0
   b581a:	f7ff be35 	b.w	b5488 <hal_i2c_write>

000b581e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b581e:	7c00      	ldrb	r0, [r0, #16]
   b5820:	2100      	movs	r1, #0
   b5822:	f7ff be39 	b.w	b5498 <hal_i2c_available>

000b5826 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b5826:	7c00      	ldrb	r0, [r0, #16]
   b5828:	2100      	movs	r1, #0
   b582a:	f7ff be3d 	b.w	b54a8 <hal_i2c_read>

000b582e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b582e:	7c00      	ldrb	r0, [r0, #16]
   b5830:	2100      	movs	r1, #0
   b5832:	f7ff be41 	b.w	b54b8 <hal_i2c_peek>

000b5836 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b5836:	7c00      	ldrb	r0, [r0, #16]
   b5838:	2100      	movs	r1, #0
   b583a:	f7ff be45 	b.w	b54c8 <hal_i2c_flush>

000b583e <_ZN7TwoWireD0Ev>:
   b583e:	b510      	push	{r4, lr}
   b5840:	2114      	movs	r1, #20
   b5842:	4604      	mov	r4, r0
   b5844:	f7ff f935 	bl	b4ab2 <_ZdlPvj>
   b5848:	4620      	mov	r0, r4
   b584a:	bd10      	pop	{r4, pc}

000b584c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b584c:	b538      	push	{r3, r4, r5, lr}
   b584e:	4604      	mov	r4, r0
   b5850:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b5852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5856:	2200      	movs	r2, #0
   b5858:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b585c:	4b09      	ldr	r3, [pc, #36]	; (b5884 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b585e:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b5860:	4608      	mov	r0, r1
   b5862:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b5864:	4629      	mov	r1, r5
   b5866:	f7ff fe37 	bl	b54d8 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b586a:	30bf      	adds	r0, #191	; 0xbf
   b586c:	d108      	bne.n	b5880 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b586e:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b5870:	07db      	lsls	r3, r3, #31
   b5872:	d505      	bpl.n	b5880 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b5874:	6868      	ldr	r0, [r5, #4]
   b5876:	f7ff ff5b 	bl	b5730 <free>
    free(conf.tx_buffer);
   b587a:	68e8      	ldr	r0, [r5, #12]
   b587c:	f7ff ff58 	bl	b5730 <free>
}
   b5880:	4620      	mov	r0, r4
   b5882:	bd38      	pop	{r3, r4, r5, pc}
   b5884:	000b6b68 	.word	0x000b6b68

000b5888 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b5888:	2300      	movs	r3, #0
   b588a:	7c00      	ldrb	r0, [r0, #16]
   b588c:	461a      	mov	r2, r3
   b588e:	4619      	mov	r1, r3
   b5890:	f7ff bde2 	b.w	b5458 <hal_i2c_begin>

000b5894 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b5894:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b5896:	2200      	movs	r2, #0
   b5898:	2314      	movs	r3, #20
   b589a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b589e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b58a2:	780b      	ldrb	r3, [r1, #0]
   b58a4:	f88d 3008 	strb.w	r3, [sp, #8]
   b58a8:	684b      	ldr	r3, [r1, #4]
   b58aa:	9303      	str	r3, [sp, #12]
   b58ac:	68cb      	ldr	r3, [r1, #12]
   b58ae:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b58b0:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b58b2:	7a0b      	ldrb	r3, [r1, #8]
   b58b4:	9305      	str	r3, [sp, #20]
   b58b6:	a901      	add	r1, sp, #4
   b58b8:	f7ff fe16 	bl	b54e8 <hal_i2c_request_ex>
}
   b58bc:	b007      	add	sp, #28
   b58be:	f85d fb04 	ldr.w	pc, [sp], #4

000b58c2 <_ZN7TwoWire11requestFromEhjh>:
{
   b58c2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b58c4:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b58c6:	f88d 1000 	strb.w	r1, [sp]
   b58ca:	f04f 0164 	mov.w	r1, #100	; 0x64
   b58ce:	9103      	str	r1, [sp, #12]
   b58d0:	bf18      	it	ne
   b58d2:	2301      	movne	r3, #1
   b58d4:	4669      	mov	r1, sp
    size_ = size;
   b58d6:	9201      	str	r2, [sp, #4]
   b58d8:	f88d 3008 	strb.w	r3, [sp, #8]
   b58dc:	f7ff ffda 	bl	b5894 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b58e0:	b005      	add	sp, #20
   b58e2:	f85d fb04 	ldr.w	pc, [sp], #4

000b58e6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b58e6:	2301      	movs	r3, #1
   b58e8:	f7ff bfeb 	b.w	b58c2 <_ZN7TwoWire11requestFromEhjh>

000b58ec <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b58ec:	7c00      	ldrb	r0, [r0, #16]
   b58ee:	2200      	movs	r2, #0
   b58f0:	f7ff bdba 	b.w	b5468 <hal_i2c_begin_transmission>

000b58f4 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b58f4:	7c00      	ldrb	r0, [r0, #16]
   b58f6:	2200      	movs	r2, #0
   b58f8:	f7ff bdbe 	b.w	b5478 <hal_i2c_end_transmission>

000b58fc <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b58fc:	2101      	movs	r1, #1
   b58fe:	f7ff bff9 	b.w	b58f4 <_ZN7TwoWire15endTransmissionEh>

000b5902 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5902:	4770      	bx	lr

000b5904 <_ZN9IPAddressD0Ev>:
   b5904:	b510      	push	{r4, lr}
   b5906:	2118      	movs	r1, #24
   b5908:	4604      	mov	r4, r0
   b590a:	f7ff f8d2 	bl	b4ab2 <_ZdlPvj>
   b590e:	4620      	mov	r0, r4
   b5910:	bd10      	pop	{r4, pc}

000b5912 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5912:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5914:	7d03      	ldrb	r3, [r0, #20]
   b5916:	2b06      	cmp	r3, #6
{
   b5918:	b08d      	sub	sp, #52	; 0x34
   b591a:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b591c:	f100 0704 	add.w	r7, r0, #4
   b5920:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5924:	d012      	beq.n	b594c <_ZNK9IPAddress7printToER5Print+0x3a>
   b5926:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b592a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b592e:	220a      	movs	r2, #10
   b5930:	4630      	mov	r0, r6
   b5932:	f000 f960 	bl	b5bf6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5936:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5938:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b593a:	d019      	beq.n	b5970 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b593c:	2c00      	cmp	r4, #0
   b593e:	d0f4      	beq.n	b592a <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5940:	212e      	movs	r1, #46	; 0x2e
   b5942:	4630      	mov	r0, r6
   b5944:	f000 f938 	bl	b5bb8 <_ZN5Print5printEc>
   b5948:	4404      	add	r4, r0
   b594a:	e7ee      	b.n	b592a <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b594c:	232f      	movs	r3, #47	; 0x2f
   b594e:	466a      	mov	r2, sp
   b5950:	4639      	mov	r1, r7
   b5952:	200a      	movs	r0, #10
		buf[0] = 0;
   b5954:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5958:	f7ff fdce 	bl	b54f8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b595c:	4668      	mov	r0, sp
   b595e:	f7ff f863 	bl	b4a28 <strlen>
   b5962:	6833      	ldr	r3, [r6, #0]
   b5964:	4602      	mov	r2, r0
   b5966:	68db      	ldr	r3, [r3, #12]
   b5968:	4669      	mov	r1, sp
   b596a:	4630      	mov	r0, r6
   b596c:	4798      	blx	r3
   b596e:	4604      	mov	r4, r0
    }
    return n;
}
   b5970:	4620      	mov	r0, r4
   b5972:	b00d      	add	sp, #52	; 0x34
   b5974:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b5978 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5978:	b510      	push	{r4, lr}
   b597a:	4b05      	ldr	r3, [pc, #20]	; (b5990 <_ZN9IPAddressC1Ev+0x18>)
   b597c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b597e:	2211      	movs	r2, #17
   b5980:	f840 3b04 	str.w	r3, [r0], #4
   b5984:	2100      	movs	r1, #0
   b5986:	f000 fcaf 	bl	b62e8 <memset>
}
   b598a:	4620      	mov	r0, r4
   b598c:	bd10      	pop	{r4, pc}
   b598e:	bf00      	nop
   b5990:	000b6b90 	.word	0x000b6b90

000b5994 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5994:	4603      	mov	r3, r0
   b5996:	4a07      	ldr	r2, [pc, #28]	; (b59b4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5998:	b510      	push	{r4, lr}
   b599a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b599e:	f101 0210 	add.w	r2, r1, #16
   b59a2:	f851 4b04 	ldr.w	r4, [r1], #4
   b59a6:	f843 4b04 	str.w	r4, [r3], #4
   b59aa:	4291      	cmp	r1, r2
   b59ac:	d1f9      	bne.n	b59a2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b59ae:	780a      	ldrb	r2, [r1, #0]
   b59b0:	701a      	strb	r2, [r3, #0]
}
   b59b2:	bd10      	pop	{r4, pc}
   b59b4:	000b6b90 	.word	0x000b6b90

000b59b8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b59b8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b59ba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b59be:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b59c2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b59c6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b59ca:	2304      	movs	r3, #4
   b59cc:	6041      	str	r1, [r0, #4]
   b59ce:	7503      	strb	r3, [r0, #20]
}
   b59d0:	bd10      	pop	{r4, pc}
	...

000b59d4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b59d4:	b507      	push	{r0, r1, r2, lr}
   b59d6:	4b06      	ldr	r3, [pc, #24]	; (b59f0 <_ZN9IPAddressC1EPKh+0x1c>)
   b59d8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b59da:	78cb      	ldrb	r3, [r1, #3]
   b59dc:	9300      	str	r3, [sp, #0]
   b59de:	788b      	ldrb	r3, [r1, #2]
   b59e0:	784a      	ldrb	r2, [r1, #1]
   b59e2:	7809      	ldrb	r1, [r1, #0]
   b59e4:	f7ff ffe8 	bl	b59b8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b59e8:	b003      	add	sp, #12
   b59ea:	f85d fb04 	ldr.w	pc, [sp], #4
   b59ee:	bf00      	nop
   b59f0:	000b6b90 	.word	0x000b6b90

000b59f4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b59f4:	4b01      	ldr	r3, [pc, #4]	; (b59fc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b59f6:	4a02      	ldr	r2, [pc, #8]	; (b5a00 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b59f8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b59fa:	4770      	bx	lr
   b59fc:	2003e6d0 	.word	0x2003e6d0
   b5a00:	000b6b9c 	.word	0x000b6b9c

000b5a04 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5a04:	2300      	movs	r3, #0
   b5a06:	6840      	ldr	r0, [r0, #4]
   b5a08:	461a      	mov	r2, r3
   b5a0a:	f7ff be29 	b.w	b5660 <network_connect>

000b5a0e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5a0e:	6840      	ldr	r0, [r0, #4]
   b5a10:	2200      	movs	r2, #0
   b5a12:	2102      	movs	r1, #2
   b5a14:	f7ff be34 	b.w	b5680 <network_disconnect>

000b5a18 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5a18:	2200      	movs	r2, #0
   b5a1a:	6840      	ldr	r0, [r0, #4]
   b5a1c:	4611      	mov	r1, r2
   b5a1e:	f7ff be27 	b.w	b5670 <network_connecting>

000b5a22 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5a22:	2200      	movs	r2, #0
   b5a24:	6840      	ldr	r0, [r0, #4]
   b5a26:	4611      	mov	r1, r2
   b5a28:	f7ff be32 	b.w	b5690 <network_ready>

000b5a2c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5a2c:	2300      	movs	r3, #0
   b5a2e:	6840      	ldr	r0, [r0, #4]
   b5a30:	461a      	mov	r2, r3
   b5a32:	4619      	mov	r1, r3
   b5a34:	f7ff be34 	b.w	b56a0 <network_on>

000b5a38 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5a38:	2300      	movs	r3, #0
   b5a3a:	6840      	ldr	r0, [r0, #4]
   b5a3c:	461a      	mov	r2, r3
   b5a3e:	4619      	mov	r1, r3
   b5a40:	f7ff be36 	b.w	b56b0 <network_off>

000b5a44 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5a44:	6840      	ldr	r0, [r0, #4]
   b5a46:	2100      	movs	r1, #0
   b5a48:	f7ff be5a 	b.w	b5700 <network_is_on>

000b5a4c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5a4c:	6840      	ldr	r0, [r0, #4]
   b5a4e:	2100      	movs	r1, #0
   b5a50:	f7ff be5e 	b.w	b5710 <network_is_off>

000b5a54 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5a54:	6840      	ldr	r0, [r0, #4]
   b5a56:	2200      	movs	r2, #0
   b5a58:	f081 0101 	eor.w	r1, r1, #1
   b5a5c:	f7ff be30 	b.w	b56c0 <network_listen>

000b5a60 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5a60:	6840      	ldr	r0, [r0, #4]
   b5a62:	2200      	movs	r2, #0
   b5a64:	f7ff be3c 	b.w	b56e0 <network_set_listen_timeout>

000b5a68 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5a68:	2200      	movs	r2, #0
   b5a6a:	6840      	ldr	r0, [r0, #4]
   b5a6c:	4611      	mov	r1, r2
   b5a6e:	f7ff be3f 	b.w	b56f0 <network_get_listen_timeout>

000b5a72 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5a72:	2200      	movs	r2, #0
   b5a74:	6840      	ldr	r0, [r0, #4]
   b5a76:	4611      	mov	r1, r2
   b5a78:	f7ff be2a 	b.w	b56d0 <network_listening>

000b5a7c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5a80:	b095      	sub	sp, #84	; 0x54
   b5a82:	4614      	mov	r4, r2
   b5a84:	460d      	mov	r5, r1
   b5a86:	4607      	mov	r7, r0
    IPAddress addr;
   b5a88:	f7ff ff76 	bl	b5978 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5a8c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5a8e:	221c      	movs	r2, #28
   b5a90:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5a92:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5a94:	f000 fc28 	bl	b62e8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5a98:	2340      	movs	r3, #64	; 0x40
   b5a9a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5a9c:	4620      	mov	r0, r4
   b5a9e:	466b      	mov	r3, sp
   b5aa0:	aa0c      	add	r2, sp, #48	; 0x30
   b5aa2:	2100      	movs	r1, #0
   b5aa4:	f7ff fd38 	bl	b5518 <netdb_getaddrinfo>
    if (!r) {
   b5aa8:	4604      	mov	r4, r0
   b5aaa:	2800      	cmp	r0, #0
   b5aac:	d14b      	bne.n	b5b46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5aae:	4602      	mov	r2, r0
   b5ab0:	2101      	movs	r1, #1
   b5ab2:	6868      	ldr	r0, [r5, #4]
   b5ab4:	f7ff fdec 	bl	b5690 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5ab8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5aba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5abc:	4622      	mov	r2, r4
   b5abe:	6868      	ldr	r0, [r5, #4]
   b5ac0:	f7ff fde6 	bl	b5690 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5ac4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5ac6:	4681      	mov	r9, r0
        bool ok = false;
   b5ac8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5aca:	2e00      	cmp	r6, #0
   b5acc:	d03b      	beq.n	b5b46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5ace:	2900      	cmp	r1, #0
   b5ad0:	d139      	bne.n	b5b46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5ad2:	6873      	ldr	r3, [r6, #4]
   b5ad4:	2b02      	cmp	r3, #2
   b5ad6:	d003      	beq.n	b5ae0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5ad8:	2b0a      	cmp	r3, #10
   b5ada:	d011      	beq.n	b5b00 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5adc:	69f6      	ldr	r6, [r6, #28]
   b5ade:	e7f4      	b.n	b5aca <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5ae0:	f1b8 0f00 	cmp.w	r8, #0
   b5ae4:	d0fa      	beq.n	b5adc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5ae6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5ae8:	a806      	add	r0, sp, #24
   b5aea:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5aec:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5aee:	f7ff ff71 	bl	b59d4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5af2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5af4:	1d3c      	adds	r4, r7, #4
   b5af6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5af8:	682b      	ldr	r3, [r5, #0]
   b5afa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5afc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5afe:	e7ed      	b.n	b5adc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5b00:	f1b9 0f00 	cmp.w	r9, #0
   b5b04:	d0ea      	beq.n	b5adc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5b06:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5b08:	2210      	movs	r2, #16
   b5b0a:	a801      	add	r0, sp, #4
   b5b0c:	f000 fbec 	bl	b62e8 <memset>
                    a.v = 6;
   b5b10:	2306      	movs	r3, #6
   b5b12:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5b16:	ad01      	add	r5, sp, #4
   b5b18:	f104 0308 	add.w	r3, r4, #8
   b5b1c:	3418      	adds	r4, #24
   b5b1e:	6818      	ldr	r0, [r3, #0]
   b5b20:	6859      	ldr	r1, [r3, #4]
   b5b22:	462a      	mov	r2, r5
   b5b24:	c203      	stmia	r2!, {r0, r1}
   b5b26:	3308      	adds	r3, #8
   b5b28:	42a3      	cmp	r3, r4
   b5b2a:	4615      	mov	r5, r2
   b5b2c:	d1f7      	bne.n	b5b1e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5b2e:	a901      	add	r1, sp, #4
   b5b30:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5b32:	ad07      	add	r5, sp, #28
   b5b34:	f7ff ff2e 	bl	b5994 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5b3a:	1d3c      	adds	r4, r7, #4
   b5b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5b3e:	682b      	ldr	r3, [r5, #0]
   b5b40:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5b42:	4649      	mov	r1, r9
   b5b44:	e7ca      	b.n	b5adc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5b46:	9800      	ldr	r0, [sp, #0]
   b5b48:	f7ff fcde 	bl	b5508 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5b4c:	4638      	mov	r0, r7
   b5b4e:	b015      	add	sp, #84	; 0x54
   b5b50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5b54 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5b54:	4b02      	ldr	r3, [pc, #8]	; (b5b60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5b56:	4a03      	ldr	r2, [pc, #12]	; (b5b64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5b58:	601a      	str	r2, [r3, #0]
   b5b5a:	2200      	movs	r2, #0
   b5b5c:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
   b5b5e:	4770      	bx	lr
   b5b60:	2003e6d4 	.word	0x2003e6d4
   b5b64:	000b6ba8 	.word	0x000b6ba8

000b5b68 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5b6a:	4606      	mov	r6, r0
   b5b6c:	460d      	mov	r5, r1
  size_t n = 0;
   b5b6e:	188f      	adds	r7, r1, r2
   b5b70:	2400      	movs	r4, #0
  while (size--) {
   b5b72:	42bd      	cmp	r5, r7
   b5b74:	d00c      	beq.n	b5b90 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5b76:	6833      	ldr	r3, [r6, #0]
   b5b78:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5b7c:	689b      	ldr	r3, [r3, #8]
   b5b7e:	4630      	mov	r0, r6
   b5b80:	4798      	blx	r3
     if (chunk>=0)
   b5b82:	1e03      	subs	r3, r0, #0
   b5b84:	db01      	blt.n	b5b8a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5b86:	441c      	add	r4, r3
  while (size--) {
   b5b88:	e7f3      	b.n	b5b72 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5b8a:	2c00      	cmp	r4, #0
   b5b8c:	bf08      	it	eq
   b5b8e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5b90:	4620      	mov	r0, r4
   b5b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5b94 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5b94:	b513      	push	{r0, r1, r4, lr}
   b5b96:	4604      	mov	r4, r0
    }
   b5b98:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5b9a:	b159      	cbz	r1, b5bb4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5b9c:	9101      	str	r1, [sp, #4]
   b5b9e:	f7fe ff43 	bl	b4a28 <strlen>
   b5ba2:	6823      	ldr	r3, [r4, #0]
   b5ba4:	9901      	ldr	r1, [sp, #4]
   b5ba6:	68db      	ldr	r3, [r3, #12]
   b5ba8:	4602      	mov	r2, r0
   b5baa:	4620      	mov	r0, r4
    }
   b5bac:	b002      	add	sp, #8
   b5bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5bb2:	4718      	bx	r3
    }
   b5bb4:	b002      	add	sp, #8
   b5bb6:	bd10      	pop	{r4, pc}

000b5bb8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5bb8:	6803      	ldr	r3, [r0, #0]
   b5bba:	689b      	ldr	r3, [r3, #8]
   b5bbc:	4718      	bx	r3

000b5bbe <_ZN5Print5printEPK19__FlashStringHelper>:
   b5bbe:	b508      	push	{r3, lr}
   b5bc0:	f7ff ffe8 	bl	b5b94 <_ZN5Print5writeEPKc>
   b5bc4:	bd08      	pop	{r3, pc}

000b5bc6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b5bc6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b5bc8:	210d      	movs	r1, #13
{
   b5bca:	4605      	mov	r5, r0
  size_t n = print('\r');
   b5bcc:	f7ff fff4 	bl	b5bb8 <_ZN5Print5printEc>
  n += print('\n');
   b5bd0:	210a      	movs	r1, #10
  size_t n = print('\r');
   b5bd2:	4604      	mov	r4, r0
  n += print('\n');
   b5bd4:	4628      	mov	r0, r5
   b5bd6:	f7ff ffef 	bl	b5bb8 <_ZN5Print5printEc>
  return n;
}
   b5bda:	4420      	add	r0, r4
   b5bdc:	bd38      	pop	{r3, r4, r5, pc}

000b5bde <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b5bde:	b538      	push	{r3, r4, r5, lr}
   b5be0:	4605      	mov	r5, r0
  return write(str);
   b5be2:	f7ff ffd7 	bl	b5b94 <_ZN5Print5writeEPKc>
   b5be6:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b5be8:	4628      	mov	r0, r5
   b5bea:	f7ff ffec 	bl	b5bc6 <_ZN5Print7printlnEv>
  return n;
}
   b5bee:	4420      	add	r0, r4
   b5bf0:	bd38      	pop	{r3, r4, r5, pc}

000b5bf2 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   b5bf2:	f7ff bff4 	b.w	b5bde <_ZN5Print7printlnEPKc>

000b5bf6 <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5bf6:	b530      	push	{r4, r5, lr}
   b5bf8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5bfa:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5bfc:	2a01      	cmp	r2, #1
  *str = '\0';
   b5bfe:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5c02:	bf98      	it	ls
   b5c04:	220a      	movls	r2, #10
   b5c06:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5c08:	460d      	mov	r5, r1
   b5c0a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5c0e:	fb01 5312 	mls	r3, r1, r2, r5
   b5c12:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5c16:	2b09      	cmp	r3, #9
   b5c18:	bf94      	ite	ls
   b5c1a:	3330      	addls	r3, #48	; 0x30
   b5c1c:	3337      	addhi	r3, #55	; 0x37
   b5c1e:	b2db      	uxtb	r3, r3
  } while(n);
   b5c20:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5c22:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5c26:	d9ef      	bls.n	b5c08 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5c28:	4621      	mov	r1, r4
   b5c2a:	f7ff ffb3 	bl	b5b94 <_ZN5Print5writeEPKc>
}
   b5c2e:	b00b      	add	sp, #44	; 0x2c
   b5c30:	bd30      	pop	{r4, r5, pc}
	...

000b5c34 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b5c34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5c38:	ec55 4b10 	vmov	r4, r5, d0
   b5c3c:	4606      	mov	r6, r0
   b5c3e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b5c40:	ee10 2a10 	vmov	r2, s0
   b5c44:	ee10 0a10 	vmov	r0, s0
   b5c48:	462b      	mov	r3, r5
   b5c4a:	4629      	mov	r1, r5
   b5c4c:	f7fe fe3e 	bl	b48cc <__aeabi_dcmpun>
   b5c50:	b140      	cbz	r0, b5c64 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b5c52:	4953      	ldr	r1, [pc, #332]	; (b5da0 <_ZN5Print10printFloatEdh+0x16c>)
   b5c54:	4630      	mov	r0, r6
   b5c56:	f7ff ff9d 	bl	b5b94 <_ZN5Print5writeEPKc>
   b5c5a:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b5c5c:	4650      	mov	r0, sl
   b5c5e:	b003      	add	sp, #12
   b5c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b5c64:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b5c68:	4b4e      	ldr	r3, [pc, #312]	; (b5da4 <_ZN5Print10printFloatEdh+0x170>)
   b5c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5c6e:	4620      	mov	r0, r4
   b5c70:	4649      	mov	r1, r9
   b5c72:	f7fe fe2b 	bl	b48cc <__aeabi_dcmpun>
   b5c76:	b948      	cbnz	r0, b5c8c <_ZN5Print10printFloatEdh+0x58>
   b5c78:	4b4a      	ldr	r3, [pc, #296]	; (b5da4 <_ZN5Print10printFloatEdh+0x170>)
   b5c7a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5c7e:	4620      	mov	r0, r4
   b5c80:	4649      	mov	r1, r9
   b5c82:	f7fe fe05 	bl	b4890 <__aeabi_dcmple>
   b5c86:	b908      	cbnz	r0, b5c8c <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b5c88:	4947      	ldr	r1, [pc, #284]	; (b5da8 <_ZN5Print10printFloatEdh+0x174>)
   b5c8a:	e7e3      	b.n	b5c54 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b5c8c:	4b47      	ldr	r3, [pc, #284]	; (b5dac <_ZN5Print10printFloatEdh+0x178>)
   b5c8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b5c92:	4620      	mov	r0, r4
   b5c94:	4629      	mov	r1, r5
   b5c96:	f7fe fe0f 	bl	b48b8 <__aeabi_dcmpgt>
   b5c9a:	b108      	cbz	r0, b5ca0 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b5c9c:	4944      	ldr	r1, [pc, #272]	; (b5db0 <_ZN5Print10printFloatEdh+0x17c>)
   b5c9e:	e7d9      	b.n	b5c54 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b5ca0:	4b44      	ldr	r3, [pc, #272]	; (b5db4 <_ZN5Print10printFloatEdh+0x180>)
   b5ca2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b5ca6:	4620      	mov	r0, r4
   b5ca8:	4629      	mov	r1, r5
   b5caa:	f7fe fde7 	bl	b487c <__aeabi_dcmplt>
   b5cae:	2800      	cmp	r0, #0
   b5cb0:	d1f4      	bne.n	b5c9c <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b5cb2:	2200      	movs	r2, #0
   b5cb4:	2300      	movs	r3, #0
   b5cb6:	4620      	mov	r0, r4
   b5cb8:	4629      	mov	r1, r5
   b5cba:	f7fe fddf 	bl	b487c <__aeabi_dcmplt>
   b5cbe:	b1d0      	cbz	r0, b5cf6 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b5cc0:	212d      	movs	r1, #45	; 0x2d
   b5cc2:	4630      	mov	r0, r6
   b5cc4:	f7ff ff78 	bl	b5bb8 <_ZN5Print5printEc>
     number = -number;
   b5cc8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b5ccc:	4682      	mov	sl, r0
     number = -number;
   b5cce:	461d      	mov	r5, r3
  double rounding = 0.5;
   b5cd0:	4939      	ldr	r1, [pc, #228]	; (b5db8 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b5cd2:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b5dc0 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b5cd6:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b5cda:	2000      	movs	r0, #0
    rounding /= 10.0;
   b5cdc:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b5ce0:	fa5f f38b 	uxtb.w	r3, fp
   b5ce4:	429f      	cmp	r7, r3
   b5ce6:	d908      	bls.n	b5cfa <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b5ce8:	4642      	mov	r2, r8
   b5cea:	464b      	mov	r3, r9
   b5cec:	f7fe fc7e 	bl	b45ec <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b5cf0:	f10b 0b01 	add.w	fp, fp, #1
   b5cf4:	e7f4      	b.n	b5ce0 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b5cf6:	4682      	mov	sl, r0
   b5cf8:	e7ea      	b.n	b5cd0 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b5cfa:	4622      	mov	r2, r4
   b5cfc:	462b      	mov	r3, r5
   b5cfe:	f7fe f995 	bl	b402c <__adddf3>
   b5d02:	460d      	mov	r5, r1
   b5d04:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b5d06:	f7fe fe1f 	bl	b4948 <__aeabi_d2uiz>
   b5d0a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b5d0c:	f7fe faca 	bl	b42a4 <__aeabi_ui2d>
   b5d10:	4602      	mov	r2, r0
   b5d12:	460b      	mov	r3, r1
   b5d14:	4620      	mov	r0, r4
   b5d16:	4629      	mov	r1, r5
   b5d18:	f7fe f986 	bl	b4028 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b5d1c:	220a      	movs	r2, #10
   b5d1e:	4604      	mov	r4, r0
   b5d20:	460d      	mov	r5, r1
   b5d22:	4630      	mov	r0, r6
   b5d24:	4641      	mov	r1, r8
   b5d26:	f7ff ff66 	bl	b5bf6 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b5d2a:	4482      	add	sl, r0
  if (digits > 0) {
   b5d2c:	2f00      	cmp	r7, #0
   b5d2e:	d095      	beq.n	b5c5c <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b5d30:	4922      	ldr	r1, [pc, #136]	; (b5dbc <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b5d32:	f8df 908c 	ldr.w	r9, [pc, #140]	; b5dc0 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b5d36:	4630      	mov	r0, r6
   b5d38:	f7ff ff2c 	bl	b5b94 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b5d3c:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b5d40:	4482      	add	sl, r0
  while (digits-- > 0)
   b5d42:	2f00      	cmp	r7, #0
   b5d44:	d08a      	beq.n	b5c5c <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b5d46:	4642      	mov	r2, r8
   b5d48:	464b      	mov	r3, r9
   b5d4a:	4620      	mov	r0, r4
   b5d4c:	4629      	mov	r1, r5
   b5d4e:	f7fe fb23 	bl	b4398 <__aeabi_dmul>
   b5d52:	4604      	mov	r4, r0
   b5d54:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b5d56:	f7fe fdcf 	bl	b48f8 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b5d5a:	f1b0 0b00 	subs.w	fp, r0, #0
   b5d5e:	da1c      	bge.n	b5d9a <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b5d60:	212d      	movs	r1, #45	; 0x2d
   b5d62:	4630      	mov	r0, r6
   b5d64:	f7ff ff28 	bl	b5bb8 <_ZN5Print5printEc>
            val = -n;
   b5d68:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b5d6c:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b5d6e:	220a      	movs	r2, #10
   b5d70:	4630      	mov	r0, r6
   b5d72:	9301      	str	r3, [sp, #4]
   b5d74:	f7ff ff3f 	bl	b5bf6 <_ZN5Print11printNumberEmh>
   b5d78:	9b01      	ldr	r3, [sp, #4]
   b5d7a:	4418      	add	r0, r3
    n += print(toPrint);
   b5d7c:	4482      	add	sl, r0
    remainder -= toPrint;
   b5d7e:	4658      	mov	r0, fp
   b5d80:	f7fe faa0 	bl	b42c4 <__aeabi_i2d>
   b5d84:	4602      	mov	r2, r0
   b5d86:	460b      	mov	r3, r1
   b5d88:	4620      	mov	r0, r4
   b5d8a:	4629      	mov	r1, r5
   b5d8c:	f7fe f94c 	bl	b4028 <__aeabi_dsub>
   b5d90:	3f01      	subs	r7, #1
   b5d92:	4604      	mov	r4, r0
   b5d94:	460d      	mov	r5, r1
   b5d96:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b5d98:	e7d3      	b.n	b5d42 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b5d9a:	4659      	mov	r1, fp
        size_t t = 0;
   b5d9c:	2300      	movs	r3, #0
   b5d9e:	e7e6      	b.n	b5d6e <_ZN5Print10printFloatEdh+0x13a>
   b5da0:	000b6bdc 	.word	0x000b6bdc
   b5da4:	7fefffff 	.word	0x7fefffff
   b5da8:	000b6be0 	.word	0x000b6be0
   b5dac:	41efffff 	.word	0x41efffff
   b5db0:	000b6be4 	.word	0x000b6be4
   b5db4:	c1efffff 	.word	0xc1efffff
   b5db8:	3fe00000 	.word	0x3fe00000
   b5dbc:	000b6489 	.word	0x000b6489
   b5dc0:	40240000 	.word	0x40240000

000b5dc4 <_ZN5Print5printEfi>:
{
   b5dc4:	b538      	push	{r3, r4, r5, lr}
   b5dc6:	4604      	mov	r4, r0
   b5dc8:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b5dcc:	b2cd      	uxtb	r5, r1
   b5dce:	f7fe fa8b 	bl	b42e8 <__aeabi_f2d>
   b5dd2:	ec41 0b10 	vmov	d0, r0, r1
   b5dd6:	4629      	mov	r1, r5
   b5dd8:	4620      	mov	r0, r4
}
   b5dda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b5dde:	f7ff bf29 	b.w	b5c34 <_ZN5Print10printFloatEdh>

000b5de2 <_ZN5Print7printlnEdi>:
{
   b5de2:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b5de4:	b2c9      	uxtb	r1, r1
{
   b5de6:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b5de8:	f7ff ff24 	bl	b5c34 <_ZN5Print10printFloatEdh>
   b5dec:	4604      	mov	r4, r0
  n += println();
   b5dee:	4628      	mov	r0, r5
   b5df0:	f7ff fee9 	bl	b5bc6 <_ZN5Print7printlnEv>
}
   b5df4:	4420      	add	r0, r4
   b5df6:	bd38      	pop	{r3, r4, r5, pc}

000b5df8 <_ZN5Print7printlnEfi>:
{
   b5df8:	b538      	push	{r3, r4, r5, lr}
   b5dfa:	4604      	mov	r4, r0
   b5dfc:	ee10 0a10 	vmov	r0, s0
   b5e00:	460d      	mov	r5, r1
    return println((double)num, digits);
   b5e02:	f7fe fa71 	bl	b42e8 <__aeabi_f2d>
   b5e06:	ec41 0b10 	vmov	d0, r0, r1
   b5e0a:	4629      	mov	r1, r5
   b5e0c:	4620      	mov	r0, r4
}
   b5e0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b5e12:	f7ff bfe6 	b.w	b5de2 <_ZN5Print7printlnEdi>
	...

000b5e18 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5e18:	4b01      	ldr	r3, [pc, #4]	; (b5e20 <_GLOBAL__sub_I_RGB+0x8>)
   b5e1a:	2200      	movs	r2, #0
   b5e1c:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5e1e:	4770      	bx	lr
   b5e20:	2003e6dc 	.word	0x2003e6dc

000b5e24 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5e24:	4b05      	ldr	r3, [pc, #20]	; (b5e3c <_GLOBAL__sub_I_System+0x18>)
   b5e26:	2202      	movs	r2, #2
   b5e28:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5e2a:	4b05      	ldr	r3, [pc, #20]	; (b5e40 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5e2c:	4a05      	ldr	r2, [pc, #20]	; (b5e44 <_GLOBAL__sub_I_System+0x20>)
   b5e2e:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5e30:	2000      	movs	r0, #0
   b5e32:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5e36:	f7ff bbe7 	b.w	b5608 <set_system_mode>
   b5e3a:	bf00      	nop
   b5e3c:	2003e6f8 	.word	0x2003e6f8
   b5e40:	2003e6ec 	.word	0x2003e6ec
   b5e44:	ffff0000 	.word	0xffff0000

000b5e48 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5e48:	4b02      	ldr	r3, [pc, #8]	; (b5e54 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5e4a:	681a      	ldr	r2, [r3, #0]
   b5e4c:	4b02      	ldr	r3, [pc, #8]	; (b5e58 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5e4e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5e50:	4770      	bx	lr
   b5e52:	bf00      	nop
   b5e54:	2003e63c 	.word	0x2003e63c
   b5e58:	2003e6fc 	.word	0x2003e6fc

000b5e5c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5e5c:	4770      	bx	lr

000b5e5e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5e5e:	7441      	strb	r1, [r0, #17]
}
   b5e60:	4770      	bx	lr

000b5e62 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5e62:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5e64:	7c00      	ldrb	r0, [r0, #16]
   b5e66:	f7ff fb87 	bl	b5578 <hal_usart_available_data_for_write>
}
   b5e6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5e6e:	bd08      	pop	{r3, pc}

000b5e70 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5e70:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5e72:	7c00      	ldrb	r0, [r0, #16]
   b5e74:	f7ff fb60 	bl	b5538 <hal_usart_available>
}
   b5e78:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5e7c:	bd08      	pop	{r3, pc}

000b5e7e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5e7e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5e80:	7c00      	ldrb	r0, [r0, #16]
   b5e82:	f7ff fb69 	bl	b5558 <hal_usart_peek>
}
   b5e86:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5e8a:	bd08      	pop	{r3, pc}

000b5e8c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5e8c:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5e8e:	7c00      	ldrb	r0, [r0, #16]
   b5e90:	f7ff fb5a 	bl	b5548 <hal_usart_read>
}
   b5e94:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5e98:	bd08      	pop	{r3, pc}

000b5e9a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5e9a:	7c00      	ldrb	r0, [r0, #16]
   b5e9c:	f7ff bb64 	b.w	b5568 <hal_usart_flush>

000b5ea0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5ea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ea2:	7c45      	ldrb	r5, [r0, #17]
{
   b5ea4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5ea6:	b12d      	cbz	r5, b5eb4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5ea8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5eaa:	b003      	add	sp, #12
   b5eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5eb0:	f7ff bb3a 	b.w	b5528 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5eb4:	7c00      	ldrb	r0, [r0, #16]
   b5eb6:	9101      	str	r1, [sp, #4]
   b5eb8:	f7ff fb5e 	bl	b5578 <hal_usart_available_data_for_write>
   b5ebc:	2800      	cmp	r0, #0
   b5ebe:	9901      	ldr	r1, [sp, #4]
   b5ec0:	dcf2      	bgt.n	b5ea8 <_ZN11USARTSerial5writeEh+0x8>
}
   b5ec2:	4628      	mov	r0, r5
   b5ec4:	b003      	add	sp, #12
   b5ec6:	bd30      	pop	{r4, r5, pc}

000b5ec8 <_ZN11USARTSerialD0Ev>:
   b5ec8:	b510      	push	{r4, lr}
   b5eca:	2114      	movs	r1, #20
   b5ecc:	4604      	mov	r4, r0
   b5ece:	f7fe fdf0 	bl	b4ab2 <_ZdlPvj>
   b5ed2:	4620      	mov	r0, r4
   b5ed4:	bd10      	pop	{r4, pc}
	...

000b5ed8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5ed8:	b510      	push	{r4, lr}
   b5eda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5ede:	4604      	mov	r4, r0
   b5ee0:	4608      	mov	r0, r1
   b5ee2:	4611      	mov	r1, r2
   b5ee4:	2200      	movs	r2, #0
   b5ee6:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5eea:	4b04      	ldr	r3, [pc, #16]	; (b5efc <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5eec:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5eee:	2301      	movs	r3, #1
  _serial = serial;
   b5ef0:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5ef2:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5ef4:	f7ff fb48 	bl	b5588 <hal_usart_init_ex>
}
   b5ef8:	4620      	mov	r0, r4
   b5efa:	bd10      	pop	{r4, pc}
   b5efc:	000b6c0c 	.word	0x000b6c0c

000b5f00 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5f00:	7441      	strb	r1, [r0, #17]
}
   b5f02:	4770      	bx	lr

000b5f04 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5f04:	4770      	bx	lr

000b5f06 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5f06:	4770      	bx	lr

000b5f08 <_ZN9USBSerial4readEv>:
{
   b5f08:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5f0a:	2100      	movs	r1, #0
   b5f0c:	7c00      	ldrb	r0, [r0, #16]
   b5f0e:	f7ff fb63 	bl	b55d8 <HAL_USB_USART_Receive_Data>
}
   b5f12:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5f16:	bd08      	pop	{r3, pc}

000b5f18 <_ZN9USBSerial4peekEv>:
{
   b5f18:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5f1a:	2101      	movs	r1, #1
   b5f1c:	7c00      	ldrb	r0, [r0, #16]
   b5f1e:	f7ff fb5b 	bl	b55d8 <HAL_USB_USART_Receive_Data>
}
   b5f22:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5f26:	bd08      	pop	{r3, pc}

000b5f28 <_ZN9USBSerial17availableForWriteEv>:
{
   b5f28:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5f2a:	7c00      	ldrb	r0, [r0, #16]
   b5f2c:	f7ff fb4c 	bl	b55c8 <HAL_USB_USART_Available_Data_For_Write>
}
   b5f30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5f34:	bd08      	pop	{r3, pc}

000b5f36 <_ZN9USBSerial9availableEv>:
{
   b5f36:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5f38:	7c00      	ldrb	r0, [r0, #16]
   b5f3a:	f7ff fb3d 	bl	b55b8 <HAL_USB_USART_Available_Data>
}
   b5f3e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5f42:	bd08      	pop	{r3, pc}

000b5f44 <_ZN9USBSerial5writeEh>:
{
   b5f44:	b513      	push	{r0, r1, r4, lr}
   b5f46:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5f48:	7c00      	ldrb	r0, [r0, #16]
{
   b5f4a:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5f4c:	f7ff fb3c 	bl	b55c8 <HAL_USB_USART_Available_Data_For_Write>
   b5f50:	2800      	cmp	r0, #0
   b5f52:	9901      	ldr	r1, [sp, #4]
   b5f54:	dc01      	bgt.n	b5f5a <_ZN9USBSerial5writeEh+0x16>
   b5f56:	7c60      	ldrb	r0, [r4, #17]
   b5f58:	b120      	cbz	r0, b5f64 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5f5a:	7c20      	ldrb	r0, [r4, #16]
   b5f5c:	f7ff fb44 	bl	b55e8 <HAL_USB_USART_Send_Data>
   b5f60:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b5f64:	b002      	add	sp, #8
   b5f66:	bd10      	pop	{r4, pc}

000b5f68 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5f68:	7c00      	ldrb	r0, [r0, #16]
   b5f6a:	f7ff bb45 	b.w	b55f8 <HAL_USB_USART_Flush_Data>

000b5f6e <_ZN9USBSerialD0Ev>:
   b5f6e:	b510      	push	{r4, lr}
   b5f70:	2114      	movs	r1, #20
   b5f72:	4604      	mov	r4, r0
   b5f74:	f7fe fd9d 	bl	b4ab2 <_ZdlPvj>
   b5f78:	4620      	mov	r0, r4
   b5f7a:	bd10      	pop	{r4, pc}

000b5f7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5f7c:	b510      	push	{r4, lr}
   b5f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5f82:	4604      	mov	r4, r0
   b5f84:	4608      	mov	r0, r1
   b5f86:	2100      	movs	r1, #0
   b5f88:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5f8c:	4b04      	ldr	r3, [pc, #16]	; (b5fa0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5f8e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5f90:	2301      	movs	r3, #1
  _serial = serial;
   b5f92:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5f94:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b5f96:	4611      	mov	r1, r2
   b5f98:	f7ff fafe 	bl	b5598 <HAL_USB_USART_Init>
}
   b5f9c:	4620      	mov	r0, r4
   b5f9e:	bd10      	pop	{r4, pc}
   b5fa0:	000b6c3c 	.word	0x000b6c3c

000b5fa4 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b5fa4:	7c00      	ldrb	r0, [r0, #16]
   b5fa6:	2200      	movs	r2, #0
   b5fa8:	f7ff bafe 	b.w	b55a8 <HAL_USB_USART_Begin>

000b5fac <_Z19acquireSerialBufferv>:
{
   b5fac:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5fae:	2214      	movs	r2, #20
{
   b5fb0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b5fb2:	2100      	movs	r1, #0
   b5fb4:	f000 f998 	bl	b62e8 <memset>
}
   b5fb8:	4620      	mov	r0, r4
   b5fba:	bd10      	pop	{r4, pc}

000b5fbc <_Z16_fetch_usbserialv>:
{
   b5fbc:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5fbe:	4c0f      	ldr	r4, [pc, #60]	; (b5ffc <_Z16_fetch_usbserialv+0x40>)
{
   b5fc0:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b5fc2:	a803      	add	r0, sp, #12
   b5fc4:	f7ff fff2 	bl	b5fac <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5fc8:	7821      	ldrb	r1, [r4, #0]
   b5fca:	f3bf 8f5b 	dmb	ish
   b5fce:	f011 0101 	ands.w	r1, r1, #1
   b5fd2:	d10f      	bne.n	b5ff4 <_Z16_fetch_usbserialv+0x38>
   b5fd4:	4620      	mov	r0, r4
   b5fd6:	9101      	str	r1, [sp, #4]
   b5fd8:	f7fe fd6d 	bl	b4ab6 <__cxa_guard_acquire>
   b5fdc:	9901      	ldr	r1, [sp, #4]
   b5fde:	b148      	cbz	r0, b5ff4 <_Z16_fetch_usbserialv+0x38>
   b5fe0:	aa03      	add	r2, sp, #12
   b5fe2:	4807      	ldr	r0, [pc, #28]	; (b6000 <_Z16_fetch_usbserialv+0x44>)
   b5fe4:	f7ff ffca 	bl	b5f7c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b5fe8:	4620      	mov	r0, r4
   b5fea:	f7fe fd69 	bl	b4ac0 <__cxa_guard_release>
   b5fee:	4805      	ldr	r0, [pc, #20]	; (b6004 <_Z16_fetch_usbserialv+0x48>)
   b5ff0:	f000 f966 	bl	b62c0 <atexit>
	return _usbserial;
}
   b5ff4:	4802      	ldr	r0, [pc, #8]	; (b6000 <_Z16_fetch_usbserialv+0x44>)
   b5ff6:	b008      	add	sp, #32
   b5ff8:	bd10      	pop	{r4, pc}
   b5ffa:	bf00      	nop
   b5ffc:	2003e700 	.word	0x2003e700
   b6000:	2003e704 	.word	0x2003e704
   b6004:	000b5f05 	.word	0x000b5f05

000b6008 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b6008:	2200      	movs	r2, #0
   b600a:	6840      	ldr	r0, [r0, #4]
   b600c:	4611      	mov	r1, r2
   b600e:	f7ff bb3f 	b.w	b5690 <network_ready>

000b6012 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6012:	2200      	movs	r2, #0
   b6014:	6840      	ldr	r0, [r0, #4]
   b6016:	4611      	mov	r1, r2
   b6018:	f7ff bb5a 	b.w	b56d0 <network_listening>

000b601c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b601c:	2200      	movs	r2, #0
   b601e:	6840      	ldr	r0, [r0, #4]
   b6020:	4611      	mov	r1, r2
   b6022:	f7ff bb65 	b.w	b56f0 <network_get_listen_timeout>

000b6026 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b6026:	6840      	ldr	r0, [r0, #4]
   b6028:	2200      	movs	r2, #0
   b602a:	f7ff bb59 	b.w	b56e0 <network_set_listen_timeout>

000b602e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b602e:	6840      	ldr	r0, [r0, #4]
   b6030:	2200      	movs	r2, #0
   b6032:	f081 0101 	eor.w	r1, r1, #1
   b6036:	f7ff bb43 	b.w	b56c0 <network_listen>

000b603a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b603a:	2300      	movs	r3, #0
   b603c:	6840      	ldr	r0, [r0, #4]
   b603e:	461a      	mov	r2, r3
   b6040:	4619      	mov	r1, r3
   b6042:	f7ff bb35 	b.w	b56b0 <network_off>

000b6046 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b6046:	2300      	movs	r3, #0
   b6048:	6840      	ldr	r0, [r0, #4]
   b604a:	461a      	mov	r2, r3
   b604c:	4619      	mov	r1, r3
   b604e:	f7ff bb27 	b.w	b56a0 <network_on>

000b6052 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6052:	2200      	movs	r2, #0
   b6054:	6840      	ldr	r0, [r0, #4]
   b6056:	4611      	mov	r1, r2
   b6058:	f7ff bb0a 	b.w	b5670 <network_connecting>

000b605c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b605c:	6840      	ldr	r0, [r0, #4]
   b605e:	2200      	movs	r2, #0
   b6060:	2102      	movs	r1, #2
   b6062:	f7ff bb0d 	b.w	b5680 <network_disconnect>

000b6066 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6066:	2300      	movs	r3, #0
   b6068:	6840      	ldr	r0, [r0, #4]
   b606a:	461a      	mov	r2, r3
   b606c:	f7ff baf8 	b.w	b5660 <network_connect>

000b6070 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6070:	4b02      	ldr	r3, [pc, #8]	; (b607c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6072:	2204      	movs	r2, #4
   b6074:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6076:	4a02      	ldr	r2, [pc, #8]	; (b6080 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6078:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b607a:	4770      	bx	lr
   b607c:	2003e718 	.word	0x2003e718
   b6080:	000b6c6c 	.word	0x000b6c6c

000b6084 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b6084:	4b01      	ldr	r3, [pc, #4]	; (b608c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b6086:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b6088:	4770      	bx	lr
   b608a:	bf00      	nop
   b608c:	2003e640 	.word	0x2003e640

000b6090 <serialEventRun>:
{
   b6090:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b6092:	4b0b      	ldr	r3, [pc, #44]	; (b60c0 <serialEventRun+0x30>)
   b6094:	b143      	cbz	r3, b60a8 <serialEventRun+0x18>
   b6096:	f7ff ff91 	bl	b5fbc <_Z16_fetch_usbserialv>
   b609a:	6803      	ldr	r3, [r0, #0]
   b609c:	691b      	ldr	r3, [r3, #16]
   b609e:	4798      	blx	r3
   b60a0:	2800      	cmp	r0, #0
   b60a2:	dd01      	ble.n	b60a8 <serialEventRun+0x18>
        serialEvent();
   b60a4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b60a8:	4b06      	ldr	r3, [pc, #24]	; (b60c4 <serialEventRun+0x34>)
   b60aa:	b143      	cbz	r3, b60be <serialEventRun+0x2e>
   b60ac:	f000 f8e2 	bl	b6274 <_Z22__fetch_global_Serial1v>
   b60b0:	6803      	ldr	r3, [r0, #0]
   b60b2:	691b      	ldr	r3, [r3, #16]
   b60b4:	4798      	blx	r3
   b60b6:	2800      	cmp	r0, #0
   b60b8:	dd01      	ble.n	b60be <serialEventRun+0x2e>
        serialEvent1();
   b60ba:	f3af 8000 	nop.w
}
   b60be:	bd08      	pop	{r3, pc}
	...

000b60c8 <_post_loop>:
{
   b60c8:	b508      	push	{r3, lr}
	serialEventRun();
   b60ca:	f7ff ffe1 	bl	b6090 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b60ce:	f7ff f9bb 	bl	b5448 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b60d2:	4b01      	ldr	r3, [pc, #4]	; (b60d8 <_post_loop+0x10>)
   b60d4:	6018      	str	r0, [r3, #0]
}
   b60d6:	bd08      	pop	{r3, pc}
   b60d8:	2003e728 	.word	0x2003e728

000b60dc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b60dc:	4805      	ldr	r0, [pc, #20]	; (b60f4 <_Z33system_initialize_user_backup_ramv+0x18>)
   b60de:	4a06      	ldr	r2, [pc, #24]	; (b60f8 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b60e0:	4906      	ldr	r1, [pc, #24]	; (b60fc <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b60e2:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b60e4:	1a12      	subs	r2, r2, r0
   b60e6:	f000 f8f1 	bl	b62cc <memcpy>
    __backup_sram_signature = signature;
   b60ea:	4b05      	ldr	r3, [pc, #20]	; (b6100 <_Z33system_initialize_user_backup_ramv+0x24>)
   b60ec:	4a05      	ldr	r2, [pc, #20]	; (b6104 <_Z33system_initialize_user_backup_ramv+0x28>)
   b60ee:	601a      	str	r2, [r3, #0]
}
   b60f0:	bd08      	pop	{r3, pc}
   b60f2:	bf00      	nop
   b60f4:	2003f400 	.word	0x2003f400
   b60f8:	2003f404 	.word	0x2003f404
   b60fc:	000b6dc8 	.word	0x000b6dc8
   b6100:	2003f400 	.word	0x2003f400
   b6104:	9a271c1e 	.word	0x9a271c1e

000b6108 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6108:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b610a:	2300      	movs	r3, #0
   b610c:	9300      	str	r3, [sp, #0]
   b610e:	461a      	mov	r2, r3
   b6110:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6114:	f7ff fa92 	bl	b563c <system_ctrl_set_result>
}
   b6118:	b003      	add	sp, #12
   b611a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6120 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6120:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6122:	8843      	ldrh	r3, [r0, #2]
   b6124:	2b0a      	cmp	r3, #10
   b6126:	d008      	beq.n	b613a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6128:	2b50      	cmp	r3, #80	; 0x50
   b612a:	d10b      	bne.n	b6144 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b612c:	4b09      	ldr	r3, [pc, #36]	; (b6154 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b612e:	681b      	ldr	r3, [r3, #0]
   b6130:	b14b      	cbz	r3, b6146 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6132:	b003      	add	sp, #12
   b6134:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6138:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b613a:	f7ff ffe5 	bl	b6108 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b613e:	b003      	add	sp, #12
   b6140:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6144:	2300      	movs	r3, #0
   b6146:	9300      	str	r3, [sp, #0]
   b6148:	461a      	mov	r2, r3
   b614a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b614e:	f7ff fa75 	bl	b563c <system_ctrl_set_result>
}
   b6152:	e7f4      	b.n	b613e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b6154:	2003e724 	.word	0x2003e724

000b6158 <module_user_init_hook>:
{
   b6158:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b615a:	4812      	ldr	r0, [pc, #72]	; (b61a4 <module_user_init_hook+0x4c>)
   b615c:	2100      	movs	r1, #0
   b615e:	f7ff faf7 	bl	b5750 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b6162:	4b11      	ldr	r3, [pc, #68]	; (b61a8 <module_user_init_hook+0x50>)
   b6164:	681a      	ldr	r2, [r3, #0]
   b6166:	4b11      	ldr	r3, [pc, #68]	; (b61ac <module_user_init_hook+0x54>)
   b6168:	429a      	cmp	r2, r3
   b616a:	4b11      	ldr	r3, [pc, #68]	; (b61b0 <module_user_init_hook+0x58>)
   b616c:	bf0c      	ite	eq
   b616e:	2201      	moveq	r2, #1
   b6170:	2200      	movne	r2, #0
   b6172:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b6174:	d001      	beq.n	b617a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b6176:	f7ff ffb1 	bl	b60dc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b617a:	f7ff f95d 	bl	b5438 <HAL_RNG_GetRandomNumber>
   b617e:	4604      	mov	r4, r0
    srand(seed);
   b6180:	f000 f8ba 	bl	b62f8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b6184:	4b0b      	ldr	r3, [pc, #44]	; (b61b4 <module_user_init_hook+0x5c>)
   b6186:	b113      	cbz	r3, b618e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b6188:	4620      	mov	r0, r4
   b618a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b618e:	2100      	movs	r1, #0
   b6190:	4808      	ldr	r0, [pc, #32]	; (b61b4 <module_user_init_hook+0x5c>)
   b6192:	f7ff fa5d 	bl	b5650 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b6196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b619a:	4807      	ldr	r0, [pc, #28]	; (b61b8 <module_user_init_hook+0x60>)
   b619c:	2100      	movs	r1, #0
   b619e:	f7ff ba43 	b.w	b5628 <system_ctrl_set_app_request_handler>
   b61a2:	bf00      	nop
   b61a4:	000b6085 	.word	0x000b6085
   b61a8:	2003f400 	.word	0x2003f400
   b61ac:	9a271c1e 	.word	0x9a271c1e
   b61b0:	2003e720 	.word	0x2003e720
   b61b4:	00000000 	.word	0x00000000
   b61b8:	000b6121 	.word	0x000b6121

000b61bc <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b61bc:	4770      	bx	lr
	...

000b61c0 <_Z17acquireWireBufferv>:
{
   b61c0:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b61c2:	4b0a      	ldr	r3, [pc, #40]	; (b61ec <_Z17acquireWireBufferv+0x2c>)
   b61c4:	6003      	str	r3, [r0, #0]
   b61c6:	2301      	movs	r3, #1
{
   b61c8:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b61ca:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b61cc:	4908      	ldr	r1, [pc, #32]	; (b61f0 <_Z17acquireWireBufferv+0x30>)
   b61ce:	2020      	movs	r0, #32
   b61d0:	f000 f874 	bl	b62bc <_ZnajRKSt9nothrow_t>
	};
   b61d4:	2520      	movs	r5, #32
   b61d6:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b61d8:	4905      	ldr	r1, [pc, #20]	; (b61f0 <_Z17acquireWireBufferv+0x30>)
	};
   b61da:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b61dc:	4628      	mov	r0, r5
   b61de:	f000 f86d 	bl	b62bc <_ZnajRKSt9nothrow_t>
	};
   b61e2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b61e6:	4620      	mov	r0, r4
   b61e8:	bd38      	pop	{r3, r4, r5, pc}
   b61ea:	bf00      	nop
   b61ec:	00010018 	.word	0x00010018
   b61f0:	000b6ca0 	.word	0x000b6ca0

000b61f4 <_Z19__fetch_global_Wirev>:
{
   b61f4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b61f6:	4d0e      	ldr	r5, [pc, #56]	; (b6230 <_Z19__fetch_global_Wirev+0x3c>)
   b61f8:	7829      	ldrb	r1, [r5, #0]
   b61fa:	f3bf 8f5b 	dmb	ish
   b61fe:	f011 0401 	ands.w	r4, r1, #1
{
   b6202:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b6204:	d111      	bne.n	b622a <_Z19__fetch_global_Wirev+0x36>
   b6206:	4628      	mov	r0, r5
   b6208:	f7fe fc55 	bl	b4ab6 <__cxa_guard_acquire>
   b620c:	b168      	cbz	r0, b622a <_Z19__fetch_global_Wirev+0x36>
   b620e:	4668      	mov	r0, sp
   b6210:	f7ff ffd6 	bl	b61c0 <_Z17acquireWireBufferv>
   b6214:	466a      	mov	r2, sp
   b6216:	4621      	mov	r1, r4
   b6218:	4806      	ldr	r0, [pc, #24]	; (b6234 <_Z19__fetch_global_Wirev+0x40>)
   b621a:	f7ff fb17 	bl	b584c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b621e:	4628      	mov	r0, r5
   b6220:	f7fe fc4e 	bl	b4ac0 <__cxa_guard_release>
   b6224:	4804      	ldr	r0, [pc, #16]	; (b6238 <_Z19__fetch_global_Wirev+0x44>)
   b6226:	f000 f84b 	bl	b62c0 <atexit>
	return wire;
}
   b622a:	4802      	ldr	r0, [pc, #8]	; (b6234 <_Z19__fetch_global_Wirev+0x40>)
   b622c:	b007      	add	sp, #28
   b622e:	bd30      	pop	{r4, r5, pc}
   b6230:	2003e72c 	.word	0x2003e72c
   b6234:	2003e730 	.word	0x2003e730
   b6238:	000b61bd 	.word	0x000b61bd

000b623c <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b623c:	4770      	bx	lr
	...

000b6240 <_Z20acquireSerial1Bufferv>:
{
   b6240:	b538      	push	{r3, r4, r5, lr}
   b6242:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b6244:	2514      	movs	r5, #20
   b6246:	462a      	mov	r2, r5
   b6248:	2100      	movs	r1, #0
   b624a:	f000 f84d 	bl	b62e8 <memset>
   b624e:	8025      	strh	r5, [r4, #0]
   b6250:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6252:	4907      	ldr	r1, [pc, #28]	; (b6270 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b6254:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6256:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6258:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b625a:	f000 f82f 	bl	b62bc <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b625e:	4904      	ldr	r1, [pc, #16]	; (b6270 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6260:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6262:	4628      	mov	r0, r5
   b6264:	f000 f82a 	bl	b62bc <_ZnajRKSt9nothrow_t>
    };
   b6268:	60e0      	str	r0, [r4, #12]
}
   b626a:	4620      	mov	r0, r4
   b626c:	bd38      	pop	{r3, r4, r5, pc}
   b626e:	bf00      	nop
   b6270:	000b6ca0 	.word	0x000b6ca0

000b6274 <_Z22__fetch_global_Serial1v>:
{
   b6274:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6276:	4d0e      	ldr	r5, [pc, #56]	; (b62b0 <_Z22__fetch_global_Serial1v+0x3c>)
   b6278:	7829      	ldrb	r1, [r5, #0]
   b627a:	f3bf 8f5b 	dmb	ish
   b627e:	f011 0401 	ands.w	r4, r1, #1
{
   b6282:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6284:	d111      	bne.n	b62aa <_Z22__fetch_global_Serial1v+0x36>
   b6286:	4628      	mov	r0, r5
   b6288:	f7fe fc15 	bl	b4ab6 <__cxa_guard_acquire>
   b628c:	b168      	cbz	r0, b62aa <_Z22__fetch_global_Serial1v+0x36>
   b628e:	a801      	add	r0, sp, #4
   b6290:	f7ff ffd6 	bl	b6240 <_Z20acquireSerial1Bufferv>
   b6294:	aa01      	add	r2, sp, #4
   b6296:	4621      	mov	r1, r4
   b6298:	4806      	ldr	r0, [pc, #24]	; (b62b4 <_Z22__fetch_global_Serial1v+0x40>)
   b629a:	f7ff fe1d 	bl	b5ed8 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b629e:	4628      	mov	r0, r5
   b62a0:	f7fe fc0e 	bl	b4ac0 <__cxa_guard_release>
   b62a4:	4804      	ldr	r0, [pc, #16]	; (b62b8 <_Z22__fetch_global_Serial1v+0x44>)
   b62a6:	f000 f80b 	bl	b62c0 <atexit>
    return serial1;
}
   b62aa:	4802      	ldr	r0, [pc, #8]	; (b62b4 <_Z22__fetch_global_Serial1v+0x40>)
   b62ac:	b007      	add	sp, #28
   b62ae:	bd30      	pop	{r4, r5, pc}
   b62b0:	2003e744 	.word	0x2003e744
   b62b4:	2003e748 	.word	0x2003e748
   b62b8:	000b623d 	.word	0x000b623d

000b62bc <_ZnajRKSt9nothrow_t>:
   b62bc:	f7fe bbf7 	b.w	b4aae <_Znaj>

000b62c0 <atexit>:
   b62c0:	2300      	movs	r3, #0
   b62c2:	4601      	mov	r1, r0
   b62c4:	461a      	mov	r2, r3
   b62c6:	4618      	mov	r0, r3
   b62c8:	f000 b844 	b.w	b6354 <__register_exitproc>

000b62cc <memcpy>:
   b62cc:	440a      	add	r2, r1
   b62ce:	4291      	cmp	r1, r2
   b62d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b62d4:	d100      	bne.n	b62d8 <memcpy+0xc>
   b62d6:	4770      	bx	lr
   b62d8:	b510      	push	{r4, lr}
   b62da:	f811 4b01 	ldrb.w	r4, [r1], #1
   b62de:	f803 4f01 	strb.w	r4, [r3, #1]!
   b62e2:	4291      	cmp	r1, r2
   b62e4:	d1f9      	bne.n	b62da <memcpy+0xe>
   b62e6:	bd10      	pop	{r4, pc}

000b62e8 <memset>:
   b62e8:	4402      	add	r2, r0
   b62ea:	4603      	mov	r3, r0
   b62ec:	4293      	cmp	r3, r2
   b62ee:	d100      	bne.n	b62f2 <memset+0xa>
   b62f0:	4770      	bx	lr
   b62f2:	f803 1b01 	strb.w	r1, [r3], #1
   b62f6:	e7f9      	b.n	b62ec <memset+0x4>

000b62f8 <srand>:
   b62f8:	b538      	push	{r3, r4, r5, lr}
   b62fa:	4b10      	ldr	r3, [pc, #64]	; (b633c <srand+0x44>)
   b62fc:	681d      	ldr	r5, [r3, #0]
   b62fe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6300:	4604      	mov	r4, r0
   b6302:	b9b3      	cbnz	r3, b6332 <srand+0x3a>
   b6304:	2018      	movs	r0, #24
   b6306:	f7ff fa0b 	bl	b5720 <malloc>
   b630a:	4602      	mov	r2, r0
   b630c:	63a8      	str	r0, [r5, #56]	; 0x38
   b630e:	b920      	cbnz	r0, b631a <srand+0x22>
   b6310:	4b0b      	ldr	r3, [pc, #44]	; (b6340 <srand+0x48>)
   b6312:	480c      	ldr	r0, [pc, #48]	; (b6344 <srand+0x4c>)
   b6314:	2142      	movs	r1, #66	; 0x42
   b6316:	f7ff fa13 	bl	b5740 <__assert_func>
   b631a:	490b      	ldr	r1, [pc, #44]	; (b6348 <srand+0x50>)
   b631c:	4b0b      	ldr	r3, [pc, #44]	; (b634c <srand+0x54>)
   b631e:	e9c0 1300 	strd	r1, r3, [r0]
   b6322:	4b0b      	ldr	r3, [pc, #44]	; (b6350 <srand+0x58>)
   b6324:	6083      	str	r3, [r0, #8]
   b6326:	230b      	movs	r3, #11
   b6328:	8183      	strh	r3, [r0, #12]
   b632a:	2100      	movs	r1, #0
   b632c:	2001      	movs	r0, #1
   b632e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6332:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6334:	2200      	movs	r2, #0
   b6336:	611c      	str	r4, [r3, #16]
   b6338:	615a      	str	r2, [r3, #20]
   b633a:	bd38      	pop	{r3, r4, r5, pc}
   b633c:	2003e640 	.word	0x2003e640
   b6340:	000b6ca1 	.word	0x000b6ca1
   b6344:	000b6cb8 	.word	0x000b6cb8
   b6348:	abcd330e 	.word	0xabcd330e
   b634c:	e66d1234 	.word	0xe66d1234
   b6350:	0005deec 	.word	0x0005deec

000b6354 <__register_exitproc>:
   b6354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6358:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6414 <__register_exitproc+0xc0>
   b635c:	4606      	mov	r6, r0
   b635e:	f8d8 0000 	ldr.w	r0, [r8]
   b6362:	461f      	mov	r7, r3
   b6364:	460d      	mov	r5, r1
   b6366:	4691      	mov	r9, r2
   b6368:	f000 f856 	bl	b6418 <__retarget_lock_acquire_recursive>
   b636c:	4b25      	ldr	r3, [pc, #148]	; (b6404 <__register_exitproc+0xb0>)
   b636e:	681c      	ldr	r4, [r3, #0]
   b6370:	b934      	cbnz	r4, b6380 <__register_exitproc+0x2c>
   b6372:	4c25      	ldr	r4, [pc, #148]	; (b6408 <__register_exitproc+0xb4>)
   b6374:	601c      	str	r4, [r3, #0]
   b6376:	4b25      	ldr	r3, [pc, #148]	; (b640c <__register_exitproc+0xb8>)
   b6378:	b113      	cbz	r3, b6380 <__register_exitproc+0x2c>
   b637a:	681b      	ldr	r3, [r3, #0]
   b637c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6380:	6863      	ldr	r3, [r4, #4]
   b6382:	2b1f      	cmp	r3, #31
   b6384:	dd07      	ble.n	b6396 <__register_exitproc+0x42>
   b6386:	f8d8 0000 	ldr.w	r0, [r8]
   b638a:	f000 f847 	bl	b641c <__retarget_lock_release_recursive>
   b638e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6396:	b34e      	cbz	r6, b63ec <__register_exitproc+0x98>
   b6398:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b639c:	b988      	cbnz	r0, b63c2 <__register_exitproc+0x6e>
   b639e:	4b1c      	ldr	r3, [pc, #112]	; (b6410 <__register_exitproc+0xbc>)
   b63a0:	b923      	cbnz	r3, b63ac <__register_exitproc+0x58>
   b63a2:	f8d8 0000 	ldr.w	r0, [r8]
   b63a6:	f000 f838 	bl	b641a <__retarget_lock_release>
   b63aa:	e7f0      	b.n	b638e <__register_exitproc+0x3a>
   b63ac:	f44f 7084 	mov.w	r0, #264	; 0x108
   b63b0:	f7ff f9b6 	bl	b5720 <malloc>
   b63b4:	2800      	cmp	r0, #0
   b63b6:	d0f4      	beq.n	b63a2 <__register_exitproc+0x4e>
   b63b8:	2300      	movs	r3, #0
   b63ba:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b63be:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b63c2:	6863      	ldr	r3, [r4, #4]
   b63c4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b63c8:	2201      	movs	r2, #1
   b63ca:	409a      	lsls	r2, r3
   b63cc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b63d0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b63d4:	4313      	orrs	r3, r2
   b63d6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b63da:	2e02      	cmp	r6, #2
   b63dc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b63e0:	bf02      	ittt	eq
   b63e2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b63e6:	4313      	orreq	r3, r2
   b63e8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b63ec:	6863      	ldr	r3, [r4, #4]
   b63ee:	f8d8 0000 	ldr.w	r0, [r8]
   b63f2:	1c5a      	adds	r2, r3, #1
   b63f4:	3302      	adds	r3, #2
   b63f6:	6062      	str	r2, [r4, #4]
   b63f8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b63fc:	f000 f80e 	bl	b641c <__retarget_lock_release_recursive>
   b6400:	2000      	movs	r0, #0
   b6402:	e7c6      	b.n	b6392 <__register_exitproc+0x3e>
   b6404:	2003e7e8 	.word	0x2003e7e8
   b6408:	2003e75c 	.word	0x2003e75c
   b640c:	00000000 	.word	0x00000000
   b6410:	000b5721 	.word	0x000b5721
   b6414:	2003e6a4 	.word	0x2003e6a4

000b6418 <__retarget_lock_acquire_recursive>:
   b6418:	4770      	bx	lr

000b641a <__retarget_lock_release>:
   b641a:	4770      	bx	lr

000b641c <__retarget_lock_release_recursive>:
   b641c:	4770      	bx	lr

000b641e <link_code_end>:
	...

000b6420 <dynalib_user>:
   b6420:	4a39 000b 4a75 000b 4a9d 000b 4aa1 000b     9J..uJ...J...J..
   b6430:	0000 0000 4341 3353 3837 3030 4520 6178     ....ACS37800 Exa
   b6440:	706d 656c 4100 5343 3733 3038 2030 6f6e     mple.ACS37800 no
   b6450:	2074 6564 6574 7463 6465 202e 6843 6365     t detected. Chec
   b6460:	206b 6f63 6e6e 6365 6974 6e6f 2073 6e61     k connections an
   b6470:	2064 3249 2043 6461 7264 7365 2e73 4620     d I2C address. F
   b6480:	6572 7a65 6e69 2e67 2e2e 5600 6c6f 7374     reezing....Volts
   b6490:	203a 2000 6d41 7370 203a 5000 776f 7265     : . Amps: .Power
   b64a0:	203a 6341 6974 6576 2820 2957 203a 2000     : Active (W): . 
   b64b0:	6552 6361 6974 6576 2820 4156 2952 203a     Reactive (VAR): 
   b64c0:	5000 776f 7265 203a 7041 6170 6572 746e     .Power: Apparent
   b64d0:	2820 4156 3a29 0020 5020 776f 7265 4620      (VA): . Power F
   b64e0:	6361 6f74 3a72 0020 4c20 6761 6967 676e     actor: . Lagging
   b64f0:	2000 654c 6461 6e69 0067 4320 6e6f 7573     . Leading. Consu
   b6500:	656d 0064 4720 6e65 7265 7461 6465 7200     med. Generated.r
   b6510:	6165 5264 6765 7369 6574 3a72 6520 646e     eadRegister: end
   b6520:	7254 6e61 6d73 7369 6973 6e6f 7220 7465     Transmission ret
   b6530:	7275 656e 3a64 0020 6572 6461 6552 6967     urned: .readRegi
   b6540:	7473 7265 203a 6572 7571 7365 4674 6f72     ster: requestFro
   b6550:	206d 6572 7574 6e72 6465 203a 7700 6972     m returned: .wri
   b6560:	6574 6552 6967 7473 7265 203a 6e65 5464     teRegister: endT
   b6570:	6172 736e 696d 7373 6f69 206e 6572 7574     ransmission retu
   b6580:	6e72 6465 203a 7300 7465 7942 6170 7373     rned: .setBypass
   b6590:	654e 616e 6c62 3a65 7720 6972 6574 6552     Nenable: writeRe
   b65a0:	6967 7473 7265 2820 4632 2029 6572 7574     gister (2F) retu
   b65b0:	6e72 6465 203a 7300 7465 7942 6170 7373     rned: .setBypass
   b65c0:	654e 616e 6c62 3a65 7220 6165 5264 6765     Nenable: readReg
   b65d0:	7369 6574 2072 3128 2946 7220 7465 7275     ister (1F) retur
   b65e0:	656e 3a64 0020 6573 4274 7079 7361 4e73     ned: .setBypassN
   b65f0:	6e65 6261 656c 203a 7962 6170 7373 6e5f     enable: bypass_n
   b6600:	655f 206e 7369 6320 7275 6572 746e 796c     _en is currently
   b6610:	203a 7300 7465 7942 6170 7373 654e 616e     : .setBypassNena
   b6620:	6c62 3a65 7720 6972 6574 6552 6967 7473     ble: writeRegist
   b6630:	7265 2820 4631 2029 6572 7574 6e72 6465     er (1F) returned
   b6640:	203a 7300 7465 7942 6170 7373 654e 616e     : .setBypassNena
   b6650:	6c62 3a65 7220 6165 5264 6765 7369 6574     ble: readRegiste
   b6660:	2072 3028 2946 7220 7465 7275 656e 3a64     r (0F) returned:
   b6670:	0020 6573 4274 7079 7361 4e73 6e65 6261      .setBypassNenab
   b6680:	656c 203a 6565 7270 6d6f 6220 7079 7361     le: eeprom bypas
   b6690:	5f73 5f6e 6e65 6920 2073 7563 7272 6e65     s_n_en is curren
   b66a0:	6c74 3a79 0020 6573 4274 7079 7361 4e73     tly: .setBypassN
   b66b0:	6e65 6261 656c 203a 7277 7469 5265 6765     enable: writeReg
   b66c0:	7369 6574 2072 3028 2946 7220 7465 7275     ister (0F) retur
   b66d0:	656e 3a64 0020 6567 4374 7275 6572 746e     ned: .getCurrent
   b66e0:	6f43 7261 6573 6147 6e69 203a 6572 6461     CoarseGain: read
   b66f0:	6552 6967 7473 7265 2820 4231 2029 6572     Register (1B) re
   b6700:	7574 6e72 6465 203a 6700 7465 7543 7272     turned: .getCurr
   b6710:	6e65 4374 616f 7372 4765 6961 3a6e 7320     entCoarseGain: s
   b6720:	6168 6f64 2077 6167 6e69 7320 7465 6974     hadow gain setti
   b6730:	676e 6920 2073 7563 7272 6e65 6c74 3a79     ng is currently:
   b6740:	0020 4341 3353 3837 3030 3a3a 6562 6967      .ACS37800::begi
   b6750:	3a6e 6620 6961 656c 2164 6720 7465 7543     n: failed! getCu
   b6760:	7272 6e65 4374 616f 7372 4765 6961 206e     rrentCoarseGain 
   b6770:	6572 7574 6e72 6465 203a 4100 5343 3733     returned: .ACS37
   b6780:	3038 3a30 623a 6765 6e69 203a 7573 6363     800::begin: succ
   b6790:	7365 2173 5f20 7563 7272 6e65 4374 616f     ess! _currentCoa
   b67a0:	7372 4765 6961 206e 7369 203a 7200 6165     rseGain is: .rea
   b67b0:	5264 534d 203a 6572 6461 6552 6967 7473     dRMS: readRegist
   b67c0:	7265 2820 3032 2029 6572 7574 6e72 6465     er (20) returned
   b67d0:	203a 7200 6165 5264 534d 203a 7276 736d     : .readRMS: vrms
   b67e0:	203a 7830 7200 6165 5264 534d 203a 6f76     : 0x.readRMS: vo
   b67f0:	746c 2073 4c28 4253 202c 6562 6f66 6572     lts (LSB, before
   b6800:	6320 726f 6572 7463 6f69 296e 6920 2073      correction) is 
   b6810:	7200 6165 5264 534d 203a 6f76 746c 2073     .readRMS: volts 
   b6820:	5628 202c 6661 6574 2072 6f63 7272 6365     (V, after correc
   b6830:	6974 6e6f 2029 7369 0020 6572 6461 4d52     tion) is .readRM
   b6840:	3a53 6920 6d72 3a73 3020 0078 6572 6461     S: irms: 0x.read
   b6850:	4d52 3a53 6120 706d 2073 4c28 4253 202c     RMS: amps (LSB, 
   b6860:	6562 6f66 6572 6320 726f 6572 7463 6f69     before correctio
   b6870:	296e 6920 2073 7200 6165 5264 534d 203a     n) is .readRMS: 
   b6880:	6d61 7370 2820 2c41 6120 7466 7265 6320     amps (A, after c
   b6890:	726f 6572 7463 6f69 296e 6920 2073 7200     orrection) is .r
   b68a0:	6165 5064 776f 7265 6341 6974 6576 6552     eadPowerActiveRe
   b68b0:	6361 6974 6576 203a 6572 6461 6552 6967     active: readRegi
   b68c0:	7473 7265 2820 3132 2029 6572 7574 6e72     ster (21) return
   b68d0:	6465 203a 7200 6165 5064 776f 7265 6341     ed: .readPowerAc
   b68e0:	6974 6576 6552 6361 6974 6576 203a 6170     tiveReactive: pa
   b68f0:	7463 7669 3a65 3020 0078 6572 6461 6f50     ctive: 0x.readPo
   b6900:	6577 4172 7463 7669 5265 6165 7463 7669     werActiveReactiv
   b6910:	3a65 7020 6361 6974 6576 2820 534c 2c42     e: pactive (LSB,
   b6920:	6220 6665 726f 2065 6f63 7272 6365 6974      before correcti
   b6930:	6e6f 2029 7369 0020 6572 6461 6f50 6577     on) is .readPowe
   b6940:	4172 7463 7669 5265 6165 7463 7669 3a65     rActiveReactive:
   b6950:	7020 6361 6974 6576 2820 2c57 6120 7466      pactive (W, aft
   b6960:	7265 6320 726f 6572 7463 6f69 296e 6920     er correction) i
   b6970:	2073 7200 6165 5064 776f 7265 6341 6974     s .readPowerActi
   b6980:	6576 6552 6361 6974 6576 203a 6970 616d     veReactive: pima
   b6990:	3a67 3020 0078 6572 6461 6f50 6577 4172     g: 0x.readPowerA
   b69a0:	7463 7669 5265 6165 7463 7669 3a65 7020     ctiveReactive: p
   b69b0:	6d69 6761 2820 534c 2c42 6220 6665 726f     imag (LSB, befor
   b69c0:	2065 6f63 7272 6365 6974 6e6f 2029 7369     e correction) is
   b69d0:	0020 6572 6461 6f50 6577 4172 7463 7669      .readPowerActiv
   b69e0:	5265 6165 7463 7669 3a65 7020 6d69 6761     eReactive: pimag
   b69f0:	2820 4156 2c52 6120 7466 7265 6320 726f      (VAR, after cor
   b6a00:	6572 7463 6f69 296e 6920 2073 7200 6165     rection) is .rea
   b6a10:	5064 776f 7265 6146 7463 726f 203a 6572     dPowerFactor: re
   b6a20:	6461 6552 6967 7473 7265 2820 3232 2029     adRegister (22) 
   b6a30:	6572 7574 6e72 6465 203a 7200 6165 5064     returned: .readP
   b6a40:	776f 7265 6146 7463 726f 203a 6170 7070     owerFactor: papp
   b6a50:	7261 6e65 3a74 3020 0078 6572 6461 6f50     arent: 0x.readPo
   b6a60:	6577 4672 6361 6f74 3a72 7020 7061 6170     werFactor: pappa
   b6a70:	6572 746e 2820 534c 2c42 6220 6665 726f     rent (LSB, befor
   b6a80:	2065 6f63 7272 6365 6974 6e6f 2029 7369     e correction) is
   b6a90:	0020 6572 6461 6f50 6577 4672 6361 6f74      .readPowerFacto
   b6aa0:	3a72 7020 7061 6170 6572 746e 2820 4156     r: papparent (VA
   b6ab0:	202c 6661 6574 2072 6f63 7272 6365 6974     , after correcti
   b6ac0:	6e6f 2029 7369 0020 6572 6461 6f50 6577     on) is .readPowe
   b6ad0:	4672 6361 6f74 3a72 7020 6166 7463 726f     rFactor: pfactor
   b6ae0:	203a 7830 7200 6165 5064 776f 7265 6146     : 0x.readPowerFa
   b6af0:	7463 726f 203a 6670 6361 6f74 2072 7369     ctor: pfactor is
   b6b00:	0020 0000                                    ...

000b6b04 <_ZL22ACS37800_CRS_SNS_GAINS>:
   b6b04:	0000 3f80 0000 4000 0000 4040 0000 4060     ...?...@..@@..`@
   b6b14:	0000 4080 0000 4090 0000 40b0 0000 4100     ...@...@...@...A

000b6b24 <_ZTVN5spark13EthernetClassE>:
	...
   b6b2c:	57d7 000b 57cd 000b 57c3 000b 57b9 000b     .W...W...W...W..
   b6b3c:	57ad 000b 57a1 000b 5a45 000b 5a4d 000b     .W...W..EZ..MZ..
   b6b4c:	5795 000b 578d 000b 5783 000b 5779 000b     .W...W...W..yW..
   b6b5c:	5a7d 000b                                   }Z..

000b6b60 <_ZTV7TwoWire>:
	...
   b6b68:	57f5 000b 583f 000b 5817 000b 57f7 000b     .W..?X...X...W..
   b6b78:	581f 000b 5827 000b 582f 000b 5837 000b     .X..'X../X..7X..

000b6b88 <_ZTV9IPAddress>:
	...
   b6b90:	5913 000b 5903 000b 5905 000b 7061 0070     .Y...Y...Y..app.

000b6ba0 <_ZTVN5spark12NetworkClassE>:
	...
   b6ba8:	5a05 000b 5a0f 000b 5a19 000b 5a23 000b     .Z...Z...Z..#Z..
   b6bb8:	5a2d 000b 5a39 000b 5a45 000b 5a4d 000b     -Z..9Z..EZ..MZ..
   b6bc8:	5a55 000b 5a61 000b 5a69 000b 5a73 000b     UZ..aZ..iZ..sZ..
   b6bd8:	5a7d 000b 616e 006e 6e69 0066 766f 0066     }Z..nan.inf.ovf.
   b6be8:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b6bf8:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b6c04 <_ZTV11USARTSerial>:
	...
   b6c0c:	5e5d 000b 5ec9 000b 5ea1 000b 5b69 000b     ]^...^...^..i[..
   b6c1c:	5e71 000b 5e8d 000b 5e7f 000b 5e9b 000b     q^...^...^...^..
   b6c2c:	5e5f 000b 5e63 000b                         _^..c^..

000b6c34 <_ZTV9USBSerial>:
	...
   b6c3c:	5f07 000b 5f6f 000b 5f45 000b 5b69 000b     ._..o_..E_..i[..
   b6c4c:	5f37 000b 5f09 000b 5f19 000b 5f69 000b     7_..._..._..i_..
   b6c5c:	5f29 000b 5f01 000b                         )_..._..

000b6c64 <_ZTVN5spark9WiFiClassE>:
	...
   b6c6c:	6067 000b 605d 000b 6053 000b 6009 000b     g`..]`..S`...`..
   b6c7c:	6047 000b 603b 000b 5a45 000b 5a4d 000b     G`..;`..EZ..MZ..
   b6c8c:	602f 000b 6027 000b 601d 000b 6013 000b     /`..'`...`...`..
   b6c9c:	5a7d 000b                                   }Z..

000b6ca0 <_ZSt7nothrow>:
   b6ca0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6cb0:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b6cc0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b6cd0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b6ce0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b6cf0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b6d00:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b6d11 <link_const_data_end>:
   b6d11:	00          	.byte	0x00
	...

000b6d14 <link_constructors_location>:
   b6d14:	000b4c69 	.word	0x000b4c69
   b6d18:	000b5769 	.word	0x000b5769
   b6d1c:	000b57e1 	.word	0x000b57e1
   b6d20:	000b59f5 	.word	0x000b59f5
   b6d24:	000b5b55 	.word	0x000b5b55
   b6d28:	000b5e19 	.word	0x000b5e19
   b6d2c:	000b5e25 	.word	0x000b5e25
   b6d30:	000b5e49 	.word	0x000b5e49
   b6d34:	000b6071 	.word	0x000b6071

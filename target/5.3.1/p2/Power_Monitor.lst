
/Users/friedl/Desktop/Projects/Power_Monitor/target/5.3.1/p2/Power_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085f8000  085f8000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085f8018  085f8018  00008018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .dynalib      00000008  023f8820  085f8088  00008820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .psram_text   000077d0  023f8828  085f8090  00008828  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  4 .data_alt     00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  5 .bss_alt      00000000  023ffff8  023ffff8  00020000  2**0
                  CONTENTS
  6 .data         00000078  1007ad5c  085ff860  0001ad5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000214  1007add4  1007add4  0002add4  2**2
                  ALLOC
  8 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
  9 .backup       00000004  1007b400  085ff8d8  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .module_info_suffix_align 000006dc  085ff8dc  085ff8dc  0001f8dc  2**0
                  ALLOC
 11 .module_info_product 00000006  085fffb8  085fffb8  0001f8dc  2**0
                  ALLOC
 12 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .debug_info   00130e05  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0001463c  00000000  00000000  00150e05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    0004145e  00000000  00000000  00165441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002e18  00000000  00000000  001a689f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 0000af58  00000000  00000000  001a96b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00029e77  00000000  00000000  001b460f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000484c5  00000000  00000000  001de486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000c8f42  00000000  00000000  0022694b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000883c  00000000  00000000  002ef890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085f8018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f8018:	480e      	ldr	r0, [pc, #56]	; (85f8054 <module_user_pre_init+0x3c>)
 85f801a:	490f      	ldr	r1, [pc, #60]	; (85f8058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85f801c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85f801e:	4288      	cmp	r0, r1
 85f8020:	d005      	beq.n	85f802e <module_user_pre_init+0x16>
 85f8022:	4a0e      	ldr	r2, [pc, #56]	; (85f805c <module_user_pre_init+0x44>)
 85f8024:	4282      	cmp	r2, r0
 85f8026:	d002      	beq.n	85f802e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85f8028:	4b0d      	ldr	r3, [pc, #52]	; (85f8060 <module_user_pre_init+0x48>)
 85f802a:	1a12      	subs	r2, r2, r0
 85f802c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85f802e:	480d      	ldr	r0, [pc, #52]	; (85f8064 <module_user_pre_init+0x4c>)
 85f8030:	4a0d      	ldr	r2, [pc, #52]	; (85f8068 <module_user_pre_init+0x50>)
 85f8032:	2100      	movs	r1, #0
 85f8034:	4b0d      	ldr	r3, [pc, #52]	; (85f806c <module_user_pre_init+0x54>)
 85f8036:	1a12      	subs	r2, r2, r0
 85f8038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85f803a:	480d      	ldr	r0, [pc, #52]	; (85f8070 <module_user_pre_init+0x58>)
 85f803c:	490d      	ldr	r1, [pc, #52]	; (85f8074 <module_user_pre_init+0x5c>)
 85f803e:	4288      	cmp	r0, r1
 85f8040:	d005      	beq.n	85f804e <module_user_pre_init+0x36>
 85f8042:	4a0d      	ldr	r2, [pc, #52]	; (85f8078 <module_user_pre_init+0x60>)
 85f8044:	4282      	cmp	r2, r0
 85f8046:	d002      	beq.n	85f804e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85f8048:	4b05      	ldr	r3, [pc, #20]	; (85f8060 <module_user_pre_init+0x48>)
 85f804a:	1a12      	subs	r2, r2, r0
 85f804c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85f804e:	4801      	ldr	r0, [pc, #4]	; (85f8054 <module_user_pre_init+0x3c>)
 85f8050:	bd08      	pop	{r3, pc}
 85f8052:	bf00      	nop
 85f8054:	1007ad5c 	.word	0x1007ad5c
 85f8058:	085ff860 	.word	0x085ff860
 85f805c:	1007add4 	.word	0x1007add4
 85f8060:	10110d2d 	.word	0x10110d2d
 85f8064:	1007add4 	.word	0x1007add4
 85f8068:	1007afe8 	.word	0x1007afe8
 85f806c:	10110ea1 	.word	0x10110ea1
 85f8070:	023f8820 	.word	0x023f8820
 85f8074:	085f8088 	.word	0x085f8088
 85f8078:	023ffff8 	.word	0x023ffff8

085f807c <dynalib_preinit>:
 85f807c:	085f8019 00000000                       .._.....

Disassembly of section .psram_text:

023f8828 <__aeabi_drsub>:
 23f8828:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23f882c:	e002      	b.n	23f8834 <__adddf3>
 23f882e:	bf00      	nop

023f8830 <__aeabi_dsub>:
 23f8830:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023f8834 <__adddf3>:
 23f8834:	b530      	push	{r4, r5, lr}
 23f8836:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23f883a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23f883e:	ea94 0f05 	teq	r4, r5
 23f8842:	bf08      	it	eq
 23f8844:	ea90 0f02 	teqeq	r0, r2
 23f8848:	bf1f      	itttt	ne
 23f884a:	ea54 0c00 	orrsne.w	ip, r4, r0
 23f884e:	ea55 0c02 	orrsne.w	ip, r5, r2
 23f8852:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23f8856:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f885a:	f000 80e2 	beq.w	23f8a22 <__adddf3+0x1ee>
 23f885e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23f8862:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23f8866:	bfb8      	it	lt
 23f8868:	426d      	neglt	r5, r5
 23f886a:	dd0c      	ble.n	23f8886 <__adddf3+0x52>
 23f886c:	442c      	add	r4, r5
 23f886e:	ea80 0202 	eor.w	r2, r0, r2
 23f8872:	ea81 0303 	eor.w	r3, r1, r3
 23f8876:	ea82 0000 	eor.w	r0, r2, r0
 23f887a:	ea83 0101 	eor.w	r1, r3, r1
 23f887e:	ea80 0202 	eor.w	r2, r0, r2
 23f8882:	ea81 0303 	eor.w	r3, r1, r3
 23f8886:	2d36      	cmp	r5, #54	; 0x36
 23f8888:	bf88      	it	hi
 23f888a:	bd30      	pophi	{r4, r5, pc}
 23f888c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23f8890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f8894:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23f8898:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23f889c:	d002      	beq.n	23f88a4 <__adddf3+0x70>
 23f889e:	4240      	negs	r0, r0
 23f88a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f88a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23f88a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f88ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23f88b0:	d002      	beq.n	23f88b8 <__adddf3+0x84>
 23f88b2:	4252      	negs	r2, r2
 23f88b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23f88b8:	ea94 0f05 	teq	r4, r5
 23f88bc:	f000 80a7 	beq.w	23f8a0e <__adddf3+0x1da>
 23f88c0:	f1a4 0401 	sub.w	r4, r4, #1
 23f88c4:	f1d5 0e20 	rsbs	lr, r5, #32
 23f88c8:	db0d      	blt.n	23f88e6 <__adddf3+0xb2>
 23f88ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 23f88ce:	fa22 f205 	lsr.w	r2, r2, r5
 23f88d2:	1880      	adds	r0, r0, r2
 23f88d4:	f141 0100 	adc.w	r1, r1, #0
 23f88d8:	fa03 f20e 	lsl.w	r2, r3, lr
 23f88dc:	1880      	adds	r0, r0, r2
 23f88de:	fa43 f305 	asr.w	r3, r3, r5
 23f88e2:	4159      	adcs	r1, r3
 23f88e4:	e00e      	b.n	23f8904 <__adddf3+0xd0>
 23f88e6:	f1a5 0520 	sub.w	r5, r5, #32
 23f88ea:	f10e 0e20 	add.w	lr, lr, #32
 23f88ee:	2a01      	cmp	r2, #1
 23f88f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 23f88f4:	bf28      	it	cs
 23f88f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 23f88fa:	fa43 f305 	asr.w	r3, r3, r5
 23f88fe:	18c0      	adds	r0, r0, r3
 23f8900:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23f8904:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f8908:	d507      	bpl.n	23f891a <__adddf3+0xe6>
 23f890a:	f04f 0e00 	mov.w	lr, #0
 23f890e:	f1dc 0c00 	rsbs	ip, ip, #0
 23f8912:	eb7e 0000 	sbcs.w	r0, lr, r0
 23f8916:	eb6e 0101 	sbc.w	r1, lr, r1
 23f891a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23f891e:	d31b      	bcc.n	23f8958 <__adddf3+0x124>
 23f8920:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23f8924:	d30c      	bcc.n	23f8940 <__adddf3+0x10c>
 23f8926:	0849      	lsrs	r1, r1, #1
 23f8928:	ea5f 0030 	movs.w	r0, r0, rrx
 23f892c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23f8930:	f104 0401 	add.w	r4, r4, #1
 23f8934:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23f8938:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23f893c:	f080 809a 	bcs.w	23f8a74 <__adddf3+0x240>
 23f8940:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23f8944:	bf08      	it	eq
 23f8946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f894a:	f150 0000 	adcs.w	r0, r0, #0
 23f894e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f8952:	ea41 0105 	orr.w	r1, r1, r5
 23f8956:	bd30      	pop	{r4, r5, pc}
 23f8958:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23f895c:	4140      	adcs	r0, r0
 23f895e:	eb41 0101 	adc.w	r1, r1, r1
 23f8962:	3c01      	subs	r4, #1
 23f8964:	bf28      	it	cs
 23f8966:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23f896a:	d2e9      	bcs.n	23f8940 <__adddf3+0x10c>
 23f896c:	f091 0f00 	teq	r1, #0
 23f8970:	bf04      	itt	eq
 23f8972:	4601      	moveq	r1, r0
 23f8974:	2000      	moveq	r0, #0
 23f8976:	fab1 f381 	clz	r3, r1
 23f897a:	bf08      	it	eq
 23f897c:	3320      	addeq	r3, #32
 23f897e:	f1a3 030b 	sub.w	r3, r3, #11
 23f8982:	f1b3 0220 	subs.w	r2, r3, #32
 23f8986:	da0c      	bge.n	23f89a2 <__adddf3+0x16e>
 23f8988:	320c      	adds	r2, #12
 23f898a:	dd08      	ble.n	23f899e <__adddf3+0x16a>
 23f898c:	f102 0c14 	add.w	ip, r2, #20
 23f8990:	f1c2 020c 	rsb	r2, r2, #12
 23f8994:	fa01 f00c 	lsl.w	r0, r1, ip
 23f8998:	fa21 f102 	lsr.w	r1, r1, r2
 23f899c:	e00c      	b.n	23f89b8 <__adddf3+0x184>
 23f899e:	f102 0214 	add.w	r2, r2, #20
 23f89a2:	bfd8      	it	le
 23f89a4:	f1c2 0c20 	rsble	ip, r2, #32
 23f89a8:	fa01 f102 	lsl.w	r1, r1, r2
 23f89ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 23f89b0:	bfdc      	itt	le
 23f89b2:	ea41 010c 	orrle.w	r1, r1, ip
 23f89b6:	4090      	lslle	r0, r2
 23f89b8:	1ae4      	subs	r4, r4, r3
 23f89ba:	bfa2      	ittt	ge
 23f89bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23f89c0:	4329      	orrge	r1, r5
 23f89c2:	bd30      	popge	{r4, r5, pc}
 23f89c4:	ea6f 0404 	mvn.w	r4, r4
 23f89c8:	3c1f      	subs	r4, #31
 23f89ca:	da1c      	bge.n	23f8a06 <__adddf3+0x1d2>
 23f89cc:	340c      	adds	r4, #12
 23f89ce:	dc0e      	bgt.n	23f89ee <__adddf3+0x1ba>
 23f89d0:	f104 0414 	add.w	r4, r4, #20
 23f89d4:	f1c4 0220 	rsb	r2, r4, #32
 23f89d8:	fa20 f004 	lsr.w	r0, r0, r4
 23f89dc:	fa01 f302 	lsl.w	r3, r1, r2
 23f89e0:	ea40 0003 	orr.w	r0, r0, r3
 23f89e4:	fa21 f304 	lsr.w	r3, r1, r4
 23f89e8:	ea45 0103 	orr.w	r1, r5, r3
 23f89ec:	bd30      	pop	{r4, r5, pc}
 23f89ee:	f1c4 040c 	rsb	r4, r4, #12
 23f89f2:	f1c4 0220 	rsb	r2, r4, #32
 23f89f6:	fa20 f002 	lsr.w	r0, r0, r2
 23f89fa:	fa01 f304 	lsl.w	r3, r1, r4
 23f89fe:	ea40 0003 	orr.w	r0, r0, r3
 23f8a02:	4629      	mov	r1, r5
 23f8a04:	bd30      	pop	{r4, r5, pc}
 23f8a06:	fa21 f004 	lsr.w	r0, r1, r4
 23f8a0a:	4629      	mov	r1, r5
 23f8a0c:	bd30      	pop	{r4, r5, pc}
 23f8a0e:	f094 0f00 	teq	r4, #0
 23f8a12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23f8a16:	bf06      	itte	eq
 23f8a18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23f8a1c:	3401      	addeq	r4, #1
 23f8a1e:	3d01      	subne	r5, #1
 23f8a20:	e74e      	b.n	23f88c0 <__adddf3+0x8c>
 23f8a22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f8a26:	bf18      	it	ne
 23f8a28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23f8a2c:	d029      	beq.n	23f8a82 <__adddf3+0x24e>
 23f8a2e:	ea94 0f05 	teq	r4, r5
 23f8a32:	bf08      	it	eq
 23f8a34:	ea90 0f02 	teqeq	r0, r2
 23f8a38:	d005      	beq.n	23f8a46 <__adddf3+0x212>
 23f8a3a:	ea54 0c00 	orrs.w	ip, r4, r0
 23f8a3e:	bf04      	itt	eq
 23f8a40:	4619      	moveq	r1, r3
 23f8a42:	4610      	moveq	r0, r2
 23f8a44:	bd30      	pop	{r4, r5, pc}
 23f8a46:	ea91 0f03 	teq	r1, r3
 23f8a4a:	bf1e      	ittt	ne
 23f8a4c:	2100      	movne	r1, #0
 23f8a4e:	2000      	movne	r0, #0
 23f8a50:	bd30      	popne	{r4, r5, pc}
 23f8a52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23f8a56:	d105      	bne.n	23f8a64 <__adddf3+0x230>
 23f8a58:	0040      	lsls	r0, r0, #1
 23f8a5a:	4149      	adcs	r1, r1
 23f8a5c:	bf28      	it	cs
 23f8a5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23f8a62:	bd30      	pop	{r4, r5, pc}
 23f8a64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23f8a68:	bf3c      	itt	cc
 23f8a6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23f8a6e:	bd30      	popcc	{r4, r5, pc}
 23f8a70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f8a74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23f8a78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f8a7c:	f04f 0000 	mov.w	r0, #0
 23f8a80:	bd30      	pop	{r4, r5, pc}
 23f8a82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23f8a86:	bf1a      	itte	ne
 23f8a88:	4619      	movne	r1, r3
 23f8a8a:	4610      	movne	r0, r2
 23f8a8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23f8a90:	bf1c      	itt	ne
 23f8a92:	460b      	movne	r3, r1
 23f8a94:	4602      	movne	r2, r0
 23f8a96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f8a9a:	bf06      	itte	eq
 23f8a9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23f8aa0:	ea91 0f03 	teqeq	r1, r3
 23f8aa4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23f8aa8:	bd30      	pop	{r4, r5, pc}
 23f8aaa:	bf00      	nop

023f8aac <__aeabi_ui2d>:
 23f8aac:	f090 0f00 	teq	r0, #0
 23f8ab0:	bf04      	itt	eq
 23f8ab2:	2100      	moveq	r1, #0
 23f8ab4:	4770      	bxeq	lr
 23f8ab6:	b530      	push	{r4, r5, lr}
 23f8ab8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f8abc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f8ac0:	f04f 0500 	mov.w	r5, #0
 23f8ac4:	f04f 0100 	mov.w	r1, #0
 23f8ac8:	e750      	b.n	23f896c <__adddf3+0x138>
 23f8aca:	bf00      	nop

023f8acc <__aeabi_i2d>:
 23f8acc:	f090 0f00 	teq	r0, #0
 23f8ad0:	bf04      	itt	eq
 23f8ad2:	2100      	moveq	r1, #0
 23f8ad4:	4770      	bxeq	lr
 23f8ad6:	b530      	push	{r4, r5, lr}
 23f8ad8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f8adc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f8ae0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23f8ae4:	bf48      	it	mi
 23f8ae6:	4240      	negmi	r0, r0
 23f8ae8:	f04f 0100 	mov.w	r1, #0
 23f8aec:	e73e      	b.n	23f896c <__adddf3+0x138>
 23f8aee:	bf00      	nop

023f8af0 <__aeabi_f2d>:
 23f8af0:	0042      	lsls	r2, r0, #1
 23f8af2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23f8af6:	ea4f 0131 	mov.w	r1, r1, rrx
 23f8afa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23f8afe:	bf1f      	itttt	ne
 23f8b00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23f8b04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23f8b08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23f8b0c:	4770      	bxne	lr
 23f8b0e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23f8b12:	bf08      	it	eq
 23f8b14:	4770      	bxeq	lr
 23f8b16:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23f8b1a:	bf04      	itt	eq
 23f8b1c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23f8b20:	4770      	bxeq	lr
 23f8b22:	b530      	push	{r4, r5, lr}
 23f8b24:	f44f 7460 	mov.w	r4, #896	; 0x380
 23f8b28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23f8b2c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f8b30:	e71c      	b.n	23f896c <__adddf3+0x138>
 23f8b32:	bf00      	nop

023f8b34 <__aeabi_ul2d>:
 23f8b34:	ea50 0201 	orrs.w	r2, r0, r1
 23f8b38:	bf08      	it	eq
 23f8b3a:	4770      	bxeq	lr
 23f8b3c:	b530      	push	{r4, r5, lr}
 23f8b3e:	f04f 0500 	mov.w	r5, #0
 23f8b42:	e00a      	b.n	23f8b5a <__aeabi_l2d+0x16>

023f8b44 <__aeabi_l2d>:
 23f8b44:	ea50 0201 	orrs.w	r2, r0, r1
 23f8b48:	bf08      	it	eq
 23f8b4a:	4770      	bxeq	lr
 23f8b4c:	b530      	push	{r4, r5, lr}
 23f8b4e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23f8b52:	d502      	bpl.n	23f8b5a <__aeabi_l2d+0x16>
 23f8b54:	4240      	negs	r0, r0
 23f8b56:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23f8b5a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23f8b5e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23f8b62:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23f8b66:	f43f aed8 	beq.w	23f891a <__adddf3+0xe6>
 23f8b6a:	f04f 0203 	mov.w	r2, #3
 23f8b6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f8b72:	bf18      	it	ne
 23f8b74:	3203      	addne	r2, #3
 23f8b76:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23f8b7a:	bf18      	it	ne
 23f8b7c:	3203      	addne	r2, #3
 23f8b7e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23f8b82:	f1c2 0320 	rsb	r3, r2, #32
 23f8b86:	fa00 fc03 	lsl.w	ip, r0, r3
 23f8b8a:	fa20 f002 	lsr.w	r0, r0, r2
 23f8b8e:	fa01 fe03 	lsl.w	lr, r1, r3
 23f8b92:	ea40 000e 	orr.w	r0, r0, lr
 23f8b96:	fa21 f102 	lsr.w	r1, r1, r2
 23f8b9a:	4414      	add	r4, r2
 23f8b9c:	e6bd      	b.n	23f891a <__adddf3+0xe6>
 23f8b9e:	bf00      	nop

023f8ba0 <__aeabi_dmul>:
 23f8ba0:	b570      	push	{r4, r5, r6, lr}
 23f8ba2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f8ba6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f8baa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f8bae:	bf1d      	ittte	ne
 23f8bb0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f8bb4:	ea94 0f0c 	teqne	r4, ip
 23f8bb8:	ea95 0f0c 	teqne	r5, ip
 23f8bbc:	f000 f8de 	bleq	23f8d7c <__aeabi_dmul+0x1dc>
 23f8bc0:	442c      	add	r4, r5
 23f8bc2:	ea81 0603 	eor.w	r6, r1, r3
 23f8bc6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23f8bca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23f8bce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23f8bd2:	bf18      	it	ne
 23f8bd4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23f8bd8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f8bdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23f8be0:	d038      	beq.n	23f8c54 <__aeabi_dmul+0xb4>
 23f8be2:	fba0 ce02 	umull	ip, lr, r0, r2
 23f8be6:	f04f 0500 	mov.w	r5, #0
 23f8bea:	fbe1 e502 	umlal	lr, r5, r1, r2
 23f8bee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23f8bf2:	fbe0 e503 	umlal	lr, r5, r0, r3
 23f8bf6:	f04f 0600 	mov.w	r6, #0
 23f8bfa:	fbe1 5603 	umlal	r5, r6, r1, r3
 23f8bfe:	f09c 0f00 	teq	ip, #0
 23f8c02:	bf18      	it	ne
 23f8c04:	f04e 0e01 	orrne.w	lr, lr, #1
 23f8c08:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23f8c0c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23f8c10:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23f8c14:	d204      	bcs.n	23f8c20 <__aeabi_dmul+0x80>
 23f8c16:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23f8c1a:	416d      	adcs	r5, r5
 23f8c1c:	eb46 0606 	adc.w	r6, r6, r6
 23f8c20:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23f8c24:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23f8c28:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23f8c2c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23f8c30:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23f8c34:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f8c38:	bf88      	it	hi
 23f8c3a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f8c3e:	d81e      	bhi.n	23f8c7e <__aeabi_dmul+0xde>
 23f8c40:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23f8c44:	bf08      	it	eq
 23f8c46:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23f8c4a:	f150 0000 	adcs.w	r0, r0, #0
 23f8c4e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f8c52:	bd70      	pop	{r4, r5, r6, pc}
 23f8c54:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23f8c58:	ea46 0101 	orr.w	r1, r6, r1
 23f8c5c:	ea40 0002 	orr.w	r0, r0, r2
 23f8c60:	ea81 0103 	eor.w	r1, r1, r3
 23f8c64:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23f8c68:	bfc2      	ittt	gt
 23f8c6a:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f8c6e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f8c72:	bd70      	popgt	{r4, r5, r6, pc}
 23f8c74:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f8c78:	f04f 0e00 	mov.w	lr, #0
 23f8c7c:	3c01      	subs	r4, #1
 23f8c7e:	f300 80ab 	bgt.w	23f8dd8 <__aeabi_dmul+0x238>
 23f8c82:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23f8c86:	bfde      	ittt	le
 23f8c88:	2000      	movle	r0, #0
 23f8c8a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23f8c8e:	bd70      	pople	{r4, r5, r6, pc}
 23f8c90:	f1c4 0400 	rsb	r4, r4, #0
 23f8c94:	3c20      	subs	r4, #32
 23f8c96:	da35      	bge.n	23f8d04 <__aeabi_dmul+0x164>
 23f8c98:	340c      	adds	r4, #12
 23f8c9a:	dc1b      	bgt.n	23f8cd4 <__aeabi_dmul+0x134>
 23f8c9c:	f104 0414 	add.w	r4, r4, #20
 23f8ca0:	f1c4 0520 	rsb	r5, r4, #32
 23f8ca4:	fa00 f305 	lsl.w	r3, r0, r5
 23f8ca8:	fa20 f004 	lsr.w	r0, r0, r4
 23f8cac:	fa01 f205 	lsl.w	r2, r1, r5
 23f8cb0:	ea40 0002 	orr.w	r0, r0, r2
 23f8cb4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23f8cb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23f8cbc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f8cc0:	fa21 f604 	lsr.w	r6, r1, r4
 23f8cc4:	eb42 0106 	adc.w	r1, r2, r6
 23f8cc8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f8ccc:	bf08      	it	eq
 23f8cce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f8cd2:	bd70      	pop	{r4, r5, r6, pc}
 23f8cd4:	f1c4 040c 	rsb	r4, r4, #12
 23f8cd8:	f1c4 0520 	rsb	r5, r4, #32
 23f8cdc:	fa00 f304 	lsl.w	r3, r0, r4
 23f8ce0:	fa20 f005 	lsr.w	r0, r0, r5
 23f8ce4:	fa01 f204 	lsl.w	r2, r1, r4
 23f8ce8:	ea40 0002 	orr.w	r0, r0, r2
 23f8cec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f8cf0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23f8cf4:	f141 0100 	adc.w	r1, r1, #0
 23f8cf8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f8cfc:	bf08      	it	eq
 23f8cfe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f8d02:	bd70      	pop	{r4, r5, r6, pc}
 23f8d04:	f1c4 0520 	rsb	r5, r4, #32
 23f8d08:	fa00 f205 	lsl.w	r2, r0, r5
 23f8d0c:	ea4e 0e02 	orr.w	lr, lr, r2
 23f8d10:	fa20 f304 	lsr.w	r3, r0, r4
 23f8d14:	fa01 f205 	lsl.w	r2, r1, r5
 23f8d18:	ea43 0302 	orr.w	r3, r3, r2
 23f8d1c:	fa21 f004 	lsr.w	r0, r1, r4
 23f8d20:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f8d24:	fa21 f204 	lsr.w	r2, r1, r4
 23f8d28:	ea20 0002 	bic.w	r0, r0, r2
 23f8d2c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23f8d30:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23f8d34:	bf08      	it	eq
 23f8d36:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23f8d3a:	bd70      	pop	{r4, r5, r6, pc}
 23f8d3c:	f094 0f00 	teq	r4, #0
 23f8d40:	d10f      	bne.n	23f8d62 <__aeabi_dmul+0x1c2>
 23f8d42:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23f8d46:	0040      	lsls	r0, r0, #1
 23f8d48:	eb41 0101 	adc.w	r1, r1, r1
 23f8d4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f8d50:	bf08      	it	eq
 23f8d52:	3c01      	subeq	r4, #1
 23f8d54:	d0f7      	beq.n	23f8d46 <__aeabi_dmul+0x1a6>
 23f8d56:	ea41 0106 	orr.w	r1, r1, r6
 23f8d5a:	f095 0f00 	teq	r5, #0
 23f8d5e:	bf18      	it	ne
 23f8d60:	4770      	bxne	lr
 23f8d62:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23f8d66:	0052      	lsls	r2, r2, #1
 23f8d68:	eb43 0303 	adc.w	r3, r3, r3
 23f8d6c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23f8d70:	bf08      	it	eq
 23f8d72:	3d01      	subeq	r5, #1
 23f8d74:	d0f7      	beq.n	23f8d66 <__aeabi_dmul+0x1c6>
 23f8d76:	ea43 0306 	orr.w	r3, r3, r6
 23f8d7a:	4770      	bx	lr
 23f8d7c:	ea94 0f0c 	teq	r4, ip
 23f8d80:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f8d84:	bf18      	it	ne
 23f8d86:	ea95 0f0c 	teqne	r5, ip
 23f8d8a:	d00c      	beq.n	23f8da6 <__aeabi_dmul+0x206>
 23f8d8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f8d90:	bf18      	it	ne
 23f8d92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f8d96:	d1d1      	bne.n	23f8d3c <__aeabi_dmul+0x19c>
 23f8d98:	ea81 0103 	eor.w	r1, r1, r3
 23f8d9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f8da0:	f04f 0000 	mov.w	r0, #0
 23f8da4:	bd70      	pop	{r4, r5, r6, pc}
 23f8da6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f8daa:	bf06      	itte	eq
 23f8dac:	4610      	moveq	r0, r2
 23f8dae:	4619      	moveq	r1, r3
 23f8db0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f8db4:	d019      	beq.n	23f8dea <__aeabi_dmul+0x24a>
 23f8db6:	ea94 0f0c 	teq	r4, ip
 23f8dba:	d102      	bne.n	23f8dc2 <__aeabi_dmul+0x222>
 23f8dbc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23f8dc0:	d113      	bne.n	23f8dea <__aeabi_dmul+0x24a>
 23f8dc2:	ea95 0f0c 	teq	r5, ip
 23f8dc6:	d105      	bne.n	23f8dd4 <__aeabi_dmul+0x234>
 23f8dc8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23f8dcc:	bf1c      	itt	ne
 23f8dce:	4610      	movne	r0, r2
 23f8dd0:	4619      	movne	r1, r3
 23f8dd2:	d10a      	bne.n	23f8dea <__aeabi_dmul+0x24a>
 23f8dd4:	ea81 0103 	eor.w	r1, r1, r3
 23f8dd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23f8ddc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f8de0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23f8de4:	f04f 0000 	mov.w	r0, #0
 23f8de8:	bd70      	pop	{r4, r5, r6, pc}
 23f8dea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23f8dee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23f8df2:	bd70      	pop	{r4, r5, r6, pc}

023f8df4 <__aeabi_ddiv>:
 23f8df4:	b570      	push	{r4, r5, r6, lr}
 23f8df6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23f8dfa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23f8dfe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23f8e02:	bf1d      	ittte	ne
 23f8e04:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23f8e08:	ea94 0f0c 	teqne	r4, ip
 23f8e0c:	ea95 0f0c 	teqne	r5, ip
 23f8e10:	f000 f8a7 	bleq	23f8f62 <__aeabi_ddiv+0x16e>
 23f8e14:	eba4 0405 	sub.w	r4, r4, r5
 23f8e18:	ea81 0e03 	eor.w	lr, r1, r3
 23f8e1c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f8e20:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23f8e24:	f000 8088 	beq.w	23f8f38 <__aeabi_ddiv+0x144>
 23f8e28:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23f8e2c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23f8e30:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23f8e34:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23f8e38:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23f8e3c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23f8e40:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23f8e44:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23f8e48:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23f8e4c:	429d      	cmp	r5, r3
 23f8e4e:	bf08      	it	eq
 23f8e50:	4296      	cmpeq	r6, r2
 23f8e52:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23f8e56:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23f8e5a:	d202      	bcs.n	23f8e62 <__aeabi_ddiv+0x6e>
 23f8e5c:	085b      	lsrs	r3, r3, #1
 23f8e5e:	ea4f 0232 	mov.w	r2, r2, rrx
 23f8e62:	1ab6      	subs	r6, r6, r2
 23f8e64:	eb65 0503 	sbc.w	r5, r5, r3
 23f8e68:	085b      	lsrs	r3, r3, #1
 23f8e6a:	ea4f 0232 	mov.w	r2, r2, rrx
 23f8e6e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23f8e72:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23f8e76:	ebb6 0e02 	subs.w	lr, r6, r2
 23f8e7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f8e7e:	bf22      	ittt	cs
 23f8e80:	1ab6      	subcs	r6, r6, r2
 23f8e82:	4675      	movcs	r5, lr
 23f8e84:	ea40 000c 	orrcs.w	r0, r0, ip
 23f8e88:	085b      	lsrs	r3, r3, #1
 23f8e8a:	ea4f 0232 	mov.w	r2, r2, rrx
 23f8e8e:	ebb6 0e02 	subs.w	lr, r6, r2
 23f8e92:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f8e96:	bf22      	ittt	cs
 23f8e98:	1ab6      	subcs	r6, r6, r2
 23f8e9a:	4675      	movcs	r5, lr
 23f8e9c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23f8ea0:	085b      	lsrs	r3, r3, #1
 23f8ea2:	ea4f 0232 	mov.w	r2, r2, rrx
 23f8ea6:	ebb6 0e02 	subs.w	lr, r6, r2
 23f8eaa:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f8eae:	bf22      	ittt	cs
 23f8eb0:	1ab6      	subcs	r6, r6, r2
 23f8eb2:	4675      	movcs	r5, lr
 23f8eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23f8eb8:	085b      	lsrs	r3, r3, #1
 23f8eba:	ea4f 0232 	mov.w	r2, r2, rrx
 23f8ebe:	ebb6 0e02 	subs.w	lr, r6, r2
 23f8ec2:	eb75 0e03 	sbcs.w	lr, r5, r3
 23f8ec6:	bf22      	ittt	cs
 23f8ec8:	1ab6      	subcs	r6, r6, r2
 23f8eca:	4675      	movcs	r5, lr
 23f8ecc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23f8ed0:	ea55 0e06 	orrs.w	lr, r5, r6
 23f8ed4:	d018      	beq.n	23f8f08 <__aeabi_ddiv+0x114>
 23f8ed6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23f8eda:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23f8ede:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23f8ee2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23f8ee6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23f8eea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23f8eee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23f8ef2:	d1c0      	bne.n	23f8e76 <__aeabi_ddiv+0x82>
 23f8ef4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f8ef8:	d10b      	bne.n	23f8f12 <__aeabi_ddiv+0x11e>
 23f8efa:	ea41 0100 	orr.w	r1, r1, r0
 23f8efe:	f04f 0000 	mov.w	r0, #0
 23f8f02:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23f8f06:	e7b6      	b.n	23f8e76 <__aeabi_ddiv+0x82>
 23f8f08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23f8f0c:	bf04      	itt	eq
 23f8f0e:	4301      	orreq	r1, r0
 23f8f10:	2000      	moveq	r0, #0
 23f8f12:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23f8f16:	bf88      	it	hi
 23f8f18:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23f8f1c:	f63f aeaf 	bhi.w	23f8c7e <__aeabi_dmul+0xde>
 23f8f20:	ebb5 0c03 	subs.w	ip, r5, r3
 23f8f24:	bf04      	itt	eq
 23f8f26:	ebb6 0c02 	subseq.w	ip, r6, r2
 23f8f2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23f8f2e:	f150 0000 	adcs.w	r0, r0, #0
 23f8f32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23f8f36:	bd70      	pop	{r4, r5, r6, pc}
 23f8f38:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23f8f3c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23f8f40:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23f8f44:	bfc2      	ittt	gt
 23f8f46:	ebd4 050c 	rsbsgt	r5, r4, ip
 23f8f4a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23f8f4e:	bd70      	popgt	{r4, r5, r6, pc}
 23f8f50:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f8f54:	f04f 0e00 	mov.w	lr, #0
 23f8f58:	3c01      	subs	r4, #1
 23f8f5a:	e690      	b.n	23f8c7e <__aeabi_dmul+0xde>
 23f8f5c:	ea45 0e06 	orr.w	lr, r5, r6
 23f8f60:	e68d      	b.n	23f8c7e <__aeabi_dmul+0xde>
 23f8f62:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23f8f66:	ea94 0f0c 	teq	r4, ip
 23f8f6a:	bf08      	it	eq
 23f8f6c:	ea95 0f0c 	teqeq	r5, ip
 23f8f70:	f43f af3b 	beq.w	23f8dea <__aeabi_dmul+0x24a>
 23f8f74:	ea94 0f0c 	teq	r4, ip
 23f8f78:	d10a      	bne.n	23f8f90 <__aeabi_ddiv+0x19c>
 23f8f7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23f8f7e:	f47f af34 	bne.w	23f8dea <__aeabi_dmul+0x24a>
 23f8f82:	ea95 0f0c 	teq	r5, ip
 23f8f86:	f47f af25 	bne.w	23f8dd4 <__aeabi_dmul+0x234>
 23f8f8a:	4610      	mov	r0, r2
 23f8f8c:	4619      	mov	r1, r3
 23f8f8e:	e72c      	b.n	23f8dea <__aeabi_dmul+0x24a>
 23f8f90:	ea95 0f0c 	teq	r5, ip
 23f8f94:	d106      	bne.n	23f8fa4 <__aeabi_ddiv+0x1b0>
 23f8f96:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23f8f9a:	f43f aefd 	beq.w	23f8d98 <__aeabi_dmul+0x1f8>
 23f8f9e:	4610      	mov	r0, r2
 23f8fa0:	4619      	mov	r1, r3
 23f8fa2:	e722      	b.n	23f8dea <__aeabi_dmul+0x24a>
 23f8fa4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23f8fa8:	bf18      	it	ne
 23f8faa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23f8fae:	f47f aec5 	bne.w	23f8d3c <__aeabi_dmul+0x19c>
 23f8fb2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23f8fb6:	f47f af0d 	bne.w	23f8dd4 <__aeabi_dmul+0x234>
 23f8fba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23f8fbe:	f47f aeeb 	bne.w	23f8d98 <__aeabi_dmul+0x1f8>
 23f8fc2:	e712      	b.n	23f8dea <__aeabi_dmul+0x24a>

023f8fc4 <__gedf2>:
 23f8fc4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23f8fc8:	e006      	b.n	23f8fd8 <__cmpdf2+0x4>
 23f8fca:	bf00      	nop

023f8fcc <__ledf2>:
 23f8fcc:	f04f 0c01 	mov.w	ip, #1
 23f8fd0:	e002      	b.n	23f8fd8 <__cmpdf2+0x4>
 23f8fd2:	bf00      	nop

023f8fd4 <__cmpdf2>:
 23f8fd4:	f04f 0c01 	mov.w	ip, #1
 23f8fd8:	f84d cd04 	str.w	ip, [sp, #-4]!
 23f8fdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f8fe0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f8fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f8fe8:	bf18      	it	ne
 23f8fea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23f8fee:	d01b      	beq.n	23f9028 <__cmpdf2+0x54>
 23f8ff0:	b001      	add	sp, #4
 23f8ff2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23f8ff6:	bf0c      	ite	eq
 23f8ff8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23f8ffc:	ea91 0f03 	teqne	r1, r3
 23f9000:	bf02      	ittt	eq
 23f9002:	ea90 0f02 	teqeq	r0, r2
 23f9006:	2000      	moveq	r0, #0
 23f9008:	4770      	bxeq	lr
 23f900a:	f110 0f00 	cmn.w	r0, #0
 23f900e:	ea91 0f03 	teq	r1, r3
 23f9012:	bf58      	it	pl
 23f9014:	4299      	cmppl	r1, r3
 23f9016:	bf08      	it	eq
 23f9018:	4290      	cmpeq	r0, r2
 23f901a:	bf2c      	ite	cs
 23f901c:	17d8      	asrcs	r0, r3, #31
 23f901e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23f9022:	f040 0001 	orr.w	r0, r0, #1
 23f9026:	4770      	bx	lr
 23f9028:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f902c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f9030:	d102      	bne.n	23f9038 <__cmpdf2+0x64>
 23f9032:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23f9036:	d107      	bne.n	23f9048 <__cmpdf2+0x74>
 23f9038:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f903c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f9040:	d1d6      	bne.n	23f8ff0 <__cmpdf2+0x1c>
 23f9042:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23f9046:	d0d3      	beq.n	23f8ff0 <__cmpdf2+0x1c>
 23f9048:	f85d 0b04 	ldr.w	r0, [sp], #4
 23f904c:	4770      	bx	lr
 23f904e:	bf00      	nop

023f9050 <__aeabi_cdrcmple>:
 23f9050:	4684      	mov	ip, r0
 23f9052:	4610      	mov	r0, r2
 23f9054:	4662      	mov	r2, ip
 23f9056:	468c      	mov	ip, r1
 23f9058:	4619      	mov	r1, r3
 23f905a:	4663      	mov	r3, ip
 23f905c:	e000      	b.n	23f9060 <__aeabi_cdcmpeq>
 23f905e:	bf00      	nop

023f9060 <__aeabi_cdcmpeq>:
 23f9060:	b501      	push	{r0, lr}
 23f9062:	f7ff ffb7 	bl	23f8fd4 <__cmpdf2>
 23f9066:	2800      	cmp	r0, #0
 23f9068:	bf48      	it	mi
 23f906a:	f110 0f00 	cmnmi.w	r0, #0
 23f906e:	bd01      	pop	{r0, pc}

023f9070 <__aeabi_dcmpeq>:
 23f9070:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f9074:	f7ff fff4 	bl	23f9060 <__aeabi_cdcmpeq>
 23f9078:	bf0c      	ite	eq
 23f907a:	2001      	moveq	r0, #1
 23f907c:	2000      	movne	r0, #0
 23f907e:	f85d fb08 	ldr.w	pc, [sp], #8
 23f9082:	bf00      	nop

023f9084 <__aeabi_dcmplt>:
 23f9084:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f9088:	f7ff ffea 	bl	23f9060 <__aeabi_cdcmpeq>
 23f908c:	bf34      	ite	cc
 23f908e:	2001      	movcc	r0, #1
 23f9090:	2000      	movcs	r0, #0
 23f9092:	f85d fb08 	ldr.w	pc, [sp], #8
 23f9096:	bf00      	nop

023f9098 <__aeabi_dcmple>:
 23f9098:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f909c:	f7ff ffe0 	bl	23f9060 <__aeabi_cdcmpeq>
 23f90a0:	bf94      	ite	ls
 23f90a2:	2001      	movls	r0, #1
 23f90a4:	2000      	movhi	r0, #0
 23f90a6:	f85d fb08 	ldr.w	pc, [sp], #8
 23f90aa:	bf00      	nop

023f90ac <__aeabi_dcmpge>:
 23f90ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f90b0:	f7ff ffce 	bl	23f9050 <__aeabi_cdrcmple>
 23f90b4:	bf94      	ite	ls
 23f90b6:	2001      	movls	r0, #1
 23f90b8:	2000      	movhi	r0, #0
 23f90ba:	f85d fb08 	ldr.w	pc, [sp], #8
 23f90be:	bf00      	nop

023f90c0 <__aeabi_dcmpgt>:
 23f90c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23f90c4:	f7ff ffc4 	bl	23f9050 <__aeabi_cdrcmple>
 23f90c8:	bf34      	ite	cc
 23f90ca:	2001      	movcc	r0, #1
 23f90cc:	2000      	movcs	r0, #0
 23f90ce:	f85d fb08 	ldr.w	pc, [sp], #8
 23f90d2:	bf00      	nop

023f90d4 <__aeabi_dcmpun>:
 23f90d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23f90d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f90dc:	d102      	bne.n	23f90e4 <__aeabi_dcmpun+0x10>
 23f90de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23f90e2:	d10a      	bne.n	23f90fa <__aeabi_dcmpun+0x26>
 23f90e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23f90e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23f90ec:	d102      	bne.n	23f90f4 <__aeabi_dcmpun+0x20>
 23f90ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23f90f2:	d102      	bne.n	23f90fa <__aeabi_dcmpun+0x26>
 23f90f4:	f04f 0000 	mov.w	r0, #0
 23f90f8:	4770      	bx	lr
 23f90fa:	f04f 0001 	mov.w	r0, #1
 23f90fe:	4770      	bx	lr

023f9100 <__aeabi_d2iz>:
 23f9100:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23f9104:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23f9108:	d215      	bcs.n	23f9136 <__aeabi_d2iz+0x36>
 23f910a:	d511      	bpl.n	23f9130 <__aeabi_d2iz+0x30>
 23f910c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23f9110:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23f9114:	d912      	bls.n	23f913c <__aeabi_d2iz+0x3c>
 23f9116:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f911a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23f911e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23f9122:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23f9126:	fa23 f002 	lsr.w	r0, r3, r2
 23f912a:	bf18      	it	ne
 23f912c:	4240      	negne	r0, r0
 23f912e:	4770      	bx	lr
 23f9130:	f04f 0000 	mov.w	r0, #0
 23f9134:	4770      	bx	lr
 23f9136:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23f913a:	d105      	bne.n	23f9148 <__aeabi_d2iz+0x48>
 23f913c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 23f9140:	bf08      	it	eq
 23f9142:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 23f9146:	4770      	bx	lr
 23f9148:	f04f 0000 	mov.w	r0, #0
 23f914c:	4770      	bx	lr
 23f914e:	bf00      	nop

023f9150 <__aeabi_d2uiz>:
 23f9150:	004a      	lsls	r2, r1, #1
 23f9152:	d211      	bcs.n	23f9178 <__aeabi_d2uiz+0x28>
 23f9154:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23f9158:	d211      	bcs.n	23f917e <__aeabi_d2uiz+0x2e>
 23f915a:	d50d      	bpl.n	23f9178 <__aeabi_d2uiz+0x28>
 23f915c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23f9160:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23f9164:	d40e      	bmi.n	23f9184 <__aeabi_d2uiz+0x34>
 23f9166:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f916a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23f916e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23f9172:	fa23 f002 	lsr.w	r0, r3, r2
 23f9176:	4770      	bx	lr
 23f9178:	f04f 0000 	mov.w	r0, #0
 23f917c:	4770      	bx	lr
 23f917e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23f9182:	d102      	bne.n	23f918a <__aeabi_d2uiz+0x3a>
 23f9184:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23f9188:	4770      	bx	lr
 23f918a:	f04f 0000 	mov.w	r0, #0
 23f918e:	4770      	bx	lr

023f9190 <__aeabi_d2f>:
 23f9190:	ea4f 0241 	mov.w	r2, r1, lsl #1
 23f9194:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 23f9198:	bf24      	itt	cs
 23f919a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 23f919e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 23f91a2:	d90d      	bls.n	23f91c0 <__aeabi_d2f+0x30>
 23f91a4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 23f91a8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 23f91ac:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 23f91b0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 23f91b4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 23f91b8:	bf08      	it	eq
 23f91ba:	f020 0001 	biceq.w	r0, r0, #1
 23f91be:	4770      	bx	lr
 23f91c0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 23f91c4:	d121      	bne.n	23f920a <__aeabi_d2f+0x7a>
 23f91c6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 23f91ca:	bfbc      	itt	lt
 23f91cc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 23f91d0:	4770      	bxlt	lr
 23f91d2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23f91d6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 23f91da:	f1c2 0218 	rsb	r2, r2, #24
 23f91de:	f1c2 0c20 	rsb	ip, r2, #32
 23f91e2:	fa10 f30c 	lsls.w	r3, r0, ip
 23f91e6:	fa20 f002 	lsr.w	r0, r0, r2
 23f91ea:	bf18      	it	ne
 23f91ec:	f040 0001 	orrne.w	r0, r0, #1
 23f91f0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23f91f4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 23f91f8:	fa03 fc0c 	lsl.w	ip, r3, ip
 23f91fc:	ea40 000c 	orr.w	r0, r0, ip
 23f9200:	fa23 f302 	lsr.w	r3, r3, r2
 23f9204:	ea4f 0343 	mov.w	r3, r3, lsl #1
 23f9208:	e7cc      	b.n	23f91a4 <__aeabi_d2f+0x14>
 23f920a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 23f920e:	d107      	bne.n	23f9220 <__aeabi_d2f+0x90>
 23f9210:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 23f9214:	bf1e      	ittt	ne
 23f9216:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 23f921a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 23f921e:	4770      	bxne	lr
 23f9220:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 23f9224:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 23f9228:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 23f922c:	4770      	bx	lr
 23f922e:	bf00      	nop

023f9230 <strlen>:
 23f9230:	4603      	mov	r3, r0
 23f9232:	f813 2b01 	ldrb.w	r2, [r3], #1
 23f9236:	2a00      	cmp	r2, #0
 23f9238:	d1fb      	bne.n	23f9232 <strlen+0x2>
 23f923a:	1a18      	subs	r0, r3, r0
 23f923c:	3801      	subs	r0, #1
 23f923e:	4770      	bx	lr

023f9240 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23f9240:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23f9242:	f003 f9c3 	bl	23fc5cc <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f9246:	2500      	movs	r5, #0
 23f9248:	4e05      	ldr	r6, [pc, #20]	; (23f9260 <module_user_init+0x20>)
 23f924a:	4c06      	ldr	r4, [pc, #24]	; (23f9264 <module_user_init+0x24>)
 23f924c:	1ba4      	subs	r4, r4, r6
 23f924e:	08a4      	lsrs	r4, r4, #2
 23f9250:	42ac      	cmp	r4, r5
 23f9252:	d100      	bne.n	23f9256 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23f9254:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23f9256:	f856 3b04 	ldr.w	r3, [r6], #4
 23f925a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23f925c:	3501      	adds	r5, #1
 23f925e:	e7f7      	b.n	23f9250 <module_user_init+0x10>
 23f9260:	023fffd4 	.word	0x023fffd4
 23f9264:	023ffff8 	.word	0x023ffff8

023f9268 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23f9268:	f000 b982 	b.w	23f9570 <setup>

023f926c <module_user_loop>:
}

void module_user_loop() {
 23f926c:	b508      	push	{r3, lr}
    loop();
 23f926e:	f000 fb4d 	bl	23f990c <loop>
    _post_loop();
}
 23f9272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23f9276:	f003 b961 	b.w	23fc53c <_post_loop>

023f927a <_Znaj>:
 23f927a:	f002 bbaf 	b.w	23fb9dc <malloc>

023f927e <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23f927e:	f002 bbbb 	b.w	23fb9f8 <free>
	...

023f9284 <__cxa_pure_virtual>:
    return -1;
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f9284:	200c      	movs	r0, #12
void __cxa_pure_virtual() {
 23f9286:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
 23f9288:	4a02      	ldr	r2, [pc, #8]	; (23f9294 <__cxa_pure_virtual+0x10>)
 23f928a:	4903      	ldr	r1, [pc, #12]	; (23f9298 <__cxa_pure_virtual+0x14>)
 23f928c:	f002 faaa 	bl	23fb7e4 <panic_>
  while (1);
 23f9290:	e7fe      	b.n	23f9290 <__cxa_pure_virtual+0xc>
 23f9292:	bf00      	nop
 23f9294:	023fb34d 	.word	0x023fb34d
 23f9298:	023fca78 	.word	0x023fca78

023f929c <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23f929c:	7800      	ldrb	r0, [r0, #0]
 23f929e:	fab0 f080 	clz	r0, r0
 23f92a2:	0940      	lsrs	r0, r0, #5
 23f92a4:	4770      	bx	lr

023f92a6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23f92a6:	2301      	movs	r3, #1
 23f92a8:	7003      	strb	r3, [r0, #0]
 23f92aa:	4770      	bx	lr

023f92ac <_Z9alarm_ledv>:
      digitalWrite(A2, LOW);
      digitalWrite(A5, HIGH);
    }
}

void alarm_led() {
 23f92ac:	b510      	push	{r4, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23f92ae:	f002 f85b 	bl	23fb368 <HAL_Timer_Get_Milli_Seconds>

  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
 23f92b2:	4a0c      	ldr	r2, [pc, #48]	; (23f92e4 <_Z9alarm_ledv+0x38>)
 23f92b4:	6813      	ldr	r3, [r2, #0]
 23f92b6:	1ac3      	subs	r3, r0, r3
 23f92b8:	2bf9      	cmp	r3, #249	; 0xf9
 23f92ba:	d912      	bls.n	23f92e2 <_Z9alarm_ledv+0x36>
    // save the last time you blinked the LED
    previousMillis = currentMillis;

    // if the LED is off turn it on and vice-versa:
    if (Alarm_State == LOW) {
 23f92bc:	4c0a      	ldr	r4, [pc, #40]	; (23f92e8 <_Z9alarm_ledv+0x3c>)
    previousMillis = currentMillis;
 23f92be:	6010      	str	r0, [r2, #0]
    if (Alarm_State == LOW) {
 23f92c0:	6821      	ldr	r1, [r4, #0]
      Alarm_State = HIGH;
        } else {
          Alarm_State = LOW;
    }
    // set the LED with the ledState of the variable:
     digitalWrite(A2, Alarm_State);
 23f92c2:	200d      	movs	r0, #13
    if (Alarm_State == LOW) {
 23f92c4:	fab1 f181 	clz	r1, r1
 23f92c8:	0949      	lsrs	r1, r1, #5
      Alarm_State = HIGH;
 23f92ca:	6021      	str	r1, [r4, #0]
     digitalWrite(A2, Alarm_State);
 23f92cc:	f003 f9ff 	bl	23fc6ce <digitalWrite>
     digitalWrite(A5, !Alarm_State);
 23f92d0:	6821      	ldr	r1, [r4, #0]
 23f92d2:	200e      	movs	r0, #14
    }
}
 23f92d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     digitalWrite(A5, !Alarm_State);
 23f92d8:	fab1 f181 	clz	r1, r1
 23f92dc:	0949      	lsrs	r1, r1, #5
 23f92de:	f003 b9f6 	b.w	23fc6ce <digitalWrite>
}
 23f92e2:	bd10      	pop	{r4, pc}
 23f92e4:	1007ae28 	.word	0x1007ae28
 23f92e8:	1007add4 	.word	0x1007add4

023f92ec <_Z4LEDsv>:
void LEDs() {
 23f92ec:	b538      	push	{r3, r4, r5, lr}
  if ((volts >= OV_Set) && (OV_State == LOW)) { 
 23f92ee:	4d25      	ldr	r5, [pc, #148]	; (23f9384 <_Z4LEDsv+0x98>)
 23f92f0:	4c25      	ldr	r4, [pc, #148]	; (23f9388 <_Z4LEDsv+0x9c>)
 23f92f2:	ed95 7a00 	vldr	s14, [r5]
 23f92f6:	edd4 7a00 	vldr	s15, [r4]
 23f92fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23f92fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9302:	db25      	blt.n	23f9350 <_Z4LEDsv+0x64>
 23f9304:	4a21      	ldr	r2, [pc, #132]	; (23f938c <_Z4LEDsv+0xa0>)
 23f9306:	6813      	ldr	r3, [r2, #0]
 23f9308:	bb03      	cbnz	r3, 23f934c <_Z4LEDsv+0x60>
    OV_State = HIGH;
 23f930a:	2301      	movs	r3, #1
 23f930c:	6013      	str	r3, [r2, #0]
      alarm_led();
 23f930e:	f7ff ffcd 	bl	23f92ac <_Z9alarm_ledv>
  if ((volts > 1.0) && (volts < OV_Set) && (OV_State == LOW))  {
 23f9312:	edd5 7a00 	vldr	s15, [r5]
 23f9316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 23f931a:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f931e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9322:	dd21      	ble.n	23f9368 <_Z4LEDsv+0x7c>
 23f9324:	edd4 6a00 	vldr	s13, [r4]
 23f9328:	eef4 7ae6 	vcmpe.f32	s15, s13
 23f932c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9330:	d51a      	bpl.n	23f9368 <_Z4LEDsv+0x7c>
 23f9332:	4b16      	ldr	r3, [pc, #88]	; (23f938c <_Z4LEDsv+0xa0>)
 23f9334:	681c      	ldr	r4, [r3, #0]
 23f9336:	bb24      	cbnz	r4, 23f9382 <_Z4LEDsv+0x96>
      digitalWrite(A2, HIGH);
 23f9338:	2101      	movs	r1, #1
 23f933a:	200d      	movs	r0, #13
 23f933c:	f003 f9c7 	bl	23fc6ce <digitalWrite>
      digitalWrite(A5, LOW);
 23f9340:	4621      	mov	r1, r4
}
 23f9342:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      digitalWrite(A5, HIGH);
 23f9346:	200e      	movs	r0, #14
 23f9348:	f003 b9c1 	b.w	23fc6ce <digitalWrite>
    } else if ((volts >= OV_Set) && (OV_State == HIGH)) {
 23f934c:	2b01      	cmp	r3, #1
 23f934e:	d0de      	beq.n	23f930e <_Z4LEDsv+0x22>
      } else if ((volts < OV_Set) && (OV_State == HIGH)) { 
 23f9350:	eeb4 7ae7 	vcmpe.f32	s14, s15
 23f9354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9358:	d5db      	bpl.n	23f9312 <_Z4LEDsv+0x26>
 23f935a:	4b0c      	ldr	r3, [pc, #48]	; (23f938c <_Z4LEDsv+0xa0>)
 23f935c:	681a      	ldr	r2, [r3, #0]
 23f935e:	2a01      	cmp	r2, #1
        OV_State = LOW; 
 23f9360:	bf04      	itt	eq
 23f9362:	2200      	moveq	r2, #0
 23f9364:	601a      	streq	r2, [r3, #0]
 23f9366:	e7d4      	b.n	23f9312 <_Z4LEDsv+0x26>
    } else if ((volts < 1.0)  && (OV_State == 0)) {
 23f9368:	eef4 7ac7 	vcmpe.f32	s15, s14
 23f936c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23f9370:	d507      	bpl.n	23f9382 <_Z4LEDsv+0x96>
 23f9372:	4b06      	ldr	r3, [pc, #24]	; (23f938c <_Z4LEDsv+0xa0>)
 23f9374:	6819      	ldr	r1, [r3, #0]
 23f9376:	b921      	cbnz	r1, 23f9382 <_Z4LEDsv+0x96>
      digitalWrite(A2, LOW);
 23f9378:	200d      	movs	r0, #13
 23f937a:	f003 f9a8 	bl	23fc6ce <digitalWrite>
      digitalWrite(A5, HIGH);
 23f937e:	2101      	movs	r1, #1
 23f9380:	e7df      	b.n	23f9342 <_Z4LEDsv+0x56>
}
 23f9382:	bd38      	pop	{r3, r4, r5, pc}
 23f9384:	1007ae7c 	.word	0x1007ae7c
 23f9388:	1007ad64 	.word	0x1007ad64
 23f938c:	1007add8 	.word	0x1007add8

023f9390 <_Z11draw_screenv>:
  
void draw_screen() {
 23f9390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  tft.fillRect(0,0,160,120,ST77XX_BLUE);                                               // draws background fills for readings
 23f9392:	231f      	movs	r3, #31
 23f9394:	2578      	movs	r5, #120	; 0x78
 23f9396:	2200      	movs	r2, #0
  tft.fillRect(20,80,120,30,ST77XX_WHITE);
 23f9398:	f64f 76ff 	movw	r6, #65535	; 0xffff
 23f939c:	271e      	movs	r7, #30
  tft.fillRect(0,0,160,120,ST77XX_BLUE);                                               // draws background fills for readings
 23f939e:	4c5a      	ldr	r4, [pc, #360]	; (23f9508 <_Z11draw_screenv+0x178>)
 23f93a0:	e9cd 5300 	strd	r5, r3, [sp]
 23f93a4:	4611      	mov	r1, r2
 23f93a6:	4620      	mov	r0, r4
 23f93a8:	23a0      	movs	r3, #160	; 0xa0
 23f93aa:	f001 fc3c 	bl	23fac26 <_ZN15Adafruit_SPITFT8fillRectEsssst>
  tft.fillRect(20,80,120,30,ST77XX_WHITE);
 23f93ae:	e9cd 7600 	strd	r7, r6, [sp]
 23f93b2:	462b      	mov	r3, r5
 23f93b4:	4620      	mov	r0, r4
 23f93b6:	2250      	movs	r2, #80	; 0x50
 23f93b8:	2114      	movs	r1, #20
 23f93ba:	f001 fc34 	bl	23fac26 <_ZN15Adafruit_SPITFT8fillRectEsssst>
  
  tft.fillRect(0,121,160,120,ST77XX_GREEN);
 23f93be:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 23f93c2:	4620      	mov	r0, r4
 23f93c4:	e9cd 5300 	strd	r5, r3, [sp]
 23f93c8:	2279      	movs	r2, #121	; 0x79
 23f93ca:	23a0      	movs	r3, #160	; 0xa0
 23f93cc:	2100      	movs	r1, #0
 23f93ce:	f001 fc2a 	bl	23fac26 <_ZN15Adafruit_SPITFT8fillRectEsssst>
  tft.fillRect(20,201,120,30,ST77XX_WHITE);                                               
 23f93d2:	e9cd 7600 	strd	r7, r6, [sp]
 23f93d6:	462b      	mov	r3, r5
 23f93d8:	4620      	mov	r0, r4
 23f93da:	22c9      	movs	r2, #201	; 0xc9
 23f93dc:	2114      	movs	r1, #20
 23f93de:	f001 fc22 	bl	23fac26 <_ZN15Adafruit_SPITFT8fillRectEsssst>
    
  tft.fillRect(161,0,160,120,ST77XX_RED);
 23f93e2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 23f93e6:	4620      	mov	r0, r4
 23f93e8:	e9cd 5300 	strd	r5, r3, [sp]
 23f93ec:	2200      	movs	r2, #0
 23f93ee:	23a0      	movs	r3, #160	; 0xa0
 23f93f0:	21a1      	movs	r1, #161	; 0xa1
 23f93f2:	f001 fc18 	bl	23fac26 <_ZN15Adafruit_SPITFT8fillRectEsssst>
  tft.fillRect(181,80,120,30,ST77XX_WHITE);
 23f93f6:	e9cd 7600 	strd	r7, r6, [sp]
 23f93fa:	462b      	mov	r3, r5
 23f93fc:	4620      	mov	r0, r4
 23f93fe:	2250      	movs	r2, #80	; 0x50
 23f9400:	21b5      	movs	r1, #181	; 0xb5
 23f9402:	f001 fc10 	bl	23fac26 <_ZN15Adafruit_SPITFT8fillRectEsssst>

  tft.fillRect(161,121,160,120,ST77XX_WHITE);
 23f9406:	e9cd 5600 	strd	r5, r6, [sp]
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(boolean w) { wrap = w; }
 23f940a:	2500      	movs	r5, #0
 23f940c:	2279      	movs	r2, #121	; 0x79
 23f940e:	23a0      	movs	r3, #160	; 0xa0
 23f9410:	4620      	mov	r0, r4
 23f9412:	21a1      	movs	r1, #161	; 0xa1
 23f9414:	f001 fc07 	bl	23fac26 <_ZN15Adafruit_SPITFT8fillRectEsssst>

  //tft.drawBitmap(0,0,icon);

////// Main headings ///////
  tft.setFont(&FreeSansBold9pt7b);
 23f9418:	4620      	mov	r0, r4
 23f941a:	493c      	ldr	r1, [pc, #240]	; (23f950c <_Z11draw_screenv+0x17c>)
 23f941c:	f001 fa0d 	bl	23fa83a <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  tft.setTextSize(2);
  tft.setTextWrap(false);

  tft.setCursor(115, 40);                                                                 // set sursor to start writing text
  tft.print("V");
 23f9420:	4f3b      	ldr	r7, [pc, #236]	; (23f9510 <_Z11draw_screenv+0x180>)
  tft.setTextSize(2);
 23f9422:	4620      	mov	r0, r4
 23f9424:	2102      	movs	r1, #2
 23f9426:	f001 fa02 	bl	23fa82e <_ZN12Adafruit_GFX11setTextSizeEh>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23f942a:	4b3a      	ldr	r3, [pc, #232]	; (23f9514 <_Z11draw_screenv+0x184>)
  tft.print("V");
 23f942c:	4639      	mov	r1, r7
 
  tft.setCursor(275, 40);
  tft.println("A");
 23f942e:	4e3a      	ldr	r6, [pc, #232]	; (23f9518 <_Z11draw_screenv+0x188>)
  tft.print("V");
 23f9430:	4620      	mov	r0, r4
 23f9432:	6123      	str	r3, [r4, #16]
  void setTextWrap(boolean w) { wrap = w; }
 23f9434:	76e5      	strb	r5, [r4, #27]
 23f9436:	f002 fd35 	bl	23fbea4 <_ZN5Print5printEPKc>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23f943a:	4b38      	ldr	r3, [pc, #224]	; (23f951c <_Z11draw_screenv+0x18c>)
  tft.println("A");
 23f943c:	4631      	mov	r1, r6
 23f943e:	4620      	mov	r0, r4
 23f9440:	6123      	str	r3, [r4, #16]
 23f9442:	f002 fd46 	bl	23fbed2 <_ZN5Print7printlnEPKc>
 23f9446:	4b36      	ldr	r3, [pc, #216]	; (23f9520 <_Z11draw_screenv+0x190>)

  tft.setCursor(110, 165); 
  tft.println("W");
 23f9448:	4620      	mov	r0, r4
 23f944a:	4936      	ldr	r1, [pc, #216]	; (23f9524 <_Z11draw_screenv+0x194>)
 23f944c:	6123      	str	r3, [r4, #16]
 23f944e:	f002 fd40 	bl	23fbed2 <_ZN5Print7printlnEPKc>

////// Sub headings ///////
  tft.setFont(&FreeSans9pt7b);
 23f9452:	4620      	mov	r0, r4
 23f9454:	4934      	ldr	r1, [pc, #208]	; (23f9528 <_Z11draw_screenv+0x198>)
 23f9456:	f001 f9f0 	bl	23fa83a <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  tft.setTextColor(ST77XX_BLACK);
  tft.setTextSize(1);
 23f945a:	4620      	mov	r0, r4
 23f945c:	2101      	movs	r1, #1
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23f945e:	6165      	str	r5, [r4, #20]
 23f9460:	f001 f9e5 	bl	23fa82e <_ZN12Adafruit_GFX11setTextSizeEh>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23f9464:	4b31      	ldr	r3, [pc, #196]	; (23f952c <_Z11draw_screenv+0x19c>)
  tft.setCursor(25, 102);                                                                 // set sursor to start writing text
  tft.print("O.V. ");
 23f9466:	4620      	mov	r0, r4
 23f9468:	4931      	ldr	r1, [pc, #196]	; (23f9530 <_Z11draw_screenv+0x1a0>)
 23f946a:	6123      	str	r3, [r4, #16]
 23f946c:	f002 fd1a 	bl	23fbea4 <_ZN5Print5printEPKc>
  tft.print(OV_Set);
 23f9470:	4b30      	ldr	r3, [pc, #192]	; (23f9534 <_Z11draw_screenv+0x1a4>)
 23f9472:	2102      	movs	r1, #2
 23f9474:	ed93 0a00 	vldr	s0, [r3]
 23f9478:	4620      	mov	r0, r4
 23f947a:	f002 fe1d 	bl	23fc0b8 <_ZN5Print5printEfi>
  tft.print("V");
 23f947e:	4639      	mov	r1, r7
 23f9480:	4620      	mov	r0, r4
 23f9482:	f002 fd0f 	bl	23fbea4 <_ZN5Print5printEPKc>
 23f9486:	4b2c      	ldr	r3, [pc, #176]	; (23f9538 <_Z11draw_screenv+0x1a8>)

  tft.setCursor(185, 102);                                                                // set sursor to start writing text
  tft.print("O.C. ");
 23f9488:	4620      	mov	r0, r4
 23f948a:	492c      	ldr	r1, [pc, #176]	; (23f953c <_Z11draw_screenv+0x1ac>)
 23f948c:	6123      	str	r3, [r4, #16]
 23f948e:	f002 fd09 	bl	23fbea4 <_ZN5Print5printEPKc>
  tft.print(OC_Set);
 23f9492:	4b2b      	ldr	r3, [pc, #172]	; (23f9540 <_Z11draw_screenv+0x1b0>)
 23f9494:	2102      	movs	r1, #2
 23f9496:	ed93 0a00 	vldr	s0, [r3]
 23f949a:	4620      	mov	r0, r4
 23f949c:	f002 fe0c 	bl	23fc0b8 <_ZN5Print5printEfi>
  tft.print("A");
 23f94a0:	4631      	mov	r1, r6
 23f94a2:	4620      	mov	r0, r4
 23f94a4:	f002 fcfe 	bl	23fbea4 <_ZN5Print5printEPKc>
 23f94a8:	4b26      	ldr	r3, [pc, #152]	; (23f9544 <_Z11draw_screenv+0x1b4>)

  tft.setCursor(25, 222);                                                                // set sursor to start writing text
  tft.print("SET: ");
 23f94aa:	4620      	mov	r0, r4
 23f94ac:	4926      	ldr	r1, [pc, #152]	; (23f9548 <_Z11draw_screenv+0x1b8>)
 23f94ae:	6123      	str	r3, [r4, #16]
 23f94b0:	f002 fcf8 	bl	23fbea4 <_ZN5Print5printEPKc>
  tft.print(W_Set);
 23f94b4:	4b25      	ldr	r3, [pc, #148]	; (23f954c <_Z11draw_screenv+0x1bc>)
 23f94b6:	2102      	movs	r1, #2
 23f94b8:	ed93 0a00 	vldr	s0, [r3]
 23f94bc:	4620      	mov	r0, r4
 23f94be:	f002 fdfb 	bl	23fc0b8 <_ZN5Print5printEfi>
  tft.print("kW");
 23f94c2:	4620      	mov	r0, r4
 23f94c4:	4922      	ldr	r1, [pc, #136]	; (23f9550 <_Z11draw_screenv+0x1c0>)
 23f94c6:	f002 fced 	bl	23fbea4 <_ZN5Print5printEPKc>

  
////// Addtional Info ///////  
  tft.setFont(&FreeSans12pt7b);
 23f94ca:	4620      	mov	r0, r4
 23f94cc:	4921      	ldr	r1, [pc, #132]	; (23f9554 <_Z11draw_screenv+0x1c4>)
 23f94ce:	f001 f9b4 	bl	23fa83a <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  tft.setTextColor(ST77XX_BLACK);
  tft.setTextSize(1);
 23f94d2:	4620      	mov	r0, r4
 23f94d4:	2101      	movs	r1, #1
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23f94d6:	6165      	str	r5, [r4, #20]
 23f94d8:	f001 f9a9 	bl	23fa82e <_ZN12Adafruit_GFX11setTextSizeEh>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23f94dc:	4b1e      	ldr	r3, [pc, #120]	; (23f9558 <_Z11draw_screenv+0x1c8>)
  
  tft.setCursor(175, 155);
  tft.print("PF :"); 
 23f94de:	4620      	mov	r0, r4
 23f94e0:	491e      	ldr	r1, [pc, #120]	; (23f955c <_Z11draw_screenv+0x1cc>)
 23f94e2:	6123      	str	r3, [r4, #16]
 23f94e4:	f002 fcde 	bl	23fbea4 <_ZN5Print5printEPKc>
 23f94e8:	4b1d      	ldr	r3, [pc, #116]	; (23f9560 <_Z11draw_screenv+0x1d0>)

  tft.setCursor(175, 185);
  tft.print("PA :"); 
 23f94ea:	4620      	mov	r0, r4
 23f94ec:	491d      	ldr	r1, [pc, #116]	; (23f9564 <_Z11draw_screenv+0x1d4>)
 23f94ee:	6123      	str	r3, [r4, #16]
 23f94f0:	f002 fcd8 	bl	23fbea4 <_ZN5Print5printEPKc>

  tft.setCursor(175, 215);
  tft.print("VAR :"); 
 23f94f4:	4620      	mov	r0, r4
 23f94f6:	4b1c      	ldr	r3, [pc, #112]	; (23f9568 <_Z11draw_screenv+0x1d8>)
 23f94f8:	491c      	ldr	r1, [pc, #112]	; (23f956c <_Z11draw_screenv+0x1dc>)
 23f94fa:	6123      	str	r3, [r4, #16]

}
 23f94fc:	b003      	add	sp, #12
 23f94fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  tft.print("VAR :"); 
 23f9502:	f002 bccf 	b.w	23fbea4 <_ZN5Print5printEPKc>
 23f9506:	bf00      	nop
 23f9508:	1007ae2c 	.word	0x1007ae2c
 23f950c:	023fcbac 	.word	0x023fcbac
 23f9510:	023fca8d 	.word	0x023fca8d
 23f9514:	00280073 	.word	0x00280073
 23f9518:	023fca8f 	.word	0x023fca8f
 23f951c:	00280113 	.word	0x00280113
 23f9520:	00a5006e 	.word	0x00a5006e
 23f9524:	023fcaa4 	.word	0x023fcaa4
 23f9528:	023fcb94 	.word	0x023fcb94
 23f952c:	00660019 	.word	0x00660019
 23f9530:	023fca91 	.word	0x023fca91
 23f9534:	1007ad64 	.word	0x1007ad64
 23f9538:	006600b9 	.word	0x006600b9
 23f953c:	023fca97 	.word	0x023fca97
 23f9540:	1007ad60 	.word	0x1007ad60
 23f9544:	00de0019 	.word	0x00de0019
 23f9548:	023fca9d 	.word	0x023fca9d
 23f954c:	1007addc 	.word	0x1007addc
 23f9550:	023fcaa3 	.word	0x023fcaa3
 23f9554:	023fcba0 	.word	0x023fcba0
 23f9558:	009b00af 	.word	0x009b00af
 23f955c:	023fcaa6 	.word	0x023fcaa6
 23f9560:	00b900af 	.word	0x00b900af
 23f9564:	023fcaab 	.word	0x023fcaab
 23f9568:	00d700af 	.word	0x00d700af
 23f956c:	023fcab0 	.word	0x023fcab0

023f9570 <setup>:
void setup() {
 23f9570:	b508      	push	{r3, lr}
  pinMode(A2, OUTPUT);
 23f9572:	2101      	movs	r1, #1
 23f9574:	200d      	movs	r0, #13
 23f9576:	f003 f899 	bl	23fc6ac <pinMode>
  pinMode(A5, OUTPUT);
 23f957a:	2101      	movs	r1, #1
 23f957c:	200e      	movs	r0, #14
 23f957e:	f003 f895 	bl	23fc6ac <pinMode>
  tft.init(320, 240);                                                 // Init ST7789 320x240 
 23f9582:	22f0      	movs	r2, #240	; 0xf0
 23f9584:	f44f 71a0 	mov.w	r1, #320	; 0x140
 23f9588:	481a      	ldr	r0, [pc, #104]	; (23f95f4 <setup+0x84>)
 23f958a:	f001 fdc9 	bl	23fb120 <_ZN15Adafruit_ST77894initEtt>
  tft.fillScreen(ST77XX_BLACK);                                       // creates black background in display
 23f958e:	2100      	movs	r1, #0
 23f9590:	4818      	ldr	r0, [pc, #96]	; (23f95f4 <setup+0x84>)
 23f9592:	f000 fea8 	bl	23fa2e6 <_ZN12Adafruit_GFX10fillScreenEt>
  tft.setRotation(3); 
 23f9596:	2103      	movs	r1, #3
 23f9598:	4816      	ldr	r0, [pc, #88]	; (23f95f4 <setup+0x84>)
 23f959a:	f001 fd7d 	bl	23fb098 <_ZN15Adafruit_ST778911setRotationEh>
  draw_screen();
 23f959e:	f7ff fef7 	bl	23f9390 <_Z11draw_screenv>
  Serial.begin(115200);
 23f95a2:	f002 ff3b 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f95a6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 23f95aa:	f002 ff2b 	bl	23fc404 <_ZN9USBSerial5beginEl>
  Serial.println(F("ACS37800 Example"));
 23f95ae:	f002 ff35 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f95b2:	4911      	ldr	r1, [pc, #68]	; (23f95f8 <setup+0x88>)
 23f95b4:	f002 fc97 	bl	23fbee6 <_ZN5Print7printlnEPK19__FlashStringHelper>
  Wire.begin();
 23f95b8:	f003 f8be 	bl	23fc738 <_Z19__fetch_global_Wirev>
 23f95bc:	f002 fada 	bl	23fbb74 <_ZN7TwoWire5beginEv>
  if (mySensor.begin() == false)
 23f95c0:	f003 f8ba 	bl	23fc738 <_Z19__fetch_global_Wirev>
 23f95c4:	2160      	movs	r1, #96	; 0x60
 23f95c6:	4602      	mov	r2, r0
 23f95c8:	480c      	ldr	r0, [pc, #48]	; (23f95fc <setup+0x8c>)
 23f95ca:	f000 fb5f 	bl	23f9c8c <_ZN8ACS378005beginEhR7TwoWire>
 23f95ce:	b928      	cbnz	r0, 23f95dc <setup+0x6c>
    Serial.print(F("ACS37800 not detected. Check connections and I2C address. Freezing..."));
 23f95d0:	f002 ff24 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f95d4:	490a      	ldr	r1, [pc, #40]	; (23f9600 <setup+0x90>)
 23f95d6:	f002 fc6c 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    while (1)
 23f95da:	e7fe      	b.n	23f95da <setup+0x6a>
  mySensor.setBypassNenable(false, false); // Disable bypass_n in shadow memory and eeprom
 23f95dc:	2200      	movs	r2, #0
 23f95de:	4807      	ldr	r0, [pc, #28]	; (23f95fc <setup+0x8c>)
 23f95e0:	4611      	mov	r1, r2
 23f95e2:	f000 fa89 	bl	23f9af8 <_ZN8ACS3780016setBypassNenableEbb>
}
 23f95e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mySensor.setDividerRes(4000000); // Comment this line if you are using GND to measure the 'low' side of the AC voltage
 23f95ea:	ed9f 0a06 	vldr	s0, [pc, #24]	; 23f9604 <setup+0x94>
 23f95ee:	4803      	ldr	r0, [pc, #12]	; (23f95fc <setup+0x8c>)
 23f95f0:	f000 bd92 	b.w	23fa118 <_ZN8ACS3780013setDividerResEf>
 23f95f4:	1007ae2c 	.word	0x1007ae2c
 23f95f8:	023fcab6 	.word	0x023fcab6
 23f95fc:	1007ade4 	.word	0x1007ade4
 23f9600:	023fcac7 	.word	0x023fcac7
 23f9604:	4a742400 	.word	0x4a742400

023f9608 <_Z12print_valuesv>:

  void print_values() {
 23f9608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   
  tft.setFont(&FreeSansBold12pt7b);
 23f960c:	4c55      	ldr	r4, [pc, #340]	; (23f9764 <_Z12print_valuesv+0x15c>)
 23f960e:	4956      	ldr	r1, [pc, #344]	; (23f9768 <_Z12print_valuesv+0x160>)
 23f9610:	4620      	mov	r0, r4
 23f9612:	f001 f912 	bl	23fa83a <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  tft.setTextSize(1);
 23f9616:	4620      	mov	r0, r4
 23f9618:	2101      	movs	r1, #1
 23f961a:	f001 f908 	bl	23fa82e <_ZN12Adafruit_GFX11setTextSizeEh>
  void setTextWrap(boolean w) { wrap = w; }
 23f961e:	2600      	movs	r6, #0
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23f9620:	f04f 131f 	mov.w	r3, #2031647	; 0x1f001f
  tft.setTextWrap(false);
  
  tft.setCursor(15, 40);
  tft.setTextColor(ST77XX_BLUE);
  tft.println(prev_volts);
 23f9624:	4f51      	ldr	r7, [pc, #324]	; (23f976c <_Z12print_valuesv+0x164>)
 23f9626:	4d52      	ldr	r5, [pc, #328]	; (23f9770 <_Z12print_valuesv+0x168>)
 23f9628:	ed97 0a00 	vldr	s0, [r7]
 23f962c:	2102      	movs	r1, #2
 23f962e:	4620      	mov	r0, r4
 23f9630:	e9c4 5304 	strd	r5, r3, [r4, #16]
  void setTextWrap(boolean w) { wrap = w; }
 23f9634:	76e6      	strb	r6, [r4, #27]
 23f9636:	f002 fd59 	bl	23fc0ec <_ZN5Print7printlnEfi>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23f963a:	6125      	str	r5, [r4, #16]
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23f963c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  tft.setCursor(15, 40);
  tft.setTextColor(ST77XX_WHITE);
  tft.println(volts,2 );
 23f9640:	f8df 8154 	ldr.w	r8, [pc, #340]	; 23f9798 <_Z12print_valuesv+0x190>
 23f9644:	2102      	movs	r1, #2
 23f9646:	ed98 0a00 	vldr	s0, [r8]
 23f964a:	4620      	mov	r0, r4
 23f964c:	6165      	str	r5, [r4, #20]
 23f964e:	f002 fd4d 	bl	23fc0ec <_ZN5Print7printlnEfi>

  prev_volts = volts;
 23f9652:	f8d8 3000 	ldr.w	r3, [r8]
 23f9656:	f8df 8144 	ldr.w	r8, [pc, #324]	; 23f979c <_Z12print_valuesv+0x194>
 23f965a:	603b      	str	r3, [r7, #0]
 23f965c:	f04f 23f8 	mov.w	r3, #4160813056	; 0xf800f800
  
  tft.setCursor(175, 40);
  tft.setTextColor(ST77XX_RED);
  tft.println(prev_amps);
 23f9660:	4f44      	ldr	r7, [pc, #272]	; (23f9774 <_Z12print_valuesv+0x16c>)
 23f9662:	2102      	movs	r1, #2
 23f9664:	ed97 0a00 	vldr	s0, [r7]
 23f9668:	4620      	mov	r0, r4
 23f966a:	e9c4 8304 	strd	r8, r3, [r4, #16]
 23f966e:	f002 fd3d 	bl	23fc0ec <_ZN5Print7printlnEfi>
 23f9672:	e9c4 8504 	strd	r8, r5, [r4, #16]
  tft.setCursor(175, 40); 
  tft.setTextColor(ST77XX_WHITE);
  tft.println(amps, 2); 
 23f9676:	f8df 8128 	ldr.w	r8, [pc, #296]	; 23f97a0 <_Z12print_valuesv+0x198>
 23f967a:	2102      	movs	r1, #2
 23f967c:	ed98 0a00 	vldr	s0, [r8]
 23f9680:	4620      	mov	r0, r4
 23f9682:	f002 fd33 	bl	23fc0ec <_ZN5Print7printlnEfi>

  prev_amps = amps;
 23f9686:	f8d8 3000 	ldr.w	r3, [r8]
 23f968a:	f8df 8118 	ldr.w	r8, [pc, #280]	; 23f97a4 <_Z12print_valuesv+0x19c>
 23f968e:	603b      	str	r3, [r7, #0]

  tft.setCursor(15, 165);
  tft.setTextColor(ST77XX_GREEN);
  tft.println(prev_papparent);
 23f9690:	4f39      	ldr	r7, [pc, #228]	; (23f9778 <_Z12print_valuesv+0x170>)
 23f9692:	4b3a      	ldr	r3, [pc, #232]	; (23f977c <_Z12print_valuesv+0x174>)
 23f9694:	ed97 0a00 	vldr	s0, [r7]
 23f9698:	2102      	movs	r1, #2
 23f969a:	4620      	mov	r0, r4
 23f969c:	e9c4 8304 	strd	r8, r3, [r4, #16]
 23f96a0:	f002 fd24 	bl	23fc0ec <_ZN5Print7printlnEfi>
 23f96a4:	e9c4 8504 	strd	r8, r5, [r4, #16]
  tft.setCursor(15, 165);
  tft.setTextColor(ST77XX_WHITE);
  tft.println(papparent, 2);
 23f96a8:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 23f97a8 <_Z12print_valuesv+0x1a0>
 23f96ac:	2102      	movs	r1, #2
 23f96ae:	ed98 0a00 	vldr	s0, [r8]
 23f96b2:	4620      	mov	r0, r4
 23f96b4:	f002 fd1a 	bl	23fc0ec <_ZN5Print7printlnEfi>
  
  prev_papparent = papparent;
 23f96b8:	f8d8 3000 	ldr.w	r3, [r8]

  tft.setFont(&FreeSans12pt7b);
 23f96bc:	4620      	mov	r0, r4
  prev_papparent = papparent;
 23f96be:	603b      	str	r3, [r7, #0]
  tft.setFont(&FreeSans12pt7b);
 23f96c0:	492f      	ldr	r1, [pc, #188]	; (23f9780 <_Z12print_valuesv+0x178>)
  tft.setTextSize(1); 
  
  tft.setTextColor(ST77XX_WHITE);
  tft.setCursor(250, 155);
  tft.println(prev_pfactor,3); 
 23f96c2:	4f30      	ldr	r7, [pc, #192]	; (23f9784 <_Z12print_valuesv+0x17c>)
  tft.setFont(&FreeSans12pt7b);
 23f96c4:	f001 f8b9 	bl	23fa83a <_ZN12Adafruit_GFX7setFontEPK7GFXfont>
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23f96c8:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 23f97ac <_Z12print_valuesv+0x1a4>
  tft.setTextSize(1); 
 23f96cc:	4620      	mov	r0, r4
 23f96ce:	2101      	movs	r1, #1
 23f96d0:	f001 f8ad 	bl	23fa82e <_ZN12Adafruit_GFX11setTextSizeEh>
  tft.println(prev_pfactor,3); 
 23f96d4:	ed97 0a00 	vldr	s0, [r7]
 23f96d8:	2103      	movs	r1, #3
 23f96da:	4620      	mov	r0, r4
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23f96dc:	e9c4 8504 	strd	r8, r5, [r4, #16]
 23f96e0:	f002 fd04 	bl	23fc0ec <_ZN5Print7printlnEfi>
 23f96e4:	e9c4 8604 	strd	r8, r6, [r4, #16]
  tft.setTextColor(ST77XX_BLACK);
  tft.setCursor(250, 155);
  tft.println(pfactor, 3);
 23f96e8:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 23f97b0 <_Z12print_valuesv+0x1a8>
 23f96ec:	2103      	movs	r1, #3
 23f96ee:	ed98 0a00 	vldr	s0, [r8]
 23f96f2:	4620      	mov	r0, r4
 23f96f4:	f002 fcfa 	bl	23fc0ec <_ZN5Print7printlnEfi>
  prev_pfactor = pfactor;
 23f96f8:	f8d8 3000 	ldr.w	r3, [r8]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23f96fc:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 23f97b4 <_Z12print_valuesv+0x1ac>
 23f9700:	603b      	str	r3, [r7, #0]

  
  tft.setTextColor(ST77XX_WHITE);
  tft.setCursor(250, 185);
  tft.println(prev_pactive); 
 23f9702:	4f21      	ldr	r7, [pc, #132]	; (23f9788 <_Z12print_valuesv+0x180>)
 23f9704:	2102      	movs	r1, #2
 23f9706:	ed97 0a00 	vldr	s0, [r7]
 23f970a:	4620      	mov	r0, r4
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23f970c:	e9c4 8504 	strd	r8, r5, [r4, #16]
 23f9710:	f002 fcec 	bl	23fc0ec <_ZN5Print7printlnEfi>
 23f9714:	e9c4 8604 	strd	r8, r6, [r4, #16]
  tft.setTextColor(ST77XX_BLACK);
  tft.setCursor(250, 185);
  tft.println(pactive, 2); 
 23f9718:	f8df 809c 	ldr.w	r8, [pc, #156]	; 23f97b8 <_Z12print_valuesv+0x1b0>
 23f971c:	2102      	movs	r1, #2
 23f971e:	ed98 0a00 	vldr	s0, [r8]
 23f9722:	4620      	mov	r0, r4
 23f9724:	f002 fce2 	bl	23fc0ec <_ZN5Print7printlnEfi>

  prev_pactive = pactive;
 23f9728:	f8d8 3000 	ldr.w	r3, [r8]

  tft.setTextColor(ST77XX_WHITE);
  tft.setCursor(250, 215);
  tft.println(prev_preactive); 
 23f972c:	2102      	movs	r1, #2
  prev_pactive = pactive;
 23f972e:	603b      	str	r3, [r7, #0]
  void setCursor(int16_t x, int16_t y) { cursor_x = x; cursor_y = y; }
 23f9730:	4f16      	ldr	r7, [pc, #88]	; (23f978c <_Z12print_valuesv+0x184>)
  tft.println(prev_preactive); 
 23f9732:	4620      	mov	r0, r4
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
 23f9734:	e9c4 7504 	strd	r7, r5, [r4, #16]
 23f9738:	4d15      	ldr	r5, [pc, #84]	; (23f9790 <_Z12print_valuesv+0x188>)
 23f973a:	ed95 0a00 	vldr	s0, [r5]
 23f973e:	f002 fcd5 	bl	23fc0ec <_ZN5Print7printlnEfi>
 23f9742:	e9c4 7604 	strd	r7, r6, [r4, #16]
  tft.setTextColor(ST77XX_BLACK);
  tft.setCursor(250, 215);
  tft.println(preactive, 2); 
 23f9746:	4e13      	ldr	r6, [pc, #76]	; (23f9794 <_Z12print_valuesv+0x18c>)
 23f9748:	4620      	mov	r0, r4
 23f974a:	ed96 0a00 	vldr	s0, [r6]
 23f974e:	2102      	movs	r1, #2
 23f9750:	f002 fccc 	bl	23fc0ec <_ZN5Print7printlnEfi>

  prev_preactive = preactive;
 23f9754:	6833      	ldr	r3, [r6, #0]

  delay(50);
 23f9756:	2032      	movs	r0, #50	; 0x32
  prev_preactive = preactive;
 23f9758:	602b      	str	r3, [r5, #0]
}
 23f975a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  delay(50);
 23f975e:	f002 b975 	b.w	23fba4c <delay>
 23f9762:	bf00      	nop
 23f9764:	1007ae2c 	.word	0x1007ae2c
 23f9768:	023fcbb8 	.word	0x023fcbb8
 23f976c:	1007ae24 	.word	0x1007ae24
 23f9770:	0028000f 	.word	0x0028000f
 23f9774:	1007ae10 	.word	0x1007ae10
 23f9778:	1007ae18 	.word	0x1007ae18
 23f977c:	07e007e0 	.word	0x07e007e0
 23f9780:	023fcba0 	.word	0x023fcba0
 23f9784:	1007ae1c 	.word	0x1007ae1c
 23f9788:	1007ae14 	.word	0x1007ae14
 23f978c:	00d700fa 	.word	0x00d700fa
 23f9790:	1007ae20 	.word	0x1007ae20
 23f9794:	1007ae0c 	.word	0x1007ae0c
 23f9798:	1007ae7c 	.word	0x1007ae7c
 23f979c:	002800af 	.word	0x002800af
 23f97a0:	1007ade0 	.word	0x1007ade0
 23f97a4:	00a5000f 	.word	0x00a5000f
 23f97a8:	1007ae04 	.word	0x1007ae04
 23f97ac:	009b00fa 	.word	0x009b00fa
 23f97b0:	1007ae08 	.word	0x1007ae08
 23f97b4:	00b900fa 	.word	0x00b900fa
 23f97b8:	1007ae00 	.word	0x1007ae00

023f97bc <_Z7measurev>:

void measure() {
 23f97bc:	b530      	push	{r4, r5, lr}

  mySensor.readRMS(&volts, &amps);                                            // Read the RMS voltage and current
 23f97be:	4c42      	ldr	r4, [pc, #264]	; (23f98c8 <_Z7measurev+0x10c>)
 23f97c0:	4d42      	ldr	r5, [pc, #264]	; (23f98cc <_Z7measurev+0x110>)
void measure() {
 23f97c2:	b085      	sub	sp, #20
  mySensor.readRMS(&volts, &amps);                                            // Read the RMS voltage and current
 23f97c4:	4622      	mov	r2, r4
 23f97c6:	4629      	mov	r1, r5
 23f97c8:	4841      	ldr	r0, [pc, #260]	; (23f98d0 <_Z7measurev+0x114>)
 23f97ca:	f000 fa87 	bl	23f9cdc <_ZN8ACS378007readRMSEPfS0_>
  Serial.print(F("Volts: "));
 23f97ce:	f002 fe25 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f97d2:	4940      	ldr	r1, [pc, #256]	; (23f98d4 <_Z7measurev+0x118>)
 23f97d4:	f002 fb6d 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(volts, 2);
 23f97d8:	f002 fe20 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f97dc:	ed95 0a00 	vldr	s0, [r5]
 23f97e0:	2102      	movs	r1, #2
 23f97e2:	f002 fc69 	bl	23fc0b8 <_ZN5Print5printEfi>
  Serial.print(F(" Amps: "));
 23f97e6:	f002 fe19 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f97ea:	493b      	ldr	r1, [pc, #236]	; (23f98d8 <_Z7measurev+0x11c>)
 23f97ec:	f002 fb61 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(amps, 2);
  
  mySensor.readPowerActiveReactive(&pactive, &preactive);                    // Read the active and reactive power
 23f97f0:	4d3a      	ldr	r5, [pc, #232]	; (23f98dc <_Z7measurev+0x120>)
  Serial.println(amps, 2);
 23f97f2:	f002 fe13 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f97f6:	ed94 0a00 	vldr	s0, [r4]
  mySensor.readPowerActiveReactive(&pactive, &preactive);                    // Read the active and reactive power
 23f97fa:	4c39      	ldr	r4, [pc, #228]	; (23f98e0 <_Z7measurev+0x124>)
  Serial.println(amps, 2);
 23f97fc:	2102      	movs	r1, #2
 23f97fe:	f002 fc75 	bl	23fc0ec <_ZN5Print7printlnEfi>
  mySensor.readPowerActiveReactive(&pactive, &preactive);                    // Read the active and reactive power
 23f9802:	4622      	mov	r2, r4
 23f9804:	4629      	mov	r1, r5
 23f9806:	4832      	ldr	r0, [pc, #200]	; (23f98d0 <_Z7measurev+0x114>)
 23f9808:	f000 fb0a 	bl	23f9e20 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_>
  Serial.print(F("Power: Active (W): "));
 23f980c:	f002 fe06 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f9810:	4934      	ldr	r1, [pc, #208]	; (23f98e4 <_Z7measurev+0x128>)
 23f9812:	f002 fb4e 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(pactive, 2);
 23f9816:	f002 fe01 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f981a:	ed95 0a00 	vldr	s0, [r5]
 23f981e:	2102      	movs	r1, #2
 23f9820:	f002 fc4a 	bl	23fc0b8 <_ZN5Print5printEfi>
  Serial.print(F(" Reactive (VAR): "));
 23f9824:	f002 fdfa 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f9828:	492f      	ldr	r1, [pc, #188]	; (23f98e8 <_Z7measurev+0x12c>)
 23f982a:	f002 fb42 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(preactive, 2);
 23f982e:	f002 fdf5 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f9832:	ed94 0a00 	vldr	s0, [r4]
 23f9836:	2102      	movs	r1, #2
 23f9838:	f002 fc58 	bl	23fc0ec <_ZN5Print7printlnEfi>
  
  bool posangle = 0;
 23f983c:	2300      	movs	r3, #0
  bool pospf = 0;
  
  mySensor.readPowerFactor(&papparent, &pfactor, &posangle, &pospf);        // Read the apparent power and the power factor
 23f983e:	4c2b      	ldr	r4, [pc, #172]	; (23f98ec <_Z7measurev+0x130>)
 23f9840:	4d2b      	ldr	r5, [pc, #172]	; (23f98f0 <_Z7measurev+0x134>)
  bool posangle = 0;
 23f9842:	f88d 300e 	strb.w	r3, [sp, #14]
  bool pospf = 0;
 23f9846:	f88d 300f 	strb.w	r3, [sp, #15]
  mySensor.readPowerFactor(&papparent, &pfactor, &posangle, &pospf);        // Read the apparent power and the power factor
 23f984a:	f10d 030f 	add.w	r3, sp, #15
 23f984e:	4622      	mov	r2, r4
 23f9850:	4629      	mov	r1, r5
 23f9852:	9300      	str	r3, [sp, #0]
 23f9854:	481e      	ldr	r0, [pc, #120]	; (23f98d0 <_Z7measurev+0x114>)
 23f9856:	f10d 030e 	add.w	r3, sp, #14
 23f985a:	f000 fbb1 	bl	23f9fc0 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_>
  Serial.print(F("Power: Apparent (VA): "));
 23f985e:	f002 fddd 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f9862:	4924      	ldr	r1, [pc, #144]	; (23f98f4 <_Z7measurev+0x138>)
 23f9864:	f002 fb25 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(papparent, 2);
 23f9868:	f002 fdd8 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f986c:	ed95 0a00 	vldr	s0, [r5]
 23f9870:	2102      	movs	r1, #2
 23f9872:	f002 fc21 	bl	23fc0b8 <_ZN5Print5printEfi>
  Serial.print(F(" Power Factor: "));
 23f9876:	f002 fdd1 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f987a:	491f      	ldr	r1, [pc, #124]	; (23f98f8 <_Z7measurev+0x13c>)
 23f987c:	f002 fb19 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(pfactor, 3);
 23f9880:	f002 fdcc 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f9884:	2103      	movs	r1, #3
 23f9886:	ed94 0a00 	vldr	s0, [r4]
 23f988a:	f002 fc15 	bl	23fc0b8 <_ZN5Print5printEfi>
    if (posangle)
 23f988e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 23f9892:	b18b      	cbz	r3, 23f98b8 <_Z7measurev+0xfc>
      Serial.print(F(" Lagging"));
 23f9894:	f002 fdc2 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f9898:	4918      	ldr	r1, [pc, #96]	; (23f98fc <_Z7measurev+0x140>)
    else
      Serial.print(F(" Leading"));
 23f989a:	f002 fb0a 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    if (pospf)
 23f989e:	f89d 300f 	ldrb.w	r3, [sp, #15]
 23f98a2:	b16b      	cbz	r3, 23f98c0 <_Z7measurev+0x104>
      Serial.println(F(" Consumed"));
 23f98a4:	f002 fdba 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f98a8:	4915      	ldr	r1, [pc, #84]	; (23f9900 <_Z7measurev+0x144>)
    else
      Serial.println(F(" Generated"));
 23f98aa:	f002 fb1c 	bl	23fbee6 <_ZN5Print7printlnEPK19__FlashStringHelper>

  delay(250);
 23f98ae:	20fa      	movs	r0, #250	; 0xfa
 23f98b0:	f002 f8cc 	bl	23fba4c <delay>

}
 23f98b4:	b005      	add	sp, #20
 23f98b6:	bd30      	pop	{r4, r5, pc}
      Serial.print(F(" Leading"));
 23f98b8:	f002 fdb0 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f98bc:	4911      	ldr	r1, [pc, #68]	; (23f9904 <_Z7measurev+0x148>)
 23f98be:	e7ec      	b.n	23f989a <_Z7measurev+0xde>
      Serial.println(F(" Generated"));
 23f98c0:	f002 fdac 	bl	23fc41c <_Z16_fetch_usbserialv>
 23f98c4:	4910      	ldr	r1, [pc, #64]	; (23f9908 <_Z7measurev+0x14c>)
 23f98c6:	e7f0      	b.n	23f98aa <_Z7measurev+0xee>
 23f98c8:	1007ade0 	.word	0x1007ade0
 23f98cc:	1007ae7c 	.word	0x1007ae7c
 23f98d0:	1007ade4 	.word	0x1007ade4
 23f98d4:	023fcb0d 	.word	0x023fcb0d
 23f98d8:	023fcb15 	.word	0x023fcb15
 23f98dc:	1007ae00 	.word	0x1007ae00
 23f98e0:	1007ae0c 	.word	0x1007ae0c
 23f98e4:	023fcb1d 	.word	0x023fcb1d
 23f98e8:	023fcb31 	.word	0x023fcb31
 23f98ec:	1007ae08 	.word	0x1007ae08
 23f98f0:	1007ae04 	.word	0x1007ae04
 23f98f4:	023fcb43 	.word	0x023fcb43
 23f98f8:	023fcb5a 	.word	0x023fcb5a
 23f98fc:	023fcb6a 	.word	0x023fcb6a
 23f9900:	023fcb7c 	.word	0x023fcb7c
 23f9904:	023fcb73 	.word	0x023fcb73
 23f9908:	023fcb86 	.word	0x023fcb86

023f990c <loop>:

void loop() {
 23f990c:	b508      	push	{r3, lr}

  LEDs();
 23f990e:	f7ff fced 	bl	23f92ec <_Z4LEDsv>
  measure();
 23f9912:	f7ff ff53 	bl	23f97bc <_Z7measurev>
  print_values();

}
 23f9916:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  print_values();
 23f991a:	f7ff be75 	b.w	23f9608 <_Z12print_valuesv>
	...

023f9920 <_GLOBAL__sub_I_tft>:
}
 23f9920:	b508      	push	{r3, lr}
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);     // Hardware SPI
 23f9922:	2205      	movs	r2, #5
 23f9924:	2306      	movs	r3, #6
 23f9926:	2112      	movs	r1, #18
 23f9928:	480a      	ldr	r0, [pc, #40]	; (23f9954 <_GLOBAL__sub_I_tft+0x34>)
 23f992a:	f001 fbef 	bl	23fb10c <_ZN15Adafruit_ST7789C1Eaaa>
ACS37800 mySensor;                                                  //Create an object of the ACS37800 class
 23f992e:	480a      	ldr	r0, [pc, #40]	; (23f9958 <_GLOBAL__sub_I_tft+0x38>)
 23f9930:	f000 f840 	bl	23f99b4 <_ZN8ACS37800C1Ev>
float W_Set = ((OV_Set * OC_Set) / 1000);                             // Set Over Current limit
 23f9934:	4b09      	ldr	r3, [pc, #36]	; (23f995c <_GLOBAL__sub_I_tft+0x3c>)
 23f9936:	eddf 6a0a 	vldr	s13, [pc, #40]	; 23f9960 <_GLOBAL__sub_I_tft+0x40>
 23f993a:	edd3 7a00 	vldr	s15, [r3]
 23f993e:	4b09      	ldr	r3, [pc, #36]	; (23f9964 <_GLOBAL__sub_I_tft+0x44>)
 23f9940:	ed93 7a00 	vldr	s14, [r3]
 23f9944:	ee67 7a87 	vmul.f32	s15, s15, s14
 23f9948:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 23f994c:	4b06      	ldr	r3, [pc, #24]	; (23f9968 <_GLOBAL__sub_I_tft+0x48>)
 23f994e:	ed83 7a00 	vstr	s14, [r3]
}
 23f9952:	bd08      	pop	{r3, pc}
 23f9954:	1007ae2c 	.word	0x1007ae2c
 23f9958:	1007ade4 	.word	0x1007ade4
 23f995c:	1007ad64 	.word	0x1007ad64
 23f9960:	447a0000 	.word	0x447a0000
 23f9964:	1007ad60 	.word	0x1007ad60
 23f9968:	1007addc 	.word	0x1007addc

023f996c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
 23f996c:	b510      	push	{r4, lr}
 23f996e:	4604      	mov	r4, r0

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
 23f9970:	b942      	cbnz	r2, 23f9984 <_ZN5Print7printlnImLi0EEEjT_i.isra.0+0x18>
        return write(n);
 23f9972:	6802      	ldr	r2, [r0, #0]
 23f9974:	b2c9      	uxtb	r1, r1
 23f9976:	6892      	ldr	r2, [r2, #8]
 23f9978:	4790      	blx	r2
        n += println();
 23f997a:	4620      	mov	r0, r4
    }
 23f997c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
 23f9980:	f002 ba9b 	b.w	23fbeba <_ZN5Print7printlnEv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23f9984:	b2d2      	uxtb	r2, r2
 23f9986:	f002 fab0 	bl	23fbeea <_ZN5Print11printNumberEmh>
 23f998a:	e7f6      	b.n	23f997a <_ZN5Print7printlnImLi0EEEjT_i.isra.0+0xe>

023f998c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
 23f998c:	b510      	push	{r4, lr}
 23f998e:	4604      	mov	r4, r0
    if (base == 0) {
 23f9990:	b93a      	cbnz	r2, 23f99a2 <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0+0x16>
        return write(n);
 23f9992:	6803      	ldr	r3, [r0, #0]
 23f9994:	689b      	ldr	r3, [r3, #8]
 23f9996:	4798      	blx	r3
        n += println();
 23f9998:	4620      	mov	r0, r4
    }
 23f999a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
 23f999e:	f002 ba8c 	b.w	23fbeba <_ZN5Print7printlnEv>
        return printNumber(val, base) + t;
 23f99a2:	b2d2      	uxtb	r2, r2
 23f99a4:	f002 faa1 	bl	23fbeea <_ZN5Print11printNumberEmh>
 23f99a8:	e7f6      	b.n	23f9998 <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0+0xc>

023f99aa <_ZN7TwoWire5writeEm.isra.0>:
  void onRequest(void (*)(void));

  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
 23f99aa:	6803      	ldr	r3, [r0, #0]
 23f99ac:	b2c9      	uxtb	r1, r1
 23f99ae:	689b      	ldr	r3, [r3, #8]
 23f99b0:	4718      	bx	r3
	...

023f99b4 <_ZN8ACS37800C1Ev>:
*/

#include "SparkFun_ACS37800_Arduino_Library.h"

//Constructor
ACS37800::ACS37800()
 23f99b4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 23f99b8:	8102      	strh	r2, [r0, #8]
 23f99ba:	4a03      	ldr	r2, [pc, #12]	; (23f99c8 <_ZN8ACS37800C1Ev+0x14>)
 23f99bc:	60c2      	str	r2, [r0, #12]
 23f99be:	4a03      	ldr	r2, [pc, #12]	; (23f99cc <_ZN8ACS37800C1Ev+0x18>)
 23f99c0:	6102      	str	r2, [r0, #16]
 23f99c2:	4a03      	ldr	r2, [pc, #12]	; (23f99d0 <_ZN8ACS37800C1Ev+0x1c>)
 23f99c4:	6142      	str	r2, [r0, #20]
{
}
 23f99c6:	4770      	bx	lr
 23f99c8:	4528c000 	.word	0x4528c000
 23f99cc:	4a742400 	.word	0x4a742400
 23f99d0:	41f00000 	.word	0x41f00000

023f99d4 <_ZN8ACS3780012readRegisterEPmh>:
	_printDebug = true;
}

//Read a register's contents. Contents are returned in data.
ACS37800ERR ACS37800::readRegister(uint32_t *data, uint8_t address)
{
 23f99d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f99d8:	4604      	mov	r4, r0
 23f99da:	4615      	mov	r5, r2
 23f99dc:	460f      	mov	r7, r1
  _i2cPort->beginTransmission(_ACS37800Address);
 23f99de:	7a41      	ldrb	r1, [r0, #9]
 23f99e0:	6800      	ldr	r0, [r0, #0]
 23f99e2:	f002 f8f9 	bl	23fbbd8 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(address); //Write the register address
 23f99e6:	6820      	ldr	r0, [r4, #0]
 23f99e8:	4629      	mov	r1, r5
 23f99ea:	6803      	ldr	r3, [r0, #0]
 23f99ec:	689b      	ldr	r3, [r3, #8]
 23f99ee:	4798      	blx	r3
  uint8_t i2cResult = _i2cPort->endTransmission(false); //Send restart. Don't release the bus.
 23f99f0:	2100      	movs	r1, #0
 23f99f2:	6820      	ldr	r0, [r4, #0]
 23f99f4:	f002 f8f4 	bl	23fbbe0 <_ZN7TwoWire15endTransmissionEh>

  if (i2cResult != 0)
 23f99f8:	4606      	mov	r6, r0
 23f99fa:	b198      	cbz	r0, 23f9a24 <_ZN8ACS3780012readRegisterEPmh+0x50>
  {
    if (_printDebug == true)
 23f99fc:	7a23      	ldrb	r3, [r4, #8]
 23f99fe:	b91b      	cbnz	r3, 23f9a08 <_ZN8ACS3780012readRegisterEPmh+0x34>
    {
      _debugPort->print(F("readRegister: endTransmission returned: "));
      _debugPort->println(i2cResult);
    }
    return (ACS37800_ERR_I2C_ERROR); // Bail
 23f9a00:	2601      	movs	r6, #1
  readData |= ((uint32_t)_i2cPort->read()) << 16;
  readData |= ((uint32_t)_i2cPort->read()) << 24; //store MSB

  *data = readData; //Return the data
  return (ACS37800_SUCCESS);
}
 23f9a02:	4630      	mov	r0, r6
 23f9a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      _debugPort->print(F("readRegister: endTransmission returned: "));
 23f9a08:	491d      	ldr	r1, [pc, #116]	; (23f9a80 <_ZN8ACS3780012readRegisterEPmh+0xac>)
 23f9a0a:	6860      	ldr	r0, [r4, #4]
 23f9a0c:	f002 fa51 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
 23f9a10:	220a      	movs	r2, #10
 23f9a12:	4631      	mov	r1, r6
      _debugPort->println(i2cResult);
 23f9a14:	6864      	ldr	r4, [r4, #4]
 23f9a16:	4620      	mov	r0, r4
 23f9a18:	f002 fa67 	bl	23fbeea <_ZN5Print11printNumberEmh>
        n += println();
 23f9a1c:	4620      	mov	r0, r4
 23f9a1e:	f002 fa4c 	bl	23fbeba <_ZN5Print7printlnEv>
 23f9a22:	e7ed      	b.n	23f9a00 <_ZN8ACS3780012readRegisterEPmh+0x2c>
  uint8_t toRead = _i2cPort->requestFrom(_ACS37800Address, (uint8_t)4);
 23f9a24:	2204      	movs	r2, #4
 23f9a26:	7a61      	ldrb	r1, [r4, #9]
 23f9a28:	6820      	ldr	r0, [r4, #0]
 23f9a2a:	f002 f8d2 	bl	23fbbd2 <_ZN7TwoWire11requestFromEhj>
  if (toRead != 4)
 23f9a2e:	b2c5      	uxtb	r5, r0
 23f9a30:	2d04      	cmp	r5, #4
 23f9a32:	d00a      	beq.n	23f9a4a <_ZN8ACS3780012readRegisterEPmh+0x76>
    if (_printDebug == true)
 23f9a34:	7a23      	ldrb	r3, [r4, #8]
 23f9a36:	2b00      	cmp	r3, #0
 23f9a38:	d0e2      	beq.n	23f9a00 <_ZN8ACS3780012readRegisterEPmh+0x2c>
      _debugPort->print(F("readRegister: requestFrom returned: "));
 23f9a3a:	4912      	ldr	r1, [pc, #72]	; (23f9a84 <_ZN8ACS3780012readRegisterEPmh+0xb0>)
 23f9a3c:	6860      	ldr	r0, [r4, #4]
 23f9a3e:	f002 fa38 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
        return printNumber(val, base) + t;
 23f9a42:	220a      	movs	r2, #10
 23f9a44:	4629      	mov	r1, r5
      _debugPort->println(toRead);
 23f9a46:	6864      	ldr	r4, [r4, #4]
size_t Print::print(T n, int base)
 23f9a48:	e7e5      	b.n	23f9a16 <_ZN8ACS3780012readRegisterEPmh+0x42>
  uint32_t readData = _i2cPort->read(); //store LSB
 23f9a4a:	6820      	ldr	r0, [r4, #0]
 23f9a4c:	6803      	ldr	r3, [r0, #0]
 23f9a4e:	695b      	ldr	r3, [r3, #20]
 23f9a50:	4798      	blx	r3
 23f9a52:	4680      	mov	r8, r0
  readData |= ((uint32_t)_i2cPort->read()) << 8;
 23f9a54:	6820      	ldr	r0, [r4, #0]
 23f9a56:	6803      	ldr	r3, [r0, #0]
 23f9a58:	695b      	ldr	r3, [r3, #20]
 23f9a5a:	4798      	blx	r3
 23f9a5c:	4605      	mov	r5, r0
  readData |= ((uint32_t)_i2cPort->read()) << 16;
 23f9a5e:	6820      	ldr	r0, [r4, #0]
 23f9a60:	6803      	ldr	r3, [r0, #0]
 23f9a62:	695b      	ldr	r3, [r3, #20]
 23f9a64:	4798      	blx	r3
 23f9a66:	0402      	lsls	r2, r0, #16
  readData |= ((uint32_t)_i2cPort->read()) << 24; //store MSB
 23f9a68:	6820      	ldr	r0, [r4, #0]
  readData |= ((uint32_t)_i2cPort->read()) << 16;
 23f9a6a:	ea42 2305 	orr.w	r3, r2, r5, lsl #8
 23f9a6e:	ea43 0508 	orr.w	r5, r3, r8
  readData |= ((uint32_t)_i2cPort->read()) << 24; //store MSB
 23f9a72:	6803      	ldr	r3, [r0, #0]
 23f9a74:	695b      	ldr	r3, [r3, #20]
 23f9a76:	4798      	blx	r3
 23f9a78:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
  *data = readData; //Return the data
 23f9a7c:	603d      	str	r5, [r7, #0]
  return (ACS37800_SUCCESS);
 23f9a7e:	e7c0      	b.n	23f9a02 <_ZN8ACS3780012readRegisterEPmh+0x2e>
 23f9a80:	023ff12c 	.word	0x023ff12c
 23f9a84:	023ff155 	.word	0x023ff155

023f9a88 <_ZN8ACS3780013writeRegisterEmh>:

//Write data to the selected register
ACS37800ERR ACS37800::writeRegister(uint32_t data, uint8_t address)
{
 23f9a88:	b570      	push	{r4, r5, r6, lr}
 23f9a8a:	4604      	mov	r4, r0
 23f9a8c:	4616      	mov	r6, r2
 23f9a8e:	460d      	mov	r5, r1
  //   _debugPort->print(data, HEX);
  //   _debugPort->print(F(" to address 0x"));
  //   _debugPort->println(address, HEX);
  // }

  _i2cPort->beginTransmission(_ACS37800Address);
 23f9a90:	7a41      	ldrb	r1, [r0, #9]
 23f9a92:	6800      	ldr	r0, [r0, #0]
 23f9a94:	f002 f8a0 	bl	23fbbd8 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(address); //Write the register address
 23f9a98:	6820      	ldr	r0, [r4, #0]
 23f9a9a:	4631      	mov	r1, r6
 23f9a9c:	6803      	ldr	r3, [r0, #0]
 23f9a9e:	689b      	ldr	r3, [r3, #8]
 23f9aa0:	4798      	blx	r3
  _i2cPort->write(data & 0xFF); //Write the data LSB first (little endian)
 23f9aa2:	b2e9      	uxtb	r1, r5
 23f9aa4:	6820      	ldr	r0, [r4, #0]
 23f9aa6:	f7ff ff80 	bl	23f99aa <_ZN7TwoWire5writeEm.isra.0>
  _i2cPort->write((data >> 8) & 0xFF);
 23f9aaa:	f3c5 2107 	ubfx	r1, r5, #8, #8
 23f9aae:	6820      	ldr	r0, [r4, #0]
 23f9ab0:	f7ff ff7b 	bl	23f99aa <_ZN7TwoWire5writeEm.isra.0>
  _i2cPort->write((data >> 16) & 0xFF);
 23f9ab4:	f3c5 4107 	ubfx	r1, r5, #16, #8
 23f9ab8:	6820      	ldr	r0, [r4, #0]
 23f9aba:	f7ff ff76 	bl	23f99aa <_ZN7TwoWire5writeEm.isra.0>
  _i2cPort->write((data >> 24) & 0xFF);
 23f9abe:	0e29      	lsrs	r1, r5, #24
 23f9ac0:	6820      	ldr	r0, [r4, #0]
 23f9ac2:	f7ff ff72 	bl	23f99aa <_ZN7TwoWire5writeEm.isra.0>
  uint8_t i2cResult = _i2cPort->endTransmission(); //Release the bus.
 23f9ac6:	6820      	ldr	r0, [r4, #0]
 23f9ac8:	f002 f88e 	bl	23fbbe8 <_ZN7TwoWire15endTransmissionEv>

  if (i2cResult != 0)
 23f9acc:	4605      	mov	r5, r0
 23f9ace:	b178      	cbz	r0, 23f9af0 <_ZN8ACS3780013writeRegisterEmh+0x68>
  {
    if (_printDebug == true)
 23f9ad0:	7a23      	ldrb	r3, [r4, #8]
 23f9ad2:	b163      	cbz	r3, 23f9aee <_ZN8ACS3780013writeRegisterEmh+0x66>
    {
      _debugPort->print(F("writeRegister: endTransmission returned: "));
 23f9ad4:	4907      	ldr	r1, [pc, #28]	; (23f9af4 <_ZN8ACS3780013writeRegisterEmh+0x6c>)
 23f9ad6:	6860      	ldr	r0, [r4, #4]
 23f9ad8:	f002 f9eb 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(i2cResult);
 23f9adc:	6864      	ldr	r4, [r4, #4]
        return printNumber(val, base) + t;
 23f9ade:	220a      	movs	r2, #10
 23f9ae0:	4629      	mov	r1, r5
 23f9ae2:	4620      	mov	r0, r4
 23f9ae4:	f002 fa01 	bl	23fbeea <_ZN5Print11printNumberEmh>
        n += println();
 23f9ae8:	4620      	mov	r0, r4
 23f9aea:	f002 f9e6 	bl	23fbeba <_ZN5Print7printlnEv>
    }
    return (ACS37800_ERR_I2C_ERROR); // Bail
 23f9aee:	2501      	movs	r5, #1
  }

  return (ACS37800_SUCCESS);
}
 23f9af0:	4628      	mov	r0, r5
 23f9af2:	bd70      	pop	{r4, r5, r6, pc}
 23f9af4:	023ff17a 	.word	0x023ff17a

023f9af8 <_ZN8ACS3780016setBypassNenableEbb>:
  return (error);
}

//Set/Clear the Bypass_N_Enable flag
ACS37800ERR ACS37800::setBypassNenable(bool bypass, bool _eeprom)
{
 23f9af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 23f9afa:	460e      	mov	r6, r1
 23f9afc:	4617      	mov	r7, r2
  ACS37800ERR error = writeRegister(ACS37800_CUSTOMER_ACCESS_CODE, ACS37800_REGISTER_VOLATILE_2F); // Set the customer access code
 23f9afe:	493e      	ldr	r1, [pc, #248]	; (23f9bf8 <_ZN8ACS3780016setBypassNenableEbb+0x100>)
 23f9b00:	222f      	movs	r2, #47	; 0x2f
{
 23f9b02:	4604      	mov	r4, r0
  ACS37800ERR error = writeRegister(ACS37800_CUSTOMER_ACCESS_CODE, ACS37800_REGISTER_VOLATILE_2F); // Set the customer access code
 23f9b04:	f7ff ffc0 	bl	23f9a88 <_ZN8ACS3780013writeRegisterEmh>

  if (error != ACS37800_SUCCESS)
 23f9b08:	4605      	mov	r5, r0
 23f9b0a:	b118      	cbz	r0, 23f9b14 <_ZN8ACS3780016setBypassNenableEbb+0x1c>

  error = writeRegister(0, ACS37800_REGISTER_VOLATILE_2F); // Clear the customer access code

  if (error != ACS37800_SUCCESS)
  {
    if (_printDebug == true)
 23f9b0c:	7a23      	ldrb	r3, [r4, #8]
 23f9b0e:	b19b      	cbz	r3, 23f9b38 <_ZN8ACS3780016setBypassNenableEbb+0x40>
    {
      _debugPort->print(F("setBypassNenable: writeRegister (2F) returned: "));
 23f9b10:	493a      	ldr	r1, [pc, #232]	; (23f9bfc <_ZN8ACS3780016setBypassNenableEbb+0x104>)
 23f9b12:	e009      	b.n	23f9b28 <_ZN8ACS3780016setBypassNenableEbb+0x30>
  error = readRegister(&store.data.all, ACS37800_REGISTER_SHADOW_1F); // Read register 1F
 23f9b14:	221f      	movs	r2, #31
 23f9b16:	4620      	mov	r0, r4
 23f9b18:	a901      	add	r1, sp, #4
 23f9b1a:	f7ff ff5b 	bl	23f99d4 <_ZN8ACS3780012readRegisterEPmh>
  if (error != ACS37800_SUCCESS)
 23f9b1e:	7a23      	ldrb	r3, [r4, #8]
 23f9b20:	4605      	mov	r5, r0
 23f9b22:	b160      	cbz	r0, 23f9b3e <_ZN8ACS3780016setBypassNenableEbb+0x46>
    if (_printDebug == true)
 23f9b24:	b143      	cbz	r3, 23f9b38 <_ZN8ACS3780016setBypassNenableEbb+0x40>
      _debugPort->print(F("setBypassNenable: readRegister (1F) returned: "));
 23f9b26:	4936      	ldr	r1, [pc, #216]	; (23f9c00 <_ZN8ACS3780016setBypassNenableEbb+0x108>)
 23f9b28:	6860      	ldr	r0, [r4, #4]
 23f9b2a:	f002 f9c2 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
 23f9b2e:	220a      	movs	r2, #10
 23f9b30:	4629      	mov	r1, r5
 23f9b32:	6860      	ldr	r0, [r4, #4]
 23f9b34:	f7ff ff2a 	bl	23f998c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
  }

  delay(100); // Allow time for the shadow/eeprom memory to be updated - otherwise the next readRegister will return zero...

  return (error);
}
 23f9b38:	4628      	mov	r0, r5
 23f9b3a:	b003      	add	sp, #12
 23f9b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_printDebug == true)
 23f9b3e:	b15b      	cbz	r3, 23f9b58 <_ZN8ACS3780016setBypassNenableEbb+0x60>
    _debugPort->print(F("setBypassNenable: bypass_n_en is currently: "));
 23f9b40:	4930      	ldr	r1, [pc, #192]	; (23f9c04 <_ZN8ACS3780016setBypassNenableEbb+0x10c>)
 23f9b42:	6860      	ldr	r0, [r4, #4]
 23f9b44:	f002 f9b5 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.bypass_n_en);
 23f9b48:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23f9b4c:	220a      	movs	r2, #10
 23f9b4e:	6860      	ldr	r0, [r4, #4]
 23f9b50:	f001 0101 	and.w	r1, r1, #1
 23f9b54:	f7ff ff0a 	bl	23f996c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  if (bypass) //Adjust bypass_n_en
 23f9b58:	f89d 3007 	ldrb.w	r3, [sp, #7]
  error = writeRegister(store.data.all, ACS37800_REGISTER_SHADOW_1F); // Write register 1F
 23f9b5c:	221f      	movs	r2, #31
 23f9b5e:	f366 0300 	bfi	r3, r6, #0, #1
 23f9b62:	f88d 3007 	strb.w	r3, [sp, #7]
 23f9b66:	4620      	mov	r0, r4
 23f9b68:	9901      	ldr	r1, [sp, #4]
 23f9b6a:	f7ff ff8d 	bl	23f9a88 <_ZN8ACS3780013writeRegisterEmh>
  if (error != ACS37800_SUCCESS)
 23f9b6e:	4605      	mov	r5, r0
 23f9b70:	b120      	cbz	r0, 23f9b7c <_ZN8ACS3780016setBypassNenableEbb+0x84>
    if (_printDebug == true)
 23f9b72:	7a23      	ldrb	r3, [r4, #8]
 23f9b74:	2b00      	cmp	r3, #0
 23f9b76:	d0df      	beq.n	23f9b38 <_ZN8ACS3780016setBypassNenableEbb+0x40>
      _debugPort->print(F("setBypassNenable: writeRegister (1F) returned: "));
 23f9b78:	4923      	ldr	r1, [pc, #140]	; (23f9c08 <_ZN8ACS3780016setBypassNenableEbb+0x110>)
 23f9b7a:	e7d5      	b.n	23f9b28 <_ZN8ACS3780016setBypassNenableEbb+0x30>
  if (_eeprom) // Check if user wants to set eeprom too
 23f9b7c:	b387      	cbz	r7, 23f9be0 <_ZN8ACS3780016setBypassNenableEbb+0xe8>
    error = readRegister(&store.data.all, ACS37800_REGISTER_EEPROM_0F); // Read register 0F
 23f9b7e:	220f      	movs	r2, #15
 23f9b80:	4620      	mov	r0, r4
 23f9b82:	a901      	add	r1, sp, #4
 23f9b84:	f7ff ff26 	bl	23f99d4 <_ZN8ACS3780012readRegisterEPmh>
    if (error != ACS37800_SUCCESS)
 23f9b88:	7a23      	ldrb	r3, [r4, #8]
 23f9b8a:	4605      	mov	r5, r0
 23f9b8c:	b118      	cbz	r0, 23f9b96 <_ZN8ACS3780016setBypassNenableEbb+0x9e>
      if (_printDebug == true)
 23f9b8e:	2b00      	cmp	r3, #0
 23f9b90:	d0d2      	beq.n	23f9b38 <_ZN8ACS3780016setBypassNenableEbb+0x40>
        _debugPort->print(F("setBypassNenable: readRegister (0F) returned: "));
 23f9b92:	491e      	ldr	r1, [pc, #120]	; (23f9c0c <_ZN8ACS3780016setBypassNenableEbb+0x114>)
 23f9b94:	e7c8      	b.n	23f9b28 <_ZN8ACS3780016setBypassNenableEbb+0x30>
    if (_printDebug == true)
 23f9b96:	b15b      	cbz	r3, 23f9bb0 <_ZN8ACS3780016setBypassNenableEbb+0xb8>
      _debugPort->print(F("setBypassNenable: eeprom bypass_n_en is currently: "));
 23f9b98:	491d      	ldr	r1, [pc, #116]	; (23f9c10 <_ZN8ACS3780016setBypassNenableEbb+0x118>)
 23f9b9a:	6860      	ldr	r0, [r4, #4]
 23f9b9c:	f002 f989 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(store.data.bits.bypass_n_en);
 23f9ba0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 23f9ba4:	220a      	movs	r2, #10
 23f9ba6:	6860      	ldr	r0, [r4, #4]
 23f9ba8:	f001 0101 	and.w	r1, r1, #1
 23f9bac:	f7ff fede 	bl	23f996c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    if (bypass) //Adjust bypass_n_en
 23f9bb0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    error = writeRegister(store.data.all, ACS37800_REGISTER_EEPROM_0F); // Write register 0F
 23f9bb4:	220f      	movs	r2, #15
 23f9bb6:	f366 0300 	bfi	r3, r6, #0, #1
 23f9bba:	f88d 3007 	strb.w	r3, [sp, #7]
 23f9bbe:	4620      	mov	r0, r4
 23f9bc0:	9901      	ldr	r1, [sp, #4]
 23f9bc2:	f7ff ff61 	bl	23f9a88 <_ZN8ACS3780013writeRegisterEmh>
    if (error != ACS37800_SUCCESS)
 23f9bc6:	4605      	mov	r5, r0
 23f9bc8:	b150      	cbz	r0, 23f9be0 <_ZN8ACS3780016setBypassNenableEbb+0xe8>
      if (_printDebug == true)
 23f9bca:	7a23      	ldrb	r3, [r4, #8]
 23f9bcc:	b143      	cbz	r3, 23f9be0 <_ZN8ACS3780016setBypassNenableEbb+0xe8>
        _debugPort->print(F("setBypassNenable: writeRegister (0F) returned: "));
 23f9bce:	4911      	ldr	r1, [pc, #68]	; (23f9c14 <_ZN8ACS3780016setBypassNenableEbb+0x11c>)
 23f9bd0:	6860      	ldr	r0, [r4, #4]
 23f9bd2:	f002 f96e 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugPort->println(error);
 23f9bd6:	220a      	movs	r2, #10
 23f9bd8:	4629      	mov	r1, r5
 23f9bda:	6860      	ldr	r0, [r4, #4]
 23f9bdc:	f7ff fed6 	bl	23f998c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
  error = writeRegister(0, ACS37800_REGISTER_VOLATILE_2F); // Clear the customer access code
 23f9be0:	222f      	movs	r2, #47	; 0x2f
 23f9be2:	2100      	movs	r1, #0
 23f9be4:	4620      	mov	r0, r4
 23f9be6:	f7ff ff4f 	bl	23f9a88 <_ZN8ACS3780013writeRegisterEmh>
  if (error != ACS37800_SUCCESS)
 23f9bea:	4605      	mov	r5, r0
 23f9bec:	2800      	cmp	r0, #0
 23f9bee:	d18d      	bne.n	23f9b0c <_ZN8ACS3780016setBypassNenableEbb+0x14>
  delay(100); // Allow time for the shadow/eeprom memory to be updated - otherwise the next readRegister will return zero...
 23f9bf0:	2064      	movs	r0, #100	; 0x64
 23f9bf2:	f001 ff2b 	bl	23fba4c <delay>
  return (error);
 23f9bf6:	e79f      	b.n	23f9b38 <_ZN8ACS3780016setBypassNenableEbb+0x40>
 23f9bf8:	4f70656e 	.word	0x4f70656e
 23f9bfc:	023ff1a4 	.word	0x023ff1a4
 23f9c00:	023ff1d4 	.word	0x023ff1d4
 23f9c04:	023ff203 	.word	0x023ff203
 23f9c08:	023ff230 	.word	0x023ff230
 23f9c0c:	023ff260 	.word	0x023ff260
 23f9c10:	023ff28f 	.word	0x023ff28f
 23f9c14:	023ff2c3 	.word	0x023ff2c3

023f9c18 <_ZN8ACS3780020getCurrentCoarseGainEPf>:
  return (error);
}

//Get the coarse current gain from shadow memory
ACS37800ERR ACS37800::getCurrentCoarseGain(float *currentCoarseGain)
{
 23f9c18:	b570      	push	{r4, r5, r6, lr}
 23f9c1a:	ed2d 8b02 	vpush	{d8}
 23f9c1e:	b082      	sub	sp, #8
 23f9c20:	460e      	mov	r6, r1
  ACS37800_REGISTER_0B_t store;
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_SHADOW_1B); // Read register 1B
 23f9c22:	221b      	movs	r2, #27
 23f9c24:	a901      	add	r1, sp, #4
{
 23f9c26:	4604      	mov	r4, r0
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_SHADOW_1B); // Read register 1B
 23f9c28:	f7ff fed4 	bl	23f99d4 <_ZN8ACS3780012readRegisterEPmh>

  if (error != ACS37800_SUCCESS)
 23f9c2c:	7a21      	ldrb	r1, [r4, #8]
 23f9c2e:	4605      	mov	r5, r0
 23f9c30:	b170      	cbz	r0, 23f9c50 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x38>
  {
    if (_printDebug == true)
 23f9c32:	b141      	cbz	r1, 23f9c46 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x2e>
    {
      _debugPort->print(F("getCurrentCoarseGain: readRegister (1B) returned: "));
 23f9c34:	4912      	ldr	r1, [pc, #72]	; (23f9c80 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x68>)
 23f9c36:	6860      	ldr	r0, [r4, #4]
 23f9c38:	f002 f93b 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
 23f9c3c:	220a      	movs	r2, #10
 23f9c3e:	4629      	mov	r1, r5
 23f9c40:	6860      	ldr	r0, [r4, #4]
 23f9c42:	f7ff fea3 	bl	23f998c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
  }

  *currentCoarseGain = gain; //Return the gain

  return (error);
}
 23f9c46:	4628      	mov	r0, r5
 23f9c48:	b002      	add	sp, #8
 23f9c4a:	ecbd 8b02 	vpop	{d8}
 23f9c4e:	bd70      	pop	{r4, r5, r6, pc}
  float gain = ACS37800_CRS_SNS_GAINS[store.data.bits.crs_sns];
 23f9c50:	f89d 3006 	ldrb.w	r3, [sp, #6]
 23f9c54:	f3c3 02c2 	ubfx	r2, r3, #3, #3
 23f9c58:	4b0a      	ldr	r3, [pc, #40]	; (23f9c84 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x6c>)
 23f9c5a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 23f9c5e:	ed93 8a00 	vldr	s16, [r3]
  if (_printDebug == true)
 23f9c62:	b149      	cbz	r1, 23f9c78 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x60>
    _debugPort->print(F("getCurrentCoarseGain: shadow gain setting is currently: "));
 23f9c64:	4908      	ldr	r1, [pc, #32]	; (23f9c88 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x70>)
 23f9c66:	6860      	ldr	r0, [r4, #4]
 23f9c68:	f002 f923 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(gain, 1);
 23f9c6c:	2101      	movs	r1, #1
 23f9c6e:	eeb0 0a48 	vmov.f32	s0, s16
 23f9c72:	6860      	ldr	r0, [r4, #4]
 23f9c74:	f002 fa3a 	bl	23fc0ec <_ZN5Print7printlnEfi>
  *currentCoarseGain = gain; //Return the gain
 23f9c78:	ed86 8a00 	vstr	s16, [r6]
  return (error);
 23f9c7c:	e7e3      	b.n	23f9c46 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x2e>
 23f9c7e:	bf00      	nop
 23f9c80:	023ff2f3 	.word	0x023ff2f3
 23f9c84:	023ff720 	.word	0x023ff720
 23f9c88:	023ff326 	.word	0x023ff326

023f9c8c <_ZN8ACS378005beginEhR7TwoWire>:
{
 23f9c8c:	b538      	push	{r3, r4, r5, lr}
  _ACS37800Address = address; //Grab which i2c address the user wants us to use
 23f9c8e:	7241      	strb	r1, [r0, #9]
  _i2cPort = &wirePort; //Grab which port the user wants us to use
 23f9c90:	4601      	mov	r1, r0
{
 23f9c92:	4604      	mov	r4, r0
  _i2cPort = &wirePort; //Grab which port the user wants us to use
 23f9c94:	f841 2b18 	str.w	r2, [r1], #24
  ACS37800ERR error = getCurrentCoarseGain(&_currentCoarseGain); // Get the current gain from shadow memory
 23f9c98:	f7ff ffbe 	bl	23f9c18 <_ZN8ACS3780020getCurrentCoarseGainEPf>
  if (_printDebug == true)
 23f9c9c:	7a23      	ldrb	r3, [r4, #8]
  ACS37800ERR error = getCurrentCoarseGain(&_currentCoarseGain); // Get the current gain from shadow memory
 23f9c9e:	4605      	mov	r5, r0
  if (_printDebug == true)
 23f9ca0:	b14b      	cbz	r3, 23f9cb6 <_ZN8ACS378005beginEhR7TwoWire+0x2a>
      _debugPort->print(F("ACS37800::begin: failed! getCurrentCoarseGain returned: "));
 23f9ca2:	6860      	ldr	r0, [r4, #4]
    if  (error != ACS37800_SUCCESS)
 23f9ca4:	b15d      	cbz	r5, 23f9cbe <_ZN8ACS378005beginEhR7TwoWire+0x32>
      _debugPort->print(F("ACS37800::begin: failed! getCurrentCoarseGain returned: "));
 23f9ca6:	490b      	ldr	r1, [pc, #44]	; (23f9cd4 <_ZN8ACS378005beginEhR7TwoWire+0x48>)
 23f9ca8:	f002 f903 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
 23f9cac:	220a      	movs	r2, #10
 23f9cae:	4629      	mov	r1, r5
 23f9cb0:	6860      	ldr	r0, [r4, #4]
 23f9cb2:	f7ff fe6b 	bl	23f998c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
}
 23f9cb6:	fab5 f085 	clz	r0, r5
 23f9cba:	0940      	lsrs	r0, r0, #5
 23f9cbc:	bd38      	pop	{r3, r4, r5, pc}
      _debugPort->print(F("ACS37800::begin: success! _currentCoarseGain is: "));
 23f9cbe:	4906      	ldr	r1, [pc, #24]	; (23f9cd8 <_ZN8ACS378005beginEhR7TwoWire+0x4c>)
 23f9cc0:	f002 f8f7 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(_currentCoarseGain, 1);
 23f9cc4:	2101      	movs	r1, #1
 23f9cc6:	ed94 0a06 	vldr	s0, [r4, #24]
 23f9cca:	6860      	ldr	r0, [r4, #4]
 23f9ccc:	f002 fa0e 	bl	23fc0ec <_ZN5Print7printlnEfi>
 23f9cd0:	e7f1      	b.n	23f9cb6 <_ZN8ACS378005beginEhR7TwoWire+0x2a>
 23f9cd2:	bf00      	nop
 23f9cd4:	023ff35f 	.word	0x023ff35f
 23f9cd8:	023ff398 	.word	0x023ff398

023f9cdc <_ZN8ACS378007readRMSEPfS0_>:

// Read volatile register 0x20. Return the vInst (Volts) and iInst (Amps).
ACS37800ERR ACS37800::readRMS(float *vRMS, float *iRMS)
{
 23f9cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 23f9cde:	ed2d 8b04 	vpush	{d8-d9}
 23f9ce2:	b083      	sub	sp, #12
 23f9ce4:	460f      	mov	r7, r1
 23f9ce6:	4616      	mov	r6, r2
  ACS37800_REGISTER_20_t store;
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_20); // Read register 20
 23f9ce8:	a901      	add	r1, sp, #4
 23f9cea:	2220      	movs	r2, #32
{
 23f9cec:	4604      	mov	r4, r0
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_20); // Read register 20
 23f9cee:	f7ff fe71 	bl	23f99d4 <_ZN8ACS3780012readRegisterEPmh>

  if (error != ACS37800_SUCCESS)
 23f9cf2:	7a23      	ldrb	r3, [r4, #8]
 23f9cf4:	4605      	mov	r5, r0
 23f9cf6:	b170      	cbz	r0, 23f9d16 <_ZN8ACS378007readRMSEPfS0_+0x3a>
  {
    if (_printDebug == true)
 23f9cf8:	b143      	cbz	r3, 23f9d0c <_ZN8ACS378007readRMSEPfS0_+0x30>
    {
      _debugPort->print(F("readRMS: readRegister (20) returned: "));
 23f9cfa:	493f      	ldr	r1, [pc, #252]	; (23f9df8 <_ZN8ACS378007readRMSEPfS0_+0x11c>)
 23f9cfc:	6860      	ldr	r0, [r4, #4]
 23f9cfe:	f002 f8d8 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
 23f9d02:	220a      	movs	r2, #10
 23f9d04:	4629      	mov	r1, r5
 23f9d06:	6860      	ldr	r0, [r4, #4]
 23f9d08:	f7ff fe40 	bl	23f998c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
    _debugPort->println(amps);
  }
  *iRMS = amps;

  return (error);
}
 23f9d0c:	4628      	mov	r0, r5
 23f9d0e:	b003      	add	sp, #12
 23f9d10:	ecbd 8b04 	vpop	{d8-d9}
 23f9d14:	bdf0      	pop	{r4, r5, r6, r7, pc}
  float volts = (float)store.data.bits.vrms;
 23f9d16:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 23f9d1a:	ee08 2a10 	vmov	s16, r2
 23f9d1e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  if (_printDebug == true)
 23f9d22:	b19b      	cbz	r3, 23f9d4c <_ZN8ACS378007readRMSEPfS0_+0x70>
    _debugPort->print(F("readRMS: vrms: 0x"));
 23f9d24:	4935      	ldr	r1, [pc, #212]	; (23f9dfc <_ZN8ACS378007readRMSEPfS0_+0x120>)
 23f9d26:	6860      	ldr	r0, [r4, #4]
 23f9d28:	f002 f8c3 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.vrms, HEX);
 23f9d2c:	2210      	movs	r2, #16
 23f9d2e:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 23f9d32:	6860      	ldr	r0, [r4, #4]
 23f9d34:	f7ff fe1a 	bl	23f996c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readRMS: volts (LSB, before correction) is "));
 23f9d38:	4931      	ldr	r1, [pc, #196]	; (23f9e00 <_ZN8ACS378007readRMSEPfS0_+0x124>)
 23f9d3a:	6860      	ldr	r0, [r4, #4]
 23f9d3c:	f002 f8b9 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(volts);
 23f9d40:	2102      	movs	r1, #2
 23f9d42:	eeb0 0a48 	vmov.f32	s0, s16
 23f9d46:	6860      	ldr	r0, [r4, #4]
 23f9d48:	f002 f9d0 	bl	23fc0ec <_ZN5Print7printlnEfi>
  volts /= 55000.0; //Convert from codes to the fraction of ADC Full Scale (16-bit)
 23f9d4c:	ed9f 9a2d 	vldr	s18, [pc, #180]	; 23f9e04 <_ZN8ACS378007readRMSEPfS0_+0x128>
  volts *= 250; //Convert to mV (Differential Input Range is +/- 250mV)
 23f9d50:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 23f9e08 <_ZN8ACS378007readRMSEPfS0_+0x12c>
  volts /= 55000.0; //Convert from codes to the fraction of ADC Full Scale (16-bit)
 23f9d54:	eec8 7a09 	vdiv.f32	s15, s16, s18
  volts *= 250; //Convert to mV (Differential Input Range is +/- 250mV)
 23f9d58:	ee67 7a87 	vmul.f32	s15, s15, s14
  volts /= 1000; //Convert to Volts
 23f9d5c:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 23f9e0c <_ZN8ACS378007readRMSEPfS0_+0x130>
 23f9d60:	ee87 0a87 	vdiv.f32	s0, s15, s14
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
 23f9d64:	ed94 7a03 	vldr	s14, [r4, #12]
 23f9d68:	edd4 7a04 	vldr	s15, [r4, #16]
 23f9d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 23f9d70:	ee87 8a87 	vdiv.f32	s16, s15, s14
  if (_printDebug == true)
 23f9d74:	7a23      	ldrb	r3, [r4, #8]
  volts *= resistorMultiplier;
 23f9d76:	ee28 8a00 	vmul.f32	s16, s16, s0
  if (_printDebug == true)
 23f9d7a:	b14b      	cbz	r3, 23f9d90 <_ZN8ACS378007readRMSEPfS0_+0xb4>
    _debugPort->print(F("readRMS: volts (V, after correction) is "));
 23f9d7c:	4924      	ldr	r1, [pc, #144]	; (23f9e10 <_ZN8ACS378007readRMSEPfS0_+0x134>)
 23f9d7e:	6860      	ldr	r0, [r4, #4]
 23f9d80:	f002 f897 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(volts);
 23f9d84:	2102      	movs	r1, #2
 23f9d86:	eeb0 0a48 	vmov.f32	s0, s16
 23f9d8a:	6860      	ldr	r0, [r4, #4]
 23f9d8c:	f002 f9ae 	bl	23fc0ec <_ZN5Print7printlnEfi>
  float amps = (float)signedUnsigned.Signed;
 23f9d90:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  *vRMS = volts;
 23f9d94:	ed87 8a00 	vstr	s16, [r7]
  float amps = (float)signedUnsigned.Signed;
 23f9d98:	ee08 3a90 	vmov	s17, r3
  if (_printDebug == true)
 23f9d9c:	7a23      	ldrb	r3, [r4, #8]
  float amps = (float)signedUnsigned.Signed;
 23f9d9e:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  if (_printDebug == true)
 23f9da2:	b19b      	cbz	r3, 23f9dcc <_ZN8ACS378007readRMSEPfS0_+0xf0>
    _debugPort->print(F("readRMS: irms: 0x"));
 23f9da4:	491b      	ldr	r1, [pc, #108]	; (23f9e14 <_ZN8ACS378007readRMSEPfS0_+0x138>)
 23f9da6:	6860      	ldr	r0, [r4, #4]
 23f9da8:	f002 f883 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.irms, HEX);
 23f9dac:	2210      	movs	r2, #16
 23f9dae:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 23f9db2:	6860      	ldr	r0, [r4, #4]
 23f9db4:	f7ff fdda 	bl	23f996c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readRMS: amps (LSB, before correction) is "));
 23f9db8:	4917      	ldr	r1, [pc, #92]	; (23f9e18 <_ZN8ACS378007readRMSEPfS0_+0x13c>)
 23f9dba:	6860      	ldr	r0, [r4, #4]
 23f9dbc:	f002 f879 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(amps);
 23f9dc0:	2102      	movs	r1, #2
 23f9dc2:	eeb0 0a68 	vmov.f32	s0, s17
 23f9dc6:	6860      	ldr	r0, [r4, #4]
 23f9dc8:	f002 f990 	bl	23fc0ec <_ZN5Print7printlnEfi>
  amps /= 55000.0; //Convert from codes to the fraction of ADC Full Scale (16-bit)
 23f9dcc:	ee88 8a89 	vdiv.f32	s16, s17, s18
  amps *= _currentSensingRange; //Convert to Amps
 23f9dd0:	ed94 0a05 	vldr	s0, [r4, #20]
  if (_printDebug == true)
 23f9dd4:	7a23      	ldrb	r3, [r4, #8]
  amps *= _currentSensingRange; //Convert to Amps
 23f9dd6:	ee28 8a00 	vmul.f32	s16, s16, s0
  if (_printDebug == true)
 23f9dda:	b14b      	cbz	r3, 23f9df0 <_ZN8ACS378007readRMSEPfS0_+0x114>
    _debugPort->print(F("readRMS: amps (A, after correction) is "));
 23f9ddc:	490f      	ldr	r1, [pc, #60]	; (23f9e1c <_ZN8ACS378007readRMSEPfS0_+0x140>)
 23f9dde:	6860      	ldr	r0, [r4, #4]
 23f9de0:	f002 f867 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(amps);
 23f9de4:	2102      	movs	r1, #2
 23f9de6:	eeb0 0a48 	vmov.f32	s0, s16
 23f9dea:	6860      	ldr	r0, [r4, #4]
 23f9dec:	f002 f97e 	bl	23fc0ec <_ZN5Print7printlnEfi>
  *iRMS = amps;
 23f9df0:	ed86 8a00 	vstr	s16, [r6]
  return (error);
 23f9df4:	e78a      	b.n	23f9d0c <_ZN8ACS378007readRMSEPfS0_+0x30>
 23f9df6:	bf00      	nop
 23f9df8:	023ff3ca 	.word	0x023ff3ca
 23f9dfc:	023ff3f0 	.word	0x023ff3f0
 23f9e00:	023ff402 	.word	0x023ff402
 23f9e04:	4756d800 	.word	0x4756d800
 23f9e08:	437a0000 	.word	0x437a0000
 23f9e0c:	447a0000 	.word	0x447a0000
 23f9e10:	023ff42e 	.word	0x023ff42e
 23f9e14:	023ff457 	.word	0x023ff457
 23f9e18:	023ff469 	.word	0x023ff469
 23f9e1c:	023ff494 	.word	0x023ff494

023f9e20 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_>:

// Read volatile register 0x21. Return the pactive and pimag.
ACS37800ERR ACS37800::readPowerActiveReactive(float *pActive, float *pReactive)
{
 23f9e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23f9e24:	ed2d 8b04 	vpush	{d8-d9}
 23f9e28:	b083      	sub	sp, #12
 23f9e2a:	460f      	mov	r7, r1
 23f9e2c:	4616      	mov	r6, r2
  ACS37800_REGISTER_21_t store;
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_21); // Read register 21
 23f9e2e:	a901      	add	r1, sp, #4
 23f9e30:	2221      	movs	r2, #33	; 0x21
{
 23f9e32:	4604      	mov	r4, r0
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_21); // Read register 21
 23f9e34:	f7ff fdce 	bl	23f99d4 <_ZN8ACS3780012readRegisterEPmh>

  if (error != ACS37800_SUCCESS)
 23f9e38:	7a23      	ldrb	r3, [r4, #8]
 23f9e3a:	4605      	mov	r5, r0
 23f9e3c:	b178      	cbz	r0, 23f9e5e <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x3e>
  {
    if (_printDebug == true)
 23f9e3e:	b143      	cbz	r3, 23f9e52 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x32>
    {
      _debugPort->print(F("readPowerActiveReactive: readRegister (21) returned: "));
 23f9e40:	4955      	ldr	r1, [pc, #340]	; (23f9f98 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x178>)
 23f9e42:	6860      	ldr	r0, [r4, #4]
 23f9e44:	f002 f835 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
 23f9e48:	220a      	movs	r2, #10
 23f9e4a:	4629      	mov	r1, r5
 23f9e4c:	6860      	ldr	r0, [r4, #4]
 23f9e4e:	f7ff fd9d 	bl	23f998c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
    _debugPort->println(power);
  }
  *pReactive = power;

  return (error);
}
 23f9e52:	4628      	mov	r0, r5
 23f9e54:	b003      	add	sp, #12
 23f9e56:	ecbd 8b04 	vpop	{d8-d9}
 23f9e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  float power = (float)signedUnsigned.Signed;
 23f9e5e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
  signedUnsigned.unSigned = store.data.bits.pactive;
 23f9e62:	f8bd 9004 	ldrh.w	r9, [sp, #4]
  float power = (float)signedUnsigned.Signed;
 23f9e66:	ee08 2a10 	vmov	s16, r2
 23f9e6a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  if (_printDebug == true)
 23f9e6e:	b1bb      	cbz	r3, 23f9ea0 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x80>
    _debugPort->print(F("readPowerActiveReactive: pactive: 0x"));
 23f9e70:	494a      	ldr	r1, [pc, #296]	; (23f9f9c <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x17c>)
 23f9e72:	6860      	ldr	r0, [r4, #4]
 23f9e74:	f002 f81d 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(signedUnsigned.unSigned, HEX);
 23f9e78:	f8d4 8004 	ldr.w	r8, [r4, #4]
        return printNumber(val, base) + t;
 23f9e7c:	2210      	movs	r2, #16
 23f9e7e:	4649      	mov	r1, r9
 23f9e80:	4640      	mov	r0, r8
 23f9e82:	f002 f832 	bl	23fbeea <_ZN5Print11printNumberEmh>
        n += println();
 23f9e86:	4640      	mov	r0, r8
 23f9e88:	f002 f817 	bl	23fbeba <_ZN5Print7printlnEv>
    _debugPort->print(F("readPowerActiveReactive: pactive (LSB, before correction) is "));
 23f9e8c:	4944      	ldr	r1, [pc, #272]	; (23f9fa0 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x180>)
 23f9e8e:	6860      	ldr	r0, [r4, #4]
 23f9e90:	f002 f80f 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
 23f9e94:	2102      	movs	r1, #2
 23f9e96:	eeb0 0a48 	vmov.f32	s0, s16
 23f9e9a:	6860      	ldr	r0, [r4, #4]
 23f9e9c:	f002 f926 	bl	23fc0ec <_ZN5Print7printlnEfi>
  LSBpermW *= 30.0 / _currentSensingRange; // Correct for sensor version
 23f9ea0:	6960      	ldr	r0, [r4, #20]
 23f9ea2:	f7fe fe25 	bl	23f8af0 <__aeabi_f2d>
 23f9ea6:	4602      	mov	r2, r0
 23f9ea8:	460b      	mov	r3, r1
 23f9eaa:	2000      	movs	r0, #0
 23f9eac:	493d      	ldr	r1, [pc, #244]	; (23f9fa4 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x184>)
 23f9eae:	f7fe ffa1 	bl	23f8df4 <__aeabi_ddiv>
 23f9eb2:	a335      	add	r3, pc, #212	; (adr r3, 23f9f88 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x168>)
 23f9eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9eb8:	f7fe fe72 	bl	23f8ba0 <__aeabi_dmul>
 23f9ebc:	f7ff f968 	bl	23f9190 <__aeabi_d2f>
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
 23f9ec0:	edd4 6a03 	vldr	s13, [r4, #12]
 23f9ec4:	ed94 7a04 	vldr	s14, [r4, #16]
  power /= LSBpermW; //Convert from codes to mW
 23f9ec8:	ee07 0a90 	vmov	s15, r0
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
 23f9ecc:	ee36 7a87 	vadd.f32	s14, s13, s14
  power /= LSBpermW; //Convert from codes to mW
 23f9ed0:	eec8 7a27 	vdiv.f32	s15, s16, s15
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
 23f9ed4:	ee87 8a26 	vdiv.f32	s16, s14, s13
  power /= 1000; // Convert from mW to W
 23f9ed8:	ed9f 9a33 	vldr	s18, [pc, #204]	; 23f9fa8 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x188>
  power *= resistorMultiplier;
 23f9edc:	ee67 7a88 	vmul.f32	s15, s15, s16
  if (_printDebug == true)
 23f9ee0:	7a23      	ldrb	r3, [r4, #8]
  power /= 1000; // Convert from mW to W
 23f9ee2:	eec7 8a89 	vdiv.f32	s17, s15, s18
  if (_printDebug == true)
 23f9ee6:	b14b      	cbz	r3, 23f9efc <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0xdc>
    _debugPort->print(F("readPowerActiveReactive: pactive (W, after correction) is "));
 23f9ee8:	4930      	ldr	r1, [pc, #192]	; (23f9fac <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x18c>)
 23f9eea:	6860      	ldr	r0, [r4, #4]
 23f9eec:	f001 ffe1 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
 23f9ef0:	2102      	movs	r1, #2
 23f9ef2:	eeb0 0a68 	vmov.f32	s0, s17
 23f9ef6:	6860      	ldr	r0, [r4, #4]
 23f9ef8:	f002 f8f8 	bl	23fc0ec <_ZN5Print7printlnEfi>
  *pActive = power;
 23f9efc:	edc7 8a00 	vstr	s17, [r7]
  power = (float)store.data.bits.pimag;
 23f9f00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 23f9f04:	ee08 3a90 	vmov	s17, r3
  if (_printDebug == true)
 23f9f08:	7a23      	ldrb	r3, [r4, #8]
  power = (float)store.data.bits.pimag;
 23f9f0a:	eef8 8a68 	vcvt.f32.u32	s17, s17
  if (_printDebug == true)
 23f9f0e:	b19b      	cbz	r3, 23f9f38 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x118>
    _debugPort->print(F("readPowerActiveReactive: pimag: 0x"));
 23f9f10:	4927      	ldr	r1, [pc, #156]	; (23f9fb0 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x190>)
 23f9f12:	6860      	ldr	r0, [r4, #4]
 23f9f14:	f001 ffcd 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.pimag, HEX);
 23f9f18:	2210      	movs	r2, #16
 23f9f1a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 23f9f1e:	6860      	ldr	r0, [r4, #4]
 23f9f20:	f7ff fd24 	bl	23f996c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readPowerActiveReactive: pimag (LSB, before correction) is "));
 23f9f24:	4923      	ldr	r1, [pc, #140]	; (23f9fb4 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x194>)
 23f9f26:	6860      	ldr	r0, [r4, #4]
 23f9f28:	f001 ffc3 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
 23f9f2c:	2102      	movs	r1, #2
 23f9f2e:	eeb0 0a68 	vmov.f32	s0, s17
 23f9f32:	6860      	ldr	r0, [r4, #4]
 23f9f34:	f002 f8da 	bl	23fc0ec <_ZN5Print7printlnEfi>
  LSBpermVAR *= 30.0 / _currentSensingRange; // Correct for sensor version
 23f9f38:	6960      	ldr	r0, [r4, #20]
 23f9f3a:	f7fe fdd9 	bl	23f8af0 <__aeabi_f2d>
 23f9f3e:	4602      	mov	r2, r0
 23f9f40:	460b      	mov	r3, r1
 23f9f42:	2000      	movs	r0, #0
 23f9f44:	4917      	ldr	r1, [pc, #92]	; (23f9fa4 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x184>)
 23f9f46:	f7fe ff55 	bl	23f8df4 <__aeabi_ddiv>
 23f9f4a:	a311      	add	r3, pc, #68	; (adr r3, 23f9f90 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x170>)
 23f9f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 23f9f50:	f7fe fe26 	bl	23f8ba0 <__aeabi_dmul>
 23f9f54:	f7ff f91c 	bl	23f9190 <__aeabi_d2f>
  power /= LSBpermVAR; //Convert from codes to mVAR
 23f9f58:	ee07 0a90 	vmov	s15, r0
 23f9f5c:	eec8 7aa7 	vdiv.f32	s15, s17, s15
  power *= resistorMultiplier;
 23f9f60:	ee28 8a27 	vmul.f32	s16, s16, s15
  if (_printDebug == true)
 23f9f64:	7a23      	ldrb	r3, [r4, #8]
  power /= 1000; // Convert from mVAR to VAR
 23f9f66:	eec8 8a09 	vdiv.f32	s17, s16, s18
  if (_printDebug == true)
 23f9f6a:	b14b      	cbz	r3, 23f9f80 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x160>
    _debugPort->print(F("readPowerActiveReactive: pimag (VAR, after correction) is "));
 23f9f6c:	4912      	ldr	r1, [pc, #72]	; (23f9fb8 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x198>)
 23f9f6e:	6860      	ldr	r0, [r4, #4]
 23f9f70:	f001 ff9f 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
 23f9f74:	2102      	movs	r1, #2
 23f9f76:	eeb0 0a68 	vmov.f32	s0, s17
 23f9f7a:	6860      	ldr	r0, [r4, #4]
 23f9f7c:	f002 f8b6 	bl	23fc0ec <_ZN5Print7printlnEfi>
  *pReactive = power;
 23f9f80:	edc6 8a00 	vstr	s17, [r6]
  return (error);
 23f9f84:	e765      	b.n	23f9e52 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x32>
 23f9f86:	bf00      	nop
 23f9f88:	00000000 	.word	0x00000000
 23f9f8c:	4008a3d7 	.word	0x4008a3d7
 23f9f90:	a0000000 	.word	0xa0000000
 23f9f94:	40189999 	.word	0x40189999
 23f9f98:	023ff4bc 	.word	0x023ff4bc
 23f9f9c:	023ff4f2 	.word	0x023ff4f2
 23f9fa0:	023ff517 	.word	0x023ff517
 23f9fa4:	403e0000 	.word	0x403e0000
 23f9fa8:	447a0000 	.word	0x447a0000
 23f9fac:	023ff555 	.word	0x023ff555
 23f9fb0:	023ff590 	.word	0x023ff590
 23f9fb4:	023ff5b3 	.word	0x023ff5b3
 23f9fb8:	023ff5ef 	.word	0x023ff5ef
 23f9fbc:	00000000 	.word	0x00000000

023f9fc0 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_>:

// Read volatile register 0x22. Return the apparent power, power factor, leading / lagging, generated / consumed
ACS37800ERR ACS37800::readPowerFactor(float *pApparent, float *pFactor, bool *posangle, bool *pospf)
{
 23f9fc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23f9fc4:	ed2d 8b02 	vpush	{d8}
 23f9fc8:	b082      	sub	sp, #8
 23f9fca:	460d      	mov	r5, r1
 23f9fcc:	4690      	mov	r8, r2
  ACS37800_REGISTER_22_t store;
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_22); // Read register 22
 23f9fce:	a901      	add	r1, sp, #4
 23f9fd0:	2222      	movs	r2, #34	; 0x22
{
 23f9fd2:	4604      	mov	r4, r0
 23f9fd4:	461f      	mov	r7, r3
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_22); // Read register 22
 23f9fd6:	f7ff fcfd 	bl	23f99d4 <_ZN8ACS3780012readRegisterEPmh>

  if (error != ACS37800_SUCCESS)
 23f9fda:	7a23      	ldrb	r3, [r4, #8]
 23f9fdc:	4606      	mov	r6, r0
 23f9fde:	b178      	cbz	r0, 23fa000 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x40>
  {
    if (_printDebug == true)
 23f9fe0:	b143      	cbz	r3, 23f9ff4 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x34>
    {
      _debugPort->print(F("readPowerFactor: readRegister (22) returned: "));
 23f9fe2:	4945      	ldr	r1, [pc, #276]	; (23fa0f8 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x138>)
 23f9fe4:	6860      	ldr	r0, [r4, #4]
 23f9fe6:	f001 ff64 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
 23f9fea:	220a      	movs	r2, #10
 23f9fec:	4631      	mov	r1, r6
 23f9fee:	6860      	ldr	r0, [r4, #4]
 23f9ff0:	f7ff fccc 	bl	23f998c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
  // Extract posangle and pospf
  *posangle = store.data.bits.posangle & 0x1;
  *pospf = store.data.bits.pospf & 0x1;

  return (error);
}
 23f9ff4:	4630      	mov	r0, r6
 23f9ff6:	b002      	add	sp, #8
 23f9ff8:	ecbd 8b02 	vpop	{d8}
 23f9ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  float power = (float)store.data.bits.papparent;
 23fa000:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 23fa004:	ee08 2a10 	vmov	s16, r2
 23fa008:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  if (_printDebug == true)
 23fa00c:	b19b      	cbz	r3, 23fa036 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x76>
    _debugPort->print(F("readPowerFactor: papparent: 0x"));
 23fa00e:	493b      	ldr	r1, [pc, #236]	; (23fa0fc <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x13c>)
 23fa010:	6860      	ldr	r0, [r4, #4]
 23fa012:	f001 ff4e 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.papparent, HEX);
 23fa016:	2210      	movs	r2, #16
 23fa018:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 23fa01c:	6860      	ldr	r0, [r4, #4]
 23fa01e:	f7ff fca5 	bl	23f996c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readPowerFactor: papparent (LSB, before correction) is "));
 23fa022:	4937      	ldr	r1, [pc, #220]	; (23fa100 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x140>)
 23fa024:	6860      	ldr	r0, [r4, #4]
 23fa026:	f001 ff44 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
 23fa02a:	2102      	movs	r1, #2
 23fa02c:	eeb0 0a48 	vmov.f32	s0, s16
 23fa030:	6860      	ldr	r0, [r4, #4]
 23fa032:	f002 f85b 	bl	23fc0ec <_ZN5Print7printlnEfi>
  LSBpermVA *= 30.0 / _currentSensingRange; // Correct for sensor version
 23fa036:	6960      	ldr	r0, [r4, #20]
 23fa038:	f7fe fd5a 	bl	23f8af0 <__aeabi_f2d>
 23fa03c:	4602      	mov	r2, r0
 23fa03e:	460b      	mov	r3, r1
 23fa040:	2000      	movs	r0, #0
 23fa042:	4930      	ldr	r1, [pc, #192]	; (23fa104 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x144>)
 23fa044:	f7fe fed6 	bl	23f8df4 <__aeabi_ddiv>
 23fa048:	a329      	add	r3, pc, #164	; (adr r3, 23fa0f0 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x130>)
 23fa04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 23fa04e:	f7fe fda7 	bl	23f8ba0 <__aeabi_dmul>
 23fa052:	f7ff f89d 	bl	23f9190 <__aeabi_d2f>
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
 23fa056:	edd4 6a03 	vldr	s13, [r4, #12]
 23fa05a:	ed94 7a04 	vldr	s14, [r4, #16]
  power /= LSBpermVA; //Convert from codes to mVA
 23fa05e:	ee07 0a90 	vmov	s15, r0
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
 23fa062:	ee36 7a87 	vadd.f32	s14, s13, s14
  power /= LSBpermVA; //Convert from codes to mVA
 23fa066:	ee88 6a27 	vdiv.f32	s12, s16, s15
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
 23fa06a:	eec7 7a26 	vdiv.f32	s15, s14, s13
  power /= 1000; // Convert from mVAR to VAR
 23fa06e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 23fa108 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x148>
  power *= resistorMultiplier;
 23fa072:	ee67 7a86 	vmul.f32	s15, s15, s12
  if (_printDebug == true)
 23fa076:	7a23      	ldrb	r3, [r4, #8]
  power /= 1000; // Convert from mVAR to VAR
 23fa078:	ee87 8a87 	vdiv.f32	s16, s15, s14
  if (_printDebug == true)
 23fa07c:	b14b      	cbz	r3, 23fa092 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0xd2>
    _debugPort->print(F("readPowerFactor: papparent (VA, after correction) is "));
 23fa07e:	4923      	ldr	r1, [pc, #140]	; (23fa10c <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x14c>)
 23fa080:	6860      	ldr	r0, [r4, #4]
 23fa082:	f001 ff16 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
 23fa086:	2102      	movs	r1, #2
 23fa088:	eeb0 0a48 	vmov.f32	s0, s16
 23fa08c:	6860      	ldr	r0, [r4, #4]
 23fa08e:	f002 f82d 	bl	23fc0ec <_ZN5Print7printlnEfi>
  *pApparent = power;
 23fa092:	ed85 8a00 	vstr	s16, [r5]
  signedUnsigned.unSigned = store.data.bits.pfactor << 5; // Move 11-bit number into 16-bits (signed)
 23fa096:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 23fa09a:	f345 050a 	sbfx	r5, r5, #0, #11
  float pfactor = (float)signedUnsigned.Signed / 32768.0; // Convert to +/- 1
 23fa09e:	016b      	lsls	r3, r5, #5
 23fa0a0:	ee08 3a10 	vmov	s16, r3
  if (_printDebug == true)
 23fa0a4:	7a23      	ldrb	r3, [r4, #8]
  float pfactor = (float)signedUnsigned.Signed / 32768.0; // Convert to +/- 1
 23fa0a6:	eeba 8ae8 	vcvt.f32.s32	s16, s16, #15
  if (_printDebug == true)
 23fa0aa:	b1ab      	cbz	r3, 23fa0d8 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x118>
    _debugPort->print(F("readPowerFactor: pfactor: 0x"));
 23fa0ac:	4918      	ldr	r1, [pc, #96]	; (23fa110 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x150>)
 23fa0ae:	6860      	ldr	r0, [r4, #4]
 23fa0b0:	f001 feff 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.pfactor, HEX);
 23fa0b4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
 23fa0b8:	2210      	movs	r2, #16
 23fa0ba:	6860      	ldr	r0, [r4, #4]
 23fa0bc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 23fa0c0:	f7ff fc54 	bl	23f996c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readPowerFactor: pfactor is "));
 23fa0c4:	4913      	ldr	r1, [pc, #76]	; (23fa114 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x154>)
 23fa0c6:	6860      	ldr	r0, [r4, #4]
 23fa0c8:	f001 fef3 	bl	23fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(pfactor);
 23fa0cc:	2102      	movs	r1, #2
 23fa0ce:	eeb0 0a48 	vmov.f32	s0, s16
 23fa0d2:	6860      	ldr	r0, [r4, #4]
 23fa0d4:	f002 f80a 	bl	23fc0ec <_ZN5Print7printlnEfi>
  *posangle = store.data.bits.posangle & 0x1;
 23fa0d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
  *pFactor = pfactor;
 23fa0dc:	ed88 8a00 	vstr	s16, [r8]
  *posangle = store.data.bits.posangle & 0x1;
 23fa0e0:	f3c2 03c0 	ubfx	r3, r2, #3, #1
 23fa0e4:	703b      	strb	r3, [r7, #0]
  *pospf = store.data.bits.pospf & 0x1;
 23fa0e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fa0e8:	f3c2 1200 	ubfx	r2, r2, #4, #1
 23fa0ec:	701a      	strb	r2, [r3, #0]
  return (error);
 23fa0ee:	e781      	b.n	23f9ff4 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x34>
 23fa0f0:	a0000000 	.word	0xa0000000
 23fa0f4:	40189999 	.word	0x40189999
 23fa0f8:	023ff62a 	.word	0x023ff62a
 23fa0fc:	023ff658 	.word	0x023ff658
 23fa100:	023ff677 	.word	0x023ff677
 23fa104:	403e0000 	.word	0x403e0000
 23fa108:	447a0000 	.word	0x447a0000
 23fa10c:	023ff6af 	.word	0x023ff6af
 23fa110:	023ff6e5 	.word	0x023ff6e5
 23fa114:	023ff702 	.word	0x023ff702

023fa118 <_ZN8ACS3780013setDividerResEf>:
}

//Change the value of the voltage divider resistance (Ohms)
void ACS37800::setDividerRes(float newRes)
{
  _dividerResistance = newRes;
 23fa118:	ed80 0a04 	vstr	s0, [r0, #16]
}
 23fa11c:	4770      	bx	lr

023fa11e <_ZN12Adafruit_GFX9writeLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 23fa11e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa122:	461f      	mov	r7, r3
 23fa124:	b085      	sub	sp, #20
 23fa126:	f9bd 8038 	ldrsh.w	r8, [sp, #56]	; 0x38
#if defined(ESP8266)
    yield();
#endif
    int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 23fa12a:	eba7 0a01 	sub.w	sl, r7, r1
 23fa12e:	eba8 0902 	sub.w	r9, r8, r2
 23fa132:	f1b9 0f00 	cmp.w	r9, #0
 23fa136:	bfb8      	it	lt
 23fa138:	f1c9 0900 	rsblt	r9, r9, #0
 23fa13c:	f1ba 0f00 	cmp.w	sl, #0
 23fa140:	bfb8      	it	lt
 23fa142:	f1ca 0a00 	rsblt	sl, sl, #0
    if (steep) {
 23fa146:	45d1      	cmp	r9, sl
        uint16_t color) {
 23fa148:	4683      	mov	fp, r0
 23fa14a:	460c      	mov	r4, r1
 23fa14c:	4615      	mov	r5, r2
 23fa14e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
    if (steep) {
 23fa152:	dd04      	ble.n	23fa15e <_ZN12Adafruit_GFX9writeLineEsssst+0x40>
 23fa154:	463a      	mov	r2, r7
        _swap_int16_t(x0, y0);
 23fa156:	462c      	mov	r4, r5
        _swap_int16_t(x1, y1);
 23fa158:	4647      	mov	r7, r8
        _swap_int16_t(x0, y0);
 23fa15a:	460d      	mov	r5, r1
        _swap_int16_t(x1, y1);
 23fa15c:	4690      	mov	r8, r2
    }

    if (x0 > x1) {
 23fa15e:	42bc      	cmp	r4, r7
 23fa160:	dd05      	ble.n	23fa16e <_ZN12Adafruit_GFX9writeLineEsssst+0x50>
 23fa162:	462a      	mov	r2, r5
        _swap_int16_t(x0, x1);
        _swap_int16_t(y0, y1);
 23fa164:	4645      	mov	r5, r8
 23fa166:	4690      	mov	r8, r2
    if (x0 > x1) {
 23fa168:	4622      	mov	r2, r4
 23fa16a:	463c      	mov	r4, r7
 23fa16c:	4617      	mov	r7, r2
    }

    int16_t dx, dy;
    dx = x1 - x0;
 23fa16e:	1b3e      	subs	r6, r7, r4
 23fa170:	b2b2      	uxth	r2, r6
 23fa172:	9200      	str	r2, [sp, #0]
    dy = abs(y1 - y0);
 23fa174:	eba8 0205 	sub.w	r2, r8, r5
 23fa178:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 23fa17c:	eba1 71e2 	sub.w	r1, r1, r2, asr #31

    int16_t err = dx / 2;
 23fa180:	f3c6 32c0 	ubfx	r2, r6, #15, #1
 23fa184:	fa02 f686 	sxtah	r6, r2, r6
    int16_t ystep;

    if (y0 < y1) {
        ystep = 1;
    } else {
        ystep = -1;
 23fa188:	4545      	cmp	r5, r8
 23fa18a:	bfb4      	ite	lt
 23fa18c:	2201      	movlt	r2, #1
 23fa18e:	f04f 32ff 	movge.w	r2, #4294967295	; 0xffffffff
    dy = abs(y1 - y0);
 23fa192:	9101      	str	r1, [sp, #4]
    int16_t err = dx / 2;
 23fa194:	1076      	asrs	r6, r6, #1
        ystep = -1;
 23fa196:	9202      	str	r2, [sp, #8]
    }

    for (; x0<=x1; x0++) {
 23fa198:	42bc      	cmp	r4, r7
 23fa19a:	dc1c      	bgt.n	23fa1d6 <_ZN12Adafruit_GFX9writeLineEsssst+0xb8>
        if (steep) {
            writePixel(y0, x0, color);
 23fa19c:	f8db 2000 	ldr.w	r2, [fp]
        if (steep) {
 23fa1a0:	45d1      	cmp	r9, sl
            writePixel(y0, x0, color);
 23fa1a2:	f8d2 8018 	ldr.w	r8, [r2, #24]
 23fa1a6:	bfc7      	ittee	gt
 23fa1a8:	4629      	movgt	r1, r5
 23fa1aa:	4622      	movgt	r2, r4
        } else {
            writePixel(x0, y0, color);
 23fa1ac:	462a      	movle	r2, r5
 23fa1ae:	4621      	movle	r1, r4
            writePixel(y0, x0, color);
 23fa1b0:	9303      	str	r3, [sp, #12]
            writePixel(x0, y0, color);
 23fa1b2:	4658      	mov	r0, fp
 23fa1b4:	47c0      	blx	r8
        }
        err -= dy;
 23fa1b6:	9a01      	ldr	r2, [sp, #4]
            writePixel(x0, y0, color);
 23fa1b8:	9b03      	ldr	r3, [sp, #12]
        err -= dy;
 23fa1ba:	1ab6      	subs	r6, r6, r2
 23fa1bc:	b2b1      	uxth	r1, r6
 23fa1be:	b236      	sxth	r6, r6
        if (err < 0) {
 23fa1c0:	2e00      	cmp	r6, #0
 23fa1c2:	da05      	bge.n	23fa1d0 <_ZN12Adafruit_GFX9writeLineEsssst+0xb2>
            y0 += ystep;
 23fa1c4:	9a02      	ldr	r2, [sp, #8]
 23fa1c6:	4415      	add	r5, r2
            err += dx;
 23fa1c8:	9a00      	ldr	r2, [sp, #0]
            y0 += ystep;
 23fa1ca:	b22d      	sxth	r5, r5
            err += dx;
 23fa1cc:	1856      	adds	r6, r2, r1
 23fa1ce:	b236      	sxth	r6, r6
    for (; x0<=x1; x0++) {
 23fa1d0:	3401      	adds	r4, #1
 23fa1d2:	b224      	sxth	r4, r4
 23fa1d4:	e7e0      	b.n	23fa198 <_ZN12Adafruit_GFX9writeLineEsssst+0x7a>
        }
    }
}
 23fa1d6:	b005      	add	sp, #20
 23fa1d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

023fa1dc <_ZN12Adafruit_GFX10startWriteEv>:
/*!
   @brief    Start a display-writing routine, overwrite in subclasses.
*/
/**************************************************************************/
void Adafruit_GFX::startWrite(){
}
 23fa1dc:	4770      	bx	lr

023fa1de <_ZN12Adafruit_GFX10writePixelEsst>:
    @param   x   x coordinate
    @param   y   y coordinate
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writePixel(int16_t x, int16_t y, uint16_t color){
 23fa1de:	b410      	push	{r4}
    drawPixel(x, y, color);
 23fa1e0:	6804      	ldr	r4, [r0, #0]
 23fa1e2:	6924      	ldr	r4, [r4, #16]
 23fa1e4:	46a4      	mov	ip, r4
}
 23fa1e6:	f85d 4b04 	ldr.w	r4, [sp], #4
    drawPixel(x, y, color);
 23fa1ea:	4760      	bx	ip

023fa1ec <_ZN12Adafruit_GFX14writeFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 23fa1ec:	b430      	push	{r4, r5}
 23fa1ee:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Can be just writeLine(x, y, x, y+h-1, color);
    // or writeFillRect(x, y, 1, h, color);
    drawFastVLine(x, y, h, color);
 23fa1f2:	6804      	ldr	r4, [r0, #0]
 23fa1f4:	9502      	str	r5, [sp, #8]
 23fa1f6:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 23fa1f8:	46a4      	mov	ip, r4
}
 23fa1fa:	bc30      	pop	{r4, r5}
    drawFastVLine(x, y, h, color);
 23fa1fc:	4760      	bx	ip

023fa1fe <_ZN12Adafruit_GFX14writeFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 23fa1fe:	b430      	push	{r4, r5}
 23fa200:	f8bd 5008 	ldrh.w	r5, [sp, #8]
    // Overwrite in subclasses if startWrite is defined!
    // Example: writeLine(x, y, x+w-1, y, color);
    // or writeFillRect(x, y, w, 1, color);
    drawFastHLine(x, y, w, color);
 23fa204:	6804      	ldr	r4, [r0, #0]
 23fa206:	9502      	str	r5, [sp, #8]
 23fa208:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 23fa20a:	46a4      	mov	ip, r4
}
 23fa20c:	bc30      	pop	{r4, r5}
    drawFastHLine(x, y, w, color);
 23fa20e:	4760      	bx	ip

023fa210 <_ZN12Adafruit_GFX13writeFillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::writeFillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fa210:	b470      	push	{r4, r5, r6}
 23fa212:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 23fa216:	f8bd 6010 	ldrh.w	r6, [sp, #16]
    // Overwrite in subclasses if desired!
    fillRect(x,y,w,h,color);
 23fa21a:	6804      	ldr	r4, [r0, #0]
 23fa21c:	e9cd 5603 	strd	r5, r6, [sp, #12]
 23fa220:	6c24      	ldr	r4, [r4, #64]	; 0x40
 23fa222:	46a4      	mov	ip, r4
}
 23fa224:	bc70      	pop	{r4, r5, r6}
    fillRect(x,y,w,h,color);
 23fa226:	4760      	bx	ip

023fa228 <_ZN12Adafruit_GFX13drawFastVLineEssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastVLine(int16_t x, int16_t y,
        int16_t h, uint16_t color) {
 23fa228:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fa22c:	461c      	mov	r4, r3
 23fa22e:	4616      	mov	r6, r2
 23fa230:	4605      	mov	r5, r0
 23fa232:	460f      	mov	r7, r1
    startWrite();
 23fa234:	6803      	ldr	r3, [r0, #0]
    writeLine(x, y, x, y+h-1, color);
 23fa236:	3c01      	subs	r4, #1
        int16_t h, uint16_t color) {
 23fa238:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 23fa23c:	695b      	ldr	r3, [r3, #20]
    writeLine(x, y, x, y+h-1, color);
 23fa23e:	4434      	add	r4, r6
    startWrite();
 23fa240:	4798      	blx	r3
    writeLine(x, y, x, y+h-1, color);
 23fa242:	b224      	sxth	r4, r4
 23fa244:	682b      	ldr	r3, [r5, #0]
 23fa246:	f8cd 8004 	str.w	r8, [sp, #4]
 23fa24a:	9400      	str	r4, [sp, #0]
 23fa24c:	4628      	mov	r0, r5
 23fa24e:	6a9c      	ldr	r4, [r3, #40]	; 0x28
 23fa250:	4632      	mov	r2, r6
 23fa252:	463b      	mov	r3, r7
 23fa254:	4639      	mov	r1, r7
 23fa256:	47a0      	blx	r4
    endWrite();
 23fa258:	4628      	mov	r0, r5
 23fa25a:	682b      	ldr	r3, [r5, #0]
 23fa25c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fa25e:	b002      	add	sp, #8
 23fa260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fa264:	4718      	bx	r3

023fa266 <_ZN12Adafruit_GFX13drawFastHLineEssst>:
    @param    w   Width in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::drawFastHLine(int16_t x, int16_t y,
        int16_t w, uint16_t color) {
 23fa266:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fa26a:	4617      	mov	r7, r2
 23fa26c:	4604      	mov	r4, r0
 23fa26e:	461d      	mov	r5, r3
 23fa270:	460e      	mov	r6, r1
    startWrite();
 23fa272:	6803      	ldr	r3, [r0, #0]
        int16_t w, uint16_t color) {
 23fa274:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    startWrite();
 23fa278:	695b      	ldr	r3, [r3, #20]
 23fa27a:	4798      	blx	r3
    writeLine(x, y, x+w-1, y, color);
 23fa27c:	e9cd 7800 	strd	r7, r8, [sp]
 23fa280:	6822      	ldr	r2, [r4, #0]
 23fa282:	1e6b      	subs	r3, r5, #1
 23fa284:	4433      	add	r3, r6
 23fa286:	4620      	mov	r0, r4
 23fa288:	6a95      	ldr	r5, [r2, #40]	; 0x28
 23fa28a:	4631      	mov	r1, r6
 23fa28c:	463a      	mov	r2, r7
 23fa28e:	b21b      	sxth	r3, r3
 23fa290:	47a8      	blx	r5
    endWrite();
 23fa292:	4620      	mov	r0, r4
 23fa294:	6823      	ldr	r3, [r4, #0]
 23fa296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fa298:	b002      	add	sp, #8
 23fa29a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    endWrite();
 23fa29e:	4718      	bx	r3

023fa2a0 <_ZN12Adafruit_GFX8fillRectEsssst>:
    @param    h   Height in pixels
   @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fa2a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fa2a4:	461e      	mov	r6, r3
    startWrite();
 23fa2a6:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23fa2a8:	460c      	mov	r4, r1
    startWrite();
 23fa2aa:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23fa2ac:	4605      	mov	r5, r0
 23fa2ae:	4617      	mov	r7, r2
 23fa2b0:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 23fa2b4:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 23fa2b8:	4798      	blx	r3
    for (int16_t i=x; i<x+w; i++) {
 23fa2ba:	4426      	add	r6, r4
 23fa2bc:	42b4      	cmp	r4, r6
        writeFastVLine(i, y, h, color);
 23fa2be:	682b      	ldr	r3, [r5, #0]
    for (int16_t i=x; i<x+w; i++) {
 23fa2c0:	da0b      	bge.n	23fa2da <_ZN12Adafruit_GFX8fillRectEsssst+0x3a>
        writeFastVLine(i, y, h, color);
 23fa2c2:	f8cd 8000 	str.w	r8, [sp]
 23fa2c6:	4621      	mov	r1, r4
 23fa2c8:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fa2cc:	463a      	mov	r2, r7
 23fa2ce:	464b      	mov	r3, r9
 23fa2d0:	4628      	mov	r0, r5
 23fa2d2:	3401      	adds	r4, #1
 23fa2d4:	47d0      	blx	sl
    for (int16_t i=x; i<x+w; i++) {
 23fa2d6:	b224      	sxth	r4, r4
 23fa2d8:	e7f0      	b.n	23fa2bc <_ZN12Adafruit_GFX8fillRectEsssst+0x1c>
    }
    endWrite();
 23fa2da:	4628      	mov	r0, r5
 23fa2dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fa2de:	b002      	add	sp, #8
 23fa2e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 23fa2e4:	4718      	bx	r3

023fa2e6 <_ZN12Adafruit_GFX10fillScreenEt>:
/*!
   @brief    Fill the screen completely with one color. Update in subclasses if desired!
    @param    color 16-bit 5-6-5 Color to fill with
*/
/**************************************************************************/
void Adafruit_GFX::fillScreen(uint16_t color) {
 23fa2e6:	b513      	push	{r0, r1, r4, lr}
    fillRect(0, 0, _width, _height, color);
 23fa2e8:	9101      	str	r1, [sp, #4]
 23fa2ea:	f9b0 100e 	ldrsh.w	r1, [r0, #14]
 23fa2ee:	6802      	ldr	r2, [r0, #0]
 23fa2f0:	9100      	str	r1, [sp, #0]
 23fa2f2:	6c14      	ldr	r4, [r2, #64]	; 0x40
 23fa2f4:	2200      	movs	r2, #0
 23fa2f6:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fa2fa:	4611      	mov	r1, r2
 23fa2fc:	47a0      	blx	r4
}
 23fa2fe:	b002      	add	sp, #8
 23fa300:	bd10      	pop	{r4, pc}

023fa302 <_ZN12Adafruit_GFX8drawLineEsssst>:
    @param    y1  End point y coordinate
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1,
        uint16_t color) {
 23fa302:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    // Update in subclasses if desired!
    if(x0 == x1){
 23fa306:	4299      	cmp	r1, r3
        uint16_t color) {
 23fa308:	4616      	mov	r6, r2
 23fa30a:	4680      	mov	r8, r0
 23fa30c:	460d      	mov	r5, r1
 23fa30e:	461c      	mov	r4, r3
 23fa310:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fa314:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
        if(y0 > y1) _swap_int16_t(y0, y1);
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fa318:	6802      	ldr	r2, [r0, #0]
    if(x0 == x1){
 23fa31a:	d112      	bne.n	23fa342 <_ZN12Adafruit_GFX8drawLineEsssst+0x40>
        if(y0 > y1) _swap_int16_t(y0, y1);
 23fa31c:	42be      	cmp	r6, r7
 23fa31e:	bfc2      	ittt	gt
 23fa320:	4633      	movgt	r3, r6
 23fa322:	463e      	movgt	r6, r7
 23fa324:	461f      	movgt	r7, r3
        drawFastVLine(x0, y0, y1 - y0 + 1, color);
 23fa326:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fa32a:	1c7b      	adds	r3, r7, #1
 23fa32c:	6b94      	ldr	r4, [r2, #56]	; 0x38
 23fa32e:	1b9b      	subs	r3, r3, r6
    } else if(y0 == y1){
        if(x0 > x1) _swap_int16_t(x0, x1);
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fa330:	4632      	mov	r2, r6
 23fa332:	4629      	mov	r1, r5
 23fa334:	4640      	mov	r0, r8
 23fa336:	46a4      	mov	ip, r4
 23fa338:	b21b      	sxth	r3, r3
    } else {
        startWrite();
        writeLine(x0, y0, x1, y1, color);
        endWrite();
    }
}
 23fa33a:	b003      	add	sp, #12
 23fa33c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fa340:	4760      	bx	ip
    } else if(y0 == y1){
 23fa342:	42be      	cmp	r6, r7
 23fa344:	d10a      	bne.n	23fa35c <_ZN12Adafruit_GFX8drawLineEsssst+0x5a>
        if(x0 > x1) _swap_int16_t(x0, x1);
 23fa346:	4299      	cmp	r1, r3
 23fa348:	bfc2      	ittt	gt
 23fa34a:	460b      	movgt	r3, r1
 23fa34c:	4625      	movgt	r5, r4
 23fa34e:	461c      	movgt	r4, r3
        drawFastHLine(x0, y0, x1 - x0 + 1, color);
 23fa350:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 23fa354:	1c63      	adds	r3, r4, #1
 23fa356:	1b5b      	subs	r3, r3, r5
 23fa358:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
 23fa35a:	e7e9      	b.n	23fa330 <_ZN12Adafruit_GFX8drawLineEsssst+0x2e>
        startWrite();
 23fa35c:	6953      	ldr	r3, [r2, #20]
 23fa35e:	4798      	blx	r3
        writeLine(x0, y0, x1, y1, color);
 23fa360:	e9cd 7900 	strd	r7, r9, [sp]
 23fa364:	f8d8 3000 	ldr.w	r3, [r8]
 23fa368:	4640      	mov	r0, r8
 23fa36a:	6a9f      	ldr	r7, [r3, #40]	; 0x28
 23fa36c:	4632      	mov	r2, r6
 23fa36e:	4623      	mov	r3, r4
 23fa370:	4629      	mov	r1, r5
 23fa372:	47b8      	blx	r7
        endWrite();
 23fa374:	4640      	mov	r0, r8
 23fa376:	f8d8 3000 	ldr.w	r3, [r8]
 23fa37a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fa37c:	b003      	add	sp, #12
 23fa37e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        endWrite();
 23fa382:	4718      	bx	r3

023fa384 <_ZN12Adafruit_GFX8drawRectEsssst>:
    @param    h   Height in pixels
    @param    color 16-bit 5-6-5 Color to draw with
*/
/**************************************************************************/
void Adafruit_GFX::drawRect(int16_t x, int16_t y, int16_t w, int16_t h,
        uint16_t color) {
 23fa384:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 23fa388:	4604      	mov	r4, r0
 23fa38a:	460f      	mov	r7, r1
 23fa38c:	4616      	mov	r6, r2
 23fa38e:	461d      	mov	r5, r3
    startWrite();
 23fa390:	6803      	ldr	r3, [r0, #0]
        uint16_t color) {
 23fa392:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    startWrite();
 23fa396:	695b      	ldr	r3, [r3, #20]
        uint16_t color) {
 23fa398:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    startWrite();
 23fa39c:	4798      	blx	r3
    writeFastHLine(x, y, w, color);
 23fa39e:	6823      	ldr	r3, [r4, #0]
 23fa3a0:	f8cd 8000 	str.w	r8, [sp]
 23fa3a4:	4632      	mov	r2, r6
 23fa3a6:	4639      	mov	r1, r7
 23fa3a8:	4620      	mov	r0, r4
 23fa3aa:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fa3ae:	462b      	mov	r3, r5
 23fa3b0:	47d0      	blx	sl
    writeFastHLine(x, y+h-1, w, color);
 23fa3b2:	6823      	ldr	r3, [r4, #0]
 23fa3b4:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 23fa3b8:	f8cd 8000 	str.w	r8, [sp]
 23fa3bc:	4432      	add	r2, r6
 23fa3be:	4639      	mov	r1, r7
 23fa3c0:	4620      	mov	r0, r4
 23fa3c2:	f8d3 a024 	ldr.w	sl, [r3, #36]	; 0x24
 23fa3c6:	b212      	sxth	r2, r2
 23fa3c8:	462b      	mov	r3, r5
 23fa3ca:	47d0      	blx	sl
    writeFastVLine(x, y, h, color);
 23fa3cc:	6823      	ldr	r3, [r4, #0]
 23fa3ce:	f8cd 8000 	str.w	r8, [sp]
 23fa3d2:	4632      	mov	r2, r6
 23fa3d4:	4639      	mov	r1, r7
 23fa3d6:	4620      	mov	r0, r4
 23fa3d8:	f8d3 a020 	ldr.w	sl, [r3, #32]
 23fa3dc:	464b      	mov	r3, r9
 23fa3de:	47d0      	blx	sl
    writeFastVLine(x+w-1, y, h, color);
 23fa3e0:	1e6b      	subs	r3, r5, #1
 23fa3e2:	19d9      	adds	r1, r3, r7
 23fa3e4:	6823      	ldr	r3, [r4, #0]
 23fa3e6:	f8cd 8000 	str.w	r8, [sp]
 23fa3ea:	4620      	mov	r0, r4
 23fa3ec:	6a1d      	ldr	r5, [r3, #32]
 23fa3ee:	4632      	mov	r2, r6
 23fa3f0:	464b      	mov	r3, r9
 23fa3f2:	b209      	sxth	r1, r1
 23fa3f4:	47a8      	blx	r5
    endWrite();
 23fa3f6:	4620      	mov	r0, r4
 23fa3f8:	6823      	ldr	r3, [r4, #0]
 23fa3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fa3fc:	b002      	add	sp, #8
 23fa3fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    endWrite();
 23fa402:	4718      	bx	r3

023fa404 <_ZN12Adafruit_GFX13invertDisplayEb>:
    @param   i  True if you want to invert, false to make 'normal'
*/
/**************************************************************************/
void Adafruit_GFX::invertDisplay(boolean i) {
    // Do nothing, must be subclassed if supported by hardware
}
 23fa404:	4770      	bx	lr

023fa406 <_ZN12Adafruit_GFX11setRotationEh>:
    rotation = (x & 3);
 23fa406:	f001 0303 	and.w	r3, r1, #3
            _height = HEIGHT;
 23fa40a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
    rotation = (x & 3);
 23fa40e:	7683      	strb	r3, [r0, #26]
            _width  = WIDTH;
 23fa410:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
    switch(rotation) {
 23fa414:	07c9      	lsls	r1, r1, #31
            _width  = WIDTH;
 23fa416:	bf59      	ittee	pl
 23fa418:	8183      	strhpl	r3, [r0, #12]
            _height = HEIGHT;
 23fa41a:	81c2      	strhpl	r2, [r0, #14]
            _width  = HEIGHT;
 23fa41c:	8182      	strhmi	r2, [r0, #12]
            _height = WIDTH;
 23fa41e:	81c3      	strhmi	r3, [r0, #14]
}
 23fa420:	4770      	bx	lr
	...

023fa424 <_ZN12Adafruit_GFXC1Ess>:
Adafruit_GFX::Adafruit_GFX(int16_t w, int16_t h):
 23fa424:	b530      	push	{r4, r5, lr}
WIDTH(w), HEIGHT(h)
 23fa426:	8101      	strh	r1, [r0, #8]
    Print() : write_error(0) {}
 23fa428:	2400      	movs	r4, #0
    _width    = WIDTH;
 23fa42a:	8181      	strh	r1, [r0, #12]
    textsize_x = textsize_y  = 1;
 23fa42c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
WIDTH(w), HEIGHT(h)
 23fa430:	4d05      	ldr	r5, [pc, #20]	; (23fa448 <_ZN12Adafruit_GFXC1Ess+0x24>)
 23fa432:	8142      	strh	r2, [r0, #10]
    _height   = HEIGHT;
 23fa434:	81c2      	strh	r2, [r0, #14]
    textsize_x = textsize_y  = 1;
 23fa436:	4a05      	ldr	r2, [pc, #20]	; (23fa44c <_ZN12Adafruit_GFXC1Ess+0x28>)
 23fa438:	6044      	str	r4, [r0, #4]
 23fa43a:	e9c0 1205 	strd	r1, r2, [r0, #20]
WIDTH(w), HEIGHT(h)
 23fa43e:	6005      	str	r5, [r0, #0]
    cursor_y  = cursor_x    = 0;
 23fa440:	6104      	str	r4, [r0, #16]
    _cp437    = false;
 23fa442:	7704      	strb	r4, [r0, #28]
    gfxFont   = NULL;
 23fa444:	6204      	str	r4, [r0, #32]
}
 23fa446:	bd30      	pop	{r4, r5, pc}
 23fa448:	023ffc48 	.word	0x023ffc48
 23fa44c:	01000101 	.word	0x01000101

023fa450 <_ZN12Adafruit_GFX8drawCharEsshtthh>:
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 23fa450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fa454:	ed2d 8b02 	vpush	{d8}
 23fa458:	b091      	sub	sp, #68	; 0x44
 23fa45a:	4616      	mov	r6, r2
 23fa45c:	461f      	mov	r7, r3
    if(!gfxFont) { // 'Classic' built-in font
 23fa45e:	6a02      	ldr	r2, [r0, #32]
  uint16_t color, uint16_t bg, uint8_t size_x, uint8_t size_y) {
 23fa460:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 23fa464:	4683      	mov	fp, r0
 23fa466:	f8bd 8074 	ldrh.w	r8, [sp, #116]	; 0x74
 23fa46a:	f89d 5078 	ldrb.w	r5, [sp, #120]	; 0x78
 23fa46e:	f89d 407c 	ldrb.w	r4, [sp, #124]	; 0x7c
 23fa472:	9103      	str	r1, [sp, #12]
 23fa474:	9304      	str	r3, [sp, #16]
    if(!gfxFont) { // 'Classic' built-in font
 23fa476:	2a00      	cmp	r2, #0
 23fa478:	f040 80c5 	bne.w	23fa606 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1b6>
        if((x >= _width)            || // Clip right
 23fa47c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fa480:	428b      	cmp	r3, r1
 23fa482:	f340 814c 	ble.w	23fa71e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
 23fa486:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fa48a:	42b3      	cmp	r3, r6
 23fa48c:	f340 8147 	ble.w	23fa71e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((x + 6 * size_x - 1) < 0) || // Clip left
 23fa490:	2306      	movs	r3, #6
 23fa492:	fb13 1305 	smlabb	r3, r3, r5, r1
           (y >= _height)           || // Clip bottom
 23fa496:	2b00      	cmp	r3, #0
 23fa498:	f340 8141 	ble.w	23fa71e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
           ((y + 8 * size_y - 1) < 0))   // Clip top
 23fa49c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
           ((x + 6 * size_x - 1) < 0) || // Clip left
 23fa4a0:	2b00      	cmp	r3, #0
 23fa4a2:	f340 813c 	ble.w	23fa71e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2ce>
        if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 23fa4a6:	7f03      	ldrb	r3, [r0, #28]
 23fa4a8:	b91b      	cbnz	r3, 23fa4b2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x62>
 23fa4aa:	2faf      	cmp	r7, #175	; 0xaf
 23fa4ac:	bf84      	itt	hi
 23fa4ae:	3701      	addhi	r7, #1
 23fa4b0:	b2ff      	uxtbhi	r7, r7
        startWrite();
 23fa4b2:	f8db 3000 	ldr.w	r3, [fp]
 23fa4b6:	4658      	mov	r0, fp
 23fa4b8:	695b      	ldr	r3, [r3, #20]
 23fa4ba:	4798      	blx	r3
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fa4bc:	2205      	movs	r2, #5
 23fa4be:	9209      	str	r2, [sp, #36]	; 0x24
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 23fa4c0:	2200      	movs	r2, #0
 23fa4c2:	9205      	str	r2, [sp, #20]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fa4c4:	4a98      	ldr	r2, [pc, #608]	; (23fa728 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2d8>)
 23fa4c6:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 23fa4ca:	18d3      	adds	r3, r2, r3
 23fa4cc:	930c      	str	r3, [sp, #48]	; 0x30
                        writePixel(x+i, y+j, color);
 23fa4ce:	b2b3      	uxth	r3, r6
 23fa4d0:	9306      	str	r3, [sp, #24]
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fa4d2:	9a05      	ldr	r2, [sp, #20]
 23fa4d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fa4d6:	fb02 f905 	mul.w	r9, r2, r5
            uint8_t line = pgm_read_byte(&font[c * 5 + i]);
 23fa4da:	5c9b      	ldrb	r3, [r3, r2]
 23fa4dc:	9307      	str	r3, [sp, #28]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fa4de:	b2ab      	uxth	r3, r5
 23fa4e0:	930b      	str	r3, [sp, #44]	; 0x2c
 23fa4e2:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 23fa4e6:	9308      	str	r3, [sp, #32]
 23fa4e8:	9b03      	ldr	r3, [sp, #12]
 23fa4ea:	fa19 f983 	uxtah	r9, r9, r3
 23fa4ee:	fa0f f389 	sxth.w	r3, r9
 23fa4f2:	ee08 3a10 	vmov	s16, r3
 23fa4f6:	2308      	movs	r3, #8
            for(int8_t j=0; j<8; j++, line >>= 1) {
 23fa4f8:	f04f 0900 	mov.w	r9, #0
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fa4fc:	930a      	str	r3, [sp, #40]	; 0x28
                        writePixel(x+i, y+j, bg);
 23fa4fe:	9b03      	ldr	r3, [sp, #12]
 23fa500:	eb02 0a03 	add.w	sl, r2, r3
 23fa504:	fa0f fa8a 	sxth.w	sl, sl
                if(line & 1) {
 23fa508:	9a07      	ldr	r2, [sp, #28]
                        writePixel(x+i, y+j, color);
 23fa50a:	f8db 3000 	ldr.w	r3, [fp]
                if(line & 1) {
 23fa50e:	07d2      	lsls	r2, r2, #31
 23fa510:	d552      	bpl.n	23fa5b8 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x168>
                    if(size_x == 1 && size_y == 1)
 23fa512:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 23fa514:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 23fa518:	d13e      	bne.n	23fa598 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
 23fa51a:	2c01      	cmp	r4, #1
 23fa51c:	d13c      	bne.n	23fa598 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x148>
                        writePixel(x+i, y+j, color);
 23fa51e:	699b      	ldr	r3, [r3, #24]
 23fa520:	9906      	ldr	r1, [sp, #24]
 23fa522:	461f      	mov	r7, r3
 23fa524:	9b04      	ldr	r3, [sp, #16]
 23fa526:	440a      	add	r2, r1
                        writePixel(x+i, y+j, bg);
 23fa528:	4651      	mov	r1, sl
 23fa52a:	4658      	mov	r0, fp
 23fa52c:	b212      	sxth	r2, r2
 23fa52e:	47b8      	blx	r7
            for(int8_t j=0; j<8; j++, line >>= 1) {
 23fa530:	f109 0301 	add.w	r3, r9, #1
 23fa534:	fa4f f983 	sxtb.w	r9, r3
 23fa538:	9b07      	ldr	r3, [sp, #28]
 23fa53a:	085b      	lsrs	r3, r3, #1
 23fa53c:	9307      	str	r3, [sp, #28]
 23fa53e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 23fa540:	3b01      	subs	r3, #1
 23fa542:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fa546:	930a      	str	r3, [sp, #40]	; 0x28
 23fa548:	d1de      	bne.n	23fa508 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xb8>
        for(int8_t i=0; i<5; i++ ) { // Char bitmap = 5 columns
 23fa54a:	9f05      	ldr	r7, [sp, #20]
 23fa54c:	3701      	adds	r7, #1
 23fa54e:	b27b      	sxtb	r3, r7
 23fa550:	9305      	str	r3, [sp, #20]
 23fa552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 23fa554:	3b01      	subs	r3, #1
 23fa556:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 23fa55a:	9309      	str	r3, [sp, #36]	; 0x24
 23fa55c:	d1b9      	bne.n	23fa4d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x82>
        if(bg != color) { // If opaque, draw vertical line for last column
 23fa55e:	9b04      	ldr	r3, [sp, #16]
 23fa560:	4543      	cmp	r3, r8
 23fa562:	d00f      	beq.n	23fa584 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
            if(size_x == 1 && size_y == 1) writeFastVLine(x+5, y, 8, bg);
 23fa564:	2d01      	cmp	r5, #1
 23fa566:	f8db 3000 	ldr.w	r3, [fp]
 23fa56a:	d13b      	bne.n	23fa5e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fa56c:	2c01      	cmp	r4, #1
 23fa56e:	d139      	bne.n	23fa5e4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x194>
 23fa570:	9908      	ldr	r1, [sp, #32]
 23fa572:	f8cd 8000 	str.w	r8, [sp]
 23fa576:	3105      	adds	r1, #5
 23fa578:	6a1c      	ldr	r4, [r3, #32]
 23fa57a:	4632      	mov	r2, r6
 23fa57c:	2308      	movs	r3, #8
 23fa57e:	4658      	mov	r0, fp
 23fa580:	b209      	sxth	r1, r1
 23fa582:	47a0      	blx	r4
        endWrite();
 23fa584:	4658      	mov	r0, fp
 23fa586:	f8db 3000 	ldr.w	r3, [fp]
 23fa58a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fa58c:	b011      	add	sp, #68	; 0x44
 23fa58e:	ecbd 8b02 	vpop	{d8}
 23fa592:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        endWrite();
 23fa596:	4718      	bx	r3
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, color);
 23fa598:	fb14 f202 	smulbb	r2, r4, r2
 23fa59c:	9906      	ldr	r1, [sp, #24]
 23fa59e:	440a      	add	r2, r1
 23fa5a0:	9904      	ldr	r1, [sp, #16]
 23fa5a2:	9101      	str	r1, [sp, #4]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fa5a4:	9400      	str	r4, [sp, #0]
 23fa5a6:	69db      	ldr	r3, [r3, #28]
 23fa5a8:	ee18 1a10 	vmov	r1, s16
 23fa5ac:	461f      	mov	r7, r3
 23fa5ae:	4658      	mov	r0, fp
 23fa5b0:	462b      	mov	r3, r5
 23fa5b2:	b212      	sxth	r2, r2
 23fa5b4:	47b8      	blx	r7
 23fa5b6:	e7bb      	b.n	23fa530 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                } else if(bg != color) {
 23fa5b8:	9a04      	ldr	r2, [sp, #16]
 23fa5ba:	4542      	cmp	r2, r8
 23fa5bc:	d0b8      	beq.n	23fa530 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xe0>
                    if(size_x == 1 && size_y == 1)
 23fa5be:	2d01      	cmp	r5, #1
                        writePixel(x+i, y+j, color);
 23fa5c0:	fa1f f289 	uxth.w	r2, r9
                    if(size_x == 1 && size_y == 1)
 23fa5c4:	d107      	bne.n	23fa5d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
 23fa5c6:	2c01      	cmp	r4, #1
 23fa5c8:	d105      	bne.n	23fa5d6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x186>
                        writePixel(x+i, y+j, bg);
 23fa5ca:	699b      	ldr	r3, [r3, #24]
 23fa5cc:	9906      	ldr	r1, [sp, #24]
 23fa5ce:	461f      	mov	r7, r3
 23fa5d0:	440a      	add	r2, r1
 23fa5d2:	4643      	mov	r3, r8
 23fa5d4:	e7a8      	b.n	23fa528 <_ZN12Adafruit_GFX8drawCharEsshtthh+0xd8>
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fa5d6:	fb14 f202 	smulbb	r2, r4, r2
 23fa5da:	9906      	ldr	r1, [sp, #24]
 23fa5dc:	f8cd 8004 	str.w	r8, [sp, #4]
 23fa5e0:	440a      	add	r2, r1
 23fa5e2:	e7df      	b.n	23fa5a4 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x154>
            else          writeFillRect(x+5*size_x, y, size_x, 8*size_y, bg);
 23fa5e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fa5e6:	00e4      	lsls	r4, r4, #3
 23fa5e8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 23fa5ec:	9a08      	ldr	r2, [sp, #32]
 23fa5ee:	f8cd 8004 	str.w	r8, [sp, #4]
 23fa5f2:	440a      	add	r2, r1
 23fa5f4:	4611      	mov	r1, r2
 23fa5f6:	9400      	str	r4, [sp, #0]
 23fa5f8:	69dc      	ldr	r4, [r3, #28]
 23fa5fa:	4632      	mov	r2, r6
 23fa5fc:	462b      	mov	r3, r5
 23fa5fe:	4658      	mov	r0, fp
 23fa600:	b209      	sxth	r1, r1
 23fa602:	47a0      	blx	r4
        endWrite();
 23fa604:	e7be      	b.n	23fa584 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fa606:	7a13      	ldrb	r3, [r2, #8]
    return gfxFont->glyph + c;
 23fa608:	6851      	ldr	r1, [r2, #4]
        c -= (uint8_t)pgm_read_byte(&gfxFont->first);
 23fa60a:	1aff      	subs	r7, r7, r3
    return gfxFont->bitmap;
 23fa60c:	6812      	ldr	r2, [r2, #0]
    return gfxFont->glyph + c;
 23fa60e:	b2ff      	uxtb	r7, r7
    return gfxFont->bitmap;
 23fa610:	920b      	str	r2, [sp, #44]	; 0x2c
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fa612:	f831 2037 	ldrh.w	r2, [r1, r7, lsl #3]
    return gfxFont->glyph + c;
 23fa616:	eb01 03c7 	add.w	r3, r1, r7, lsl #3
        uint16_t bo = pgm_read_word(&glyph->bitmapOffset);
 23fa61a:	9206      	str	r2, [sp, #24]
        uint8_t  w  = pgm_read_byte(&glyph->width),
 23fa61c:	789a      	ldrb	r2, [r3, #2]
        if(size_x > 1 || size_y > 1) {
 23fa61e:	2d01      	cmp	r5, #1
        uint8_t  w  = pgm_read_byte(&glyph->width),
 23fa620:	9209      	str	r2, [sp, #36]	; 0x24
                 h  = pgm_read_byte(&glyph->height);
 23fa622:	78da      	ldrb	r2, [r3, #3]
                 yo = pgm_read_byte(&glyph->yOffset);
 23fa624:	f993 a006 	ldrsb.w	sl, [r3, #6]
                 h  = pgm_read_byte(&glyph->height);
 23fa628:	920c      	str	r2, [sp, #48]	; 0x30
        int8_t   xo = pgm_read_byte(&glyph->xOffset),
 23fa62a:	f993 2005 	ldrsb.w	r2, [r3, #5]
 23fa62e:	920a      	str	r2, [sp, #40]	; 0x28
        if(size_x > 1 || size_y > 1) {
 23fa630:	d801      	bhi.n	23fa636 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1e6>
 23fa632:	2c01      	cmp	r4, #1
 23fa634:	d957      	bls.n	23fa6e6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x296>
            xo16 = xo;
 23fa636:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 23fa63a:	9308      	str	r3, [sp, #32]
            yo16 = yo;
 23fa63c:	fa0f f38a 	sxth.w	r3, sl
 23fa640:	9307      	str	r3, [sp, #28]
        uint8_t  xx, yy, bits = 0, bit = 0;
 23fa642:	f04f 0800 	mov.w	r8, #0
 23fa646:	46c1      	mov	r9, r8
        for(yy=0; yy<h; yy++) {
 23fa648:	4647      	mov	r7, r8
        startWrite();
 23fa64a:	f8db 3000 	ldr.w	r3, [fp]
 23fa64e:	4658      	mov	r0, fp
 23fa650:	695b      	ldr	r3, [r3, #20]
 23fa652:	4798      	blx	r3
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fa654:	b2b3      	uxth	r3, r6
 23fa656:	930e      	str	r3, [sp, #56]	; 0x38
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fa658:	fa1a f386 	uxtah	r3, sl, r6
 23fa65c:	930f      	str	r3, [sp, #60]	; 0x3c
        for(yy=0; yy<h; yy++) {
 23fa65e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 23fa660:	429f      	cmp	r7, r3
 23fa662:	d28f      	bcs.n	23fa584 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x134>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fa664:	9b07      	ldr	r3, [sp, #28]
 23fa666:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 23fa668:	443b      	add	r3, r7
 23fa66a:	fb03 2304 	mla	r3, r3, r4, r2
            for(xx=0; xx<w; xx++) {
 23fa66e:	2200      	movs	r2, #0
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fa670:	b21b      	sxth	r3, r3
 23fa672:	ee08 3a10 	vmov	s16, r3
 23fa676:	4643      	mov	r3, r8
            for(xx=0; xx<w; xx++) {
 23fa678:	9205      	str	r2, [sp, #20]
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fa67a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 23fa67c:	eb02 0a07 	add.w	sl, r2, r7
 23fa680:	fa0f fa8a 	sxth.w	sl, sl
            for(xx=0; xx<w; xx++) {
 23fa684:	9a09      	ldr	r2, [sp, #36]	; 0x24
 23fa686:	9905      	ldr	r1, [sp, #20]
 23fa688:	4291      	cmp	r1, r2
 23fa68a:	d241      	bcs.n	23fa710 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x2c0>
                if(!(bit++ & 7)) {
 23fa68c:	1c5a      	adds	r2, r3, #1
 23fa68e:	b2d2      	uxtb	r2, r2
 23fa690:	075b      	lsls	r3, r3, #29
 23fa692:	920d      	str	r2, [sp, #52]	; 0x34
 23fa694:	d107      	bne.n	23fa6a6 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x256>
                    bits = pgm_read_byte(&bitmap[bo++]);
 23fa696:	9b06      	ldr	r3, [sp, #24]
 23fa698:	9906      	ldr	r1, [sp, #24]
 23fa69a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 23fa69c:	3301      	adds	r3, #1
 23fa69e:	b29b      	uxth	r3, r3
 23fa6a0:	f812 9001 	ldrb.w	r9, [r2, r1]
 23fa6a4:	9306      	str	r3, [sp, #24]
                if(bits & 0x80) {
 23fa6a6:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fa6aa:	d012      	beq.n	23fa6d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
                    if(size_x == 1 && size_y == 1) {
 23fa6ac:	2d01      	cmp	r5, #1
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fa6ae:	f8db 3000 	ldr.w	r3, [fp]
                        writeFillRect(x+i*size_x, y+j*size_y, size_x, size_y, bg);
 23fa6b2:	f8bd 100c 	ldrh.w	r1, [sp, #12]
                    if(size_x == 1 && size_y == 1) {
 23fa6b6:	d11a      	bne.n	23fa6ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
 23fa6b8:	2c01      	cmp	r4, #1
 23fa6ba:	d118      	bne.n	23fa6ee <_ZN12Adafruit_GFX8drawCharEsshtthh+0x29e>
                        writePixel(x+xo+xx, y+yo+yy, color);
 23fa6bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 23fa6be:	699b      	ldr	r3, [r3, #24]
 23fa6c0:	4411      	add	r1, r2
 23fa6c2:	9a05      	ldr	r2, [sp, #20]
 23fa6c4:	461e      	mov	r6, r3
 23fa6c6:	4411      	add	r1, r2
 23fa6c8:	4658      	mov	r0, fp
 23fa6ca:	4652      	mov	r2, sl
 23fa6cc:	9b04      	ldr	r3, [sp, #16]
 23fa6ce:	b209      	sxth	r1, r1
 23fa6d0:	47b0      	blx	r6
            for(xx=0; xx<w; xx++) {
 23fa6d2:	9e05      	ldr	r6, [sp, #20]
                bits <<= 1;
 23fa6d4:	ea4f 0949 	mov.w	r9, r9, lsl #1
            for(xx=0; xx<w; xx++) {
 23fa6d8:	3601      	adds	r6, #1
 23fa6da:	b2f3      	uxtb	r3, r6
 23fa6dc:	9305      	str	r3, [sp, #20]
                bits <<= 1;
 23fa6de:	fa5f f989 	uxtb.w	r9, r9
                if(!(bit++ & 7)) {
 23fa6e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
            for(xx=0; xx<w; xx++) {
 23fa6e4:	e7ce      	b.n	23fa684 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x234>
        int16_t  xo16 = 0, yo16 = 0;
 23fa6e6:	2300      	movs	r3, #0
 23fa6e8:	e9cd 3307 	strd	r3, r3, [sp, #28]
 23fa6ec:	e7a9      	b.n	23fa642 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x1f2>
                        writeFillRect(x+(xo16+xx)*size_x, y+(yo16+yy)*size_y,
 23fa6ee:	9805      	ldr	r0, [sp, #20]
 23fa6f0:	9a08      	ldr	r2, [sp, #32]
 23fa6f2:	4402      	add	r2, r0
 23fa6f4:	fb02 1105 	mla	r1, r2, r5, r1
 23fa6f8:	9a04      	ldr	r2, [sp, #16]
 23fa6fa:	4658      	mov	r0, fp
 23fa6fc:	e9cd 4200 	strd	r4, r2, [sp]
 23fa700:	69db      	ldr	r3, [r3, #28]
 23fa702:	ee18 2a10 	vmov	r2, s16
 23fa706:	461e      	mov	r6, r3
 23fa708:	b209      	sxth	r1, r1
 23fa70a:	462b      	mov	r3, r5
 23fa70c:	47b0      	blx	r6
 23fa70e:	e7e0      	b.n	23fa6d2 <_ZN12Adafruit_GFX8drawCharEsshtthh+0x282>
 23fa710:	9b09      	ldr	r3, [sp, #36]	; 0x24
        for(yy=0; yy<h; yy++) {
 23fa712:	3701      	adds	r7, #1
 23fa714:	4498      	add	r8, r3
 23fa716:	fa5f f888 	uxtb.w	r8, r8
 23fa71a:	b2ff      	uxtb	r7, r7
 23fa71c:	e79f      	b.n	23fa65e <_ZN12Adafruit_GFX8drawCharEsshtthh+0x20e>
}
 23fa71e:	b011      	add	sp, #68	; 0x44
 23fa720:	ecbd 8b02 	vpop	{d8}
 23fa724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fa728:	023ff740 	.word	0x023ff740

023fa72c <_ZN12Adafruit_GFX5writeEh>:
size_t Adafruit_GFX::write(uint8_t c) {
 23fa72c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if(!gfxFont) { // 'Classic' built-in font
 23fa72e:	6a02      	ldr	r2, [r0, #32]
size_t Adafruit_GFX::write(uint8_t c) {
 23fa730:	4604      	mov	r4, r0
 23fa732:	460b      	mov	r3, r1
 23fa734:	b085      	sub	sp, #20
    if(!gfxFont) { // 'Classic' built-in font
 23fa736:	2a00      	cmp	r2, #0
 23fa738:	d134      	bne.n	23fa7a4 <_ZN12Adafruit_GFX5writeEh+0x78>
        if(c == '\n') {                        // Newline?
 23fa73a:	290a      	cmp	r1, #10
 23fa73c:	d108      	bne.n	23fa750 <_ZN12Adafruit_GFX5writeEh+0x24>
            cursor_y += textsize_y * 8;        // advance y one line
 23fa73e:	8a43      	ldrh	r3, [r0, #18]
            cursor_x  = 0;                     // Reset x to zero,
 23fa740:	8202      	strh	r2, [r0, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 23fa742:	7e42      	ldrb	r2, [r0, #25]
 23fa744:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
            cursor_y += (int16_t)textsize_y *
 23fa748:	8263      	strh	r3, [r4, #18]
}
 23fa74a:	2001      	movs	r0, #1
 23fa74c:	b005      	add	sp, #20
 23fa74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        } else if(c != '\r') {                 // Ignore carriage returns
 23fa750:	290d      	cmp	r1, #13
 23fa752:	d0fa      	beq.n	23fa74a <_ZN12Adafruit_GFX5writeEh+0x1e>
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fa754:	7ee1      	ldrb	r1, [r4, #27]
 23fa756:	7e00      	ldrb	r0, [r0, #24]
            cursor_y += textsize_y * 8;        // advance y one line
 23fa758:	7e65      	ldrb	r5, [r4, #25]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fa75a:	b171      	cbz	r1, 23fa77a <_ZN12Adafruit_GFX5writeEh+0x4e>
 23fa75c:	2106      	movs	r1, #6
 23fa75e:	f9b4 6010 	ldrsh.w	r6, [r4, #16]
 23fa762:	fb11 6100 	smlabb	r1, r1, r0, r6
 23fa766:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 23fa76a:	42b1      	cmp	r1, r6
            cursor_y += textsize_y * 8;        // advance y one line
 23fa76c:	bfc1      	itttt	gt
 23fa76e:	f9b4 1012 	ldrshgt.w	r1, [r4, #18]
                cursor_x  = 0;                 // Reset x to zero,
 23fa772:	8222      	strhgt	r2, [r4, #16]
                cursor_y += textsize_y * 8;    // advance y one line
 23fa774:	eb01 02c5 	addgt.w	r2, r1, r5, lsl #3
 23fa778:	8262      	strhgt	r2, [r4, #18]
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 23fa77a:	8ae2      	ldrh	r2, [r4, #22]
 23fa77c:	e9cd 0502 	strd	r0, r5, [sp, #8]
 23fa780:	9201      	str	r2, [sp, #4]
 23fa782:	8aa2      	ldrh	r2, [r4, #20]
 23fa784:	4620      	mov	r0, r4
 23fa786:	9200      	str	r2, [sp, #0]
 23fa788:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fa78c:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fa790:	f7ff fe5e 	bl	23fa450 <_ZN12Adafruit_GFX8drawCharEsshtthh>
            cursor_x += textsize_x * 6;          // Advance x one char
 23fa794:	7e23      	ldrb	r3, [r4, #24]
 23fa796:	8a22      	ldrh	r2, [r4, #16]
 23fa798:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 23fa79c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fa7a0:	8223      	strh	r3, [r4, #16]
 23fa7a2:	e7d2      	b.n	23fa74a <_ZN12Adafruit_GFX5writeEh+0x1e>
        if(c == '\n') {
 23fa7a4:	290a      	cmp	r1, #10
 23fa7a6:	d107      	bne.n	23fa7b8 <_ZN12Adafruit_GFX5writeEh+0x8c>
            cursor_x  = 0;
 23fa7a8:	2300      	movs	r3, #0
 23fa7aa:	8203      	strh	r3, [r0, #16]
            cursor_y += (int16_t)textsize_y *
 23fa7ac:	7e41      	ldrb	r1, [r0, #25]
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fa7ae:	7a92      	ldrb	r2, [r2, #10]
            cursor_y += (int16_t)textsize_y *
 23fa7b0:	8a43      	ldrh	r3, [r0, #18]
 23fa7b2:	fb01 3302 	mla	r3, r1, r2, r3
 23fa7b6:	e7c7      	b.n	23fa748 <_ZN12Adafruit_GFX5writeEh+0x1c>
        } else if(c != '\r') {
 23fa7b8:	290d      	cmp	r1, #13
 23fa7ba:	d0c6      	beq.n	23fa74a <_ZN12Adafruit_GFX5writeEh+0x1e>
            uint8_t first = pgm_read_byte(&gfxFont->first);
 23fa7bc:	7a15      	ldrb	r5, [r2, #8]
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
 23fa7be:	42a9      	cmp	r1, r5
 23fa7c0:	d3c3      	bcc.n	23fa74a <_ZN12Adafruit_GFX5writeEh+0x1e>
 23fa7c2:	7a51      	ldrb	r1, [r2, #9]
 23fa7c4:	4299      	cmp	r1, r3
 23fa7c6:	d3c0      	bcc.n	23fa74a <_ZN12Adafruit_GFX5writeEh+0x1e>
    return gfxFont->glyph + c;
 23fa7c8:	6851      	ldr	r1, [r2, #4]
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
 23fa7ca:	1b5d      	subs	r5, r3, r5
    return gfxFont->glyph + c;
 23fa7cc:	b2ed      	uxtb	r5, r5
 23fa7ce:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
                uint8_t   w     = pgm_read_byte(&glyph->width),
 23fa7d2:	78a8      	ldrb	r0, [r5, #2]
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
 23fa7d4:	b328      	cbz	r0, 23fa822 <_ZN12Adafruit_GFX5writeEh+0xf6>
 23fa7d6:	78e9      	ldrb	r1, [r5, #3]
 23fa7d8:	b319      	cbz	r1, 23fa822 <_ZN12Adafruit_GFX5writeEh+0xf6>
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fa7da:	7ee1      	ldrb	r1, [r4, #27]
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
 23fa7dc:	7e26      	ldrb	r6, [r4, #24]
            cursor_y += textsize_y * 8;        // advance y one line
 23fa7de:	7e67      	ldrb	r7, [r4, #25]
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
 23fa7e0:	b191      	cbz	r1, 23fa808 <_ZN12Adafruit_GFX5writeEh+0xdc>
 23fa7e2:	f995 1005 	ldrsb.w	r1, [r5, #5]
 23fa7e6:	4408      	add	r0, r1
 23fa7e8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fa7ec:	fb06 1100 	mla	r1, r6, r0, r1
 23fa7f0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
 23fa7f4:	4281      	cmp	r1, r0
 23fa7f6:	dd07      	ble.n	23fa808 <_ZN12Adafruit_GFX5writeEh+0xdc>
                        cursor_x  = 0;
 23fa7f8:	2000      	movs	r0, #0
 23fa7fa:	8220      	strh	r0, [r4, #16]
            cursor_y += textsize_y * 8;        // advance y one line
 23fa7fc:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
 23fa800:	7a92      	ldrb	r2, [r2, #10]
                        cursor_y += (int16_t)textsize_y *
 23fa802:	fb02 1207 	mla	r2, r2, r7, r1
 23fa806:	8262      	strh	r2, [r4, #18]
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
 23fa808:	8ae2      	ldrh	r2, [r4, #22]
 23fa80a:	4620      	mov	r0, r4
 23fa80c:	9201      	str	r2, [sp, #4]
 23fa80e:	8aa2      	ldrh	r2, [r4, #20]
 23fa810:	e9cd 6702 	strd	r6, r7, [sp, #8]
 23fa814:	9200      	str	r2, [sp, #0]
 23fa816:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 23fa81a:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 23fa81e:	f7ff fe17 	bl	23fa450 <_ZN12Adafruit_GFX8drawCharEsshtthh>
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
 23fa822:	7929      	ldrb	r1, [r5, #4]
 23fa824:	7e22      	ldrb	r2, [r4, #24]
 23fa826:	8a23      	ldrh	r3, [r4, #16]
 23fa828:	fb01 3302 	mla	r3, r1, r2, r3
 23fa82c:	e7b8      	b.n	23fa7a0 <_ZN12Adafruit_GFX5writeEh+0x74>

023fa82e <_ZN12Adafruit_GFX11setTextSizeEh>:
    textsize_x = (s_x > 0) ? s_x : 1;
 23fa82e:	2901      	cmp	r1, #1
 23fa830:	bf38      	it	cc
 23fa832:	2101      	movcc	r1, #1
 23fa834:	7601      	strb	r1, [r0, #24]
    textsize_y = (s_y > 0) ? s_y : 1;
 23fa836:	7641      	strb	r1, [r0, #25]
}
 23fa838:	4770      	bx	lr

023fa83a <_ZN12Adafruit_GFX7setFontEPK7GFXfont>:
        if(!gfxFont) { // And no current font struct?
 23fa83a:	6a03      	ldr	r3, [r0, #32]
    if(f) {            // Font struct pointer passed in?
 23fa83c:	b129      	cbz	r1, 23fa84a <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0x10>
        if(!gfxFont) { // And no current font struct?
 23fa83e:	b913      	cbnz	r3, 23fa846 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
            cursor_y += 6;
 23fa840:	8a43      	ldrh	r3, [r0, #18]
 23fa842:	3306      	adds	r3, #6
        cursor_y -= 6;
 23fa844:	8243      	strh	r3, [r0, #18]
    gfxFont = (GFXfont *)f;
 23fa846:	6201      	str	r1, [r0, #32]
}
 23fa848:	4770      	bx	lr
    } else if(gfxFont) { // NULL passed.  Current font struct defined?
 23fa84a:	2b00      	cmp	r3, #0
 23fa84c:	d0fb      	beq.n	23fa846 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xc>
        cursor_y -= 6;
 23fa84e:	8a43      	ldrh	r3, [r0, #18]
 23fa850:	3b06      	subs	r3, #6
 23fa852:	e7f7      	b.n	23fa844 <_ZN12Adafruit_GFX7setFontEPK7GFXfont+0xa>

023fa854 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>:
  #endif
 #else  // !HAS_PORT_SET_CLR
    *swspi.sckPort   &= swspi.sckPinMaskClr;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(swspi._sck, LOW);
 23fa854:	2100      	movs	r1, #0
 23fa856:	b280      	uxth	r0, r0
 23fa858:	f001 bf39 	b.w	23fc6ce <digitalWrite>

023fa85c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>:
    digitalWrite(swspi._sck, HIGH);
 23fa85c:	2101      	movs	r1, #1
 23fa85e:	b280      	uxth	r0, r0
 23fa860:	f001 bf35 	b.w	23fc6ce <digitalWrite>

023fa864 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>:
    digitalWrite(swspi._mosi, LOW);
 23fa864:	2100      	movs	r1, #0
 23fa866:	b280      	uxth	r0, r0
 23fa868:	f001 bf31 	b.w	23fc6ce <digitalWrite>

023fa86c <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>:
    digitalWrite(swspi._mosi, HIGH);
 23fa86c:	2101      	movs	r1, #1
 23fa86e:	b280      	uxth	r0, r0
 23fa870:	f001 bf2d 	b.w	23fc6ce <digitalWrite>

023fa874 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>:
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *dcPort   &= dcPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_dc, LOW);
 23fa874:	2100      	movs	r1, #0
 23fa876:	b280      	uxth	r0, r0
 23fa878:	f001 bf29 	b.w	23fc6ce <digitalWrite>

023fa87c <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>:
        digitalWrite(_dc, HIGH);
 23fa87c:	2101      	movs	r1, #1
 23fa87e:	b280      	uxth	r0, r0
 23fa880:	f001 bf25 	b.w	23fc6ce <digitalWrite>

023fa884 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
 23fa884:	b538      	push	{r3, r4, r5, lr}
 23fa886:	4604      	mov	r4, r0
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fa888:	b212      	sxth	r2, r2
 23fa88a:	b209      	sxth	r1, r1
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, SPIClass *spiClass,
 23fa88c:	461d      	mov	r5, r3
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fa88e:	f7ff fdc9 	bl	23fa424 <_ZN12Adafruit_GFXC1Ess>
 23fa892:	2200      	movs	r2, #0
 23fa894:	4b0b      	ldr	r3, [pc, #44]	; (23fa8c4 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa+0x40>)
}
 23fa896:	4620      	mov	r0, r4
  connection(TFT_HARD_SPI), _rst(rst), _cs(cs), _dc(dc) {
 23fa898:	6023      	str	r3, [r4, #0]
 23fa89a:	f99d 3018 	ldrsb.w	r3, [sp, #24]
 23fa89e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
 23fa8a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 23fa8a6:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 23fa8aa:	6422      	str	r2, [r4, #64]	; 0x40
 23fa8ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 23fa8b0:	f99d 3014 	ldrsb.w	r3, [sp, #20]
 23fa8b4:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
 23fa8b8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 23fa8bc:	64a2      	str	r2, [r4, #72]	; 0x48
    hwspi._spi = spiClass;
 23fa8be:	6265      	str	r5, [r4, #36]	; 0x24
}
 23fa8c0:	bd38      	pop	{r3, r4, r5, pc}
 23fa8c2:	bf00      	nop
 23fa8c4:	023ffca0 	.word	0x023ffca0

023fa8c8 <_ZN15Adafruit_SPITFTC1Ettaaa>:
Adafruit_SPITFT::Adafruit_SPITFT(uint16_t w, uint16_t h, int8_t cs,
 23fa8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fa8cc:	4604      	mov	r4, r0
 23fa8ce:	460d      	mov	r5, r1
 23fa8d0:	4616      	mov	r6, r2
 23fa8d2:	461f      	mov	r7, r3

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fa8d4:	f8df 804c 	ldr.w	r8, [pc, #76]	; 23fa924 <_ZN15Adafruit_SPITFTC1Ettaaa+0x5c>
 23fa8d8:	b086      	sub	sp, #24
 23fa8da:	e8d8 0f8f 	ldab	r0, [r8]
 23fa8de:	f010 0101 	ands.w	r1, r0, #1
 23fa8e2:	d10b      	bne.n	23fa8fc <_ZN15Adafruit_SPITFTC1Ettaaa+0x34>
 23fa8e4:	4640      	mov	r0, r8
 23fa8e6:	9105      	str	r1, [sp, #20]
 23fa8e8:	f7fe fcd8 	bl	23f929c <__cxa_guard_acquire>
 23fa8ec:	9905      	ldr	r1, [sp, #20]
 23fa8ee:	b128      	cbz	r0, 23fa8fc <_ZN15Adafruit_SPITFTC1Ettaaa+0x34>
 23fa8f0:	480b      	ldr	r0, [pc, #44]	; (23fa920 <_ZN15Adafruit_SPITFTC1Ettaaa+0x58>)
 23fa8f2:	f001 fc17 	bl	23fc124 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fa8f6:	4640      	mov	r0, r8
 23fa8f8:	f7fe fcd5 	bl	23f92a6 <__cxa_guard_release>
  int8_t dc, int8_t rst) : Adafruit_SPITFT(w, h, &SPI, cs, dc, rst) {
 23fa8fc:	f99d 3034 	ldrsb.w	r3, [sp, #52]	; 0x34
 23fa900:	4632      	mov	r2, r6
 23fa902:	9302      	str	r3, [sp, #8]
 23fa904:	f99d 3030 	ldrsb.w	r3, [sp, #48]	; 0x30
 23fa908:	4629      	mov	r1, r5
 23fa90a:	e9cd 7300 	strd	r7, r3, [sp]
 23fa90e:	4620      	mov	r0, r4
 23fa910:	4b03      	ldr	r3, [pc, #12]	; (23fa920 <_ZN15Adafruit_SPITFTC1Ettaaa+0x58>)
 23fa912:	f7ff ffb7 	bl	23fa884 <_ZN15Adafruit_SPITFTC1EttP8SPIClassaaa>
}
 23fa916:	4620      	mov	r0, r4
 23fa918:	b006      	add	sp, #24
 23fa91a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 23fa91e:	bf00      	nop
 23fa920:	1007ae84 	.word	0x1007ae84
 23fa924:	1007ae80 	.word	0x1007ae80

023fa928 <_ZN15Adafruit_SPITFT7initSPIEmh>:
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
 23fa928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fa92a:	4604      	mov	r4, r0
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
 23fa92c:	4f48      	ldr	r7, [pc, #288]	; (23faa50 <_ZN15Adafruit_SPITFT7initSPIEmh+0x128>)
    if(_cs >= 0) {
 23fa92e:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
    if(!freq) freq = DEFAULT_SPI_FREQ; // If no freq specified, use default
 23fa932:	2900      	cmp	r1, #0
 23fa934:	bf18      	it	ne
 23fa936:	460f      	movne	r7, r1
    if(_cs >= 0) {
 23fa938:	2800      	cmp	r0, #0
void Adafruit_SPITFT::initSPI(uint32_t freq, uint8_t spiMode) {
 23fa93a:	4616      	mov	r6, r2
    if(_cs >= 0) {
 23fa93c:	db09      	blt.n	23fa952 <_ZN15Adafruit_SPITFT7initSPIEmh+0x2a>
        pinMode(_cs, OUTPUT);
 23fa93e:	2101      	movs	r1, #1
 23fa940:	b280      	uxth	r0, r0
 23fa942:	f001 feb3 	bl	23fc6ac <pinMode>
        digitalWrite(_cs, HIGH); // Deselect
 23fa946:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
 23fa94a:	2101      	movs	r1, #1
 23fa94c:	b280      	uxth	r0, r0
 23fa94e:	f001 febe 	bl	23fc6ce <digitalWrite>
    pinMode(_dc, OUTPUT);
 23fa952:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
 23fa956:	2101      	movs	r1, #1
 23fa958:	b280      	uxth	r0, r0
 23fa95a:	f001 fea7 	bl	23fc6ac <pinMode>
    digitalWrite(_dc, HIGH); // Data mode
 23fa95e:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
 23fa962:	2101      	movs	r1, #1
 23fa964:	b280      	uxth	r0, r0
 23fa966:	f001 feb2 	bl	23fc6ce <digitalWrite>
    if(connection == TFT_HARD_SPI) {
 23fa96a:	f894 503c 	ldrb.w	r5, [r4, #60]	; 0x3c
 23fa96e:	bb85      	cbnz	r5, 23fa9d2 <_ZN15Adafruit_SPITFT7initSPIEmh+0xaa>
    SPI_CLK_SYSTEM = 0,         // represents the system clock speed
    SPI_CLK_ARDUINO = 16*MHZ,
};

namespace particle {
class SPISettings : public Printable {
 23fa970:	2301      	movs	r3, #1
            hwspi._spi->begin();
 23fa972:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fa974:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
 23fa978:	6327      	str	r7, [r4, #48]	; 0x30
 23fa97a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
 23fa97e:	f884 6035 	strb.w	r6, [r4, #53]	; 0x35
        hwspi._mode    = spiMode; // Save spiMode value for later
 23fa982:	63a6      	str	r6, [r4, #56]	; 0x38
            hwspi._spi->begin();
 23fa984:	f001 fbd8 	bl	23fc138 <_ZN8SPIClass5beginEv>
    if(_rst >= 0) {
 23fa988:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fa98c:	2800      	cmp	r0, #0
 23fa98e:	db5e      	blt.n	23faa4e <_ZN15Adafruit_SPITFT7initSPIEmh+0x126>
        pinMode(_rst, OUTPUT);
 23fa990:	2101      	movs	r1, #1
 23fa992:	b280      	uxth	r0, r0
 23fa994:	f001 fe8a 	bl	23fc6ac <pinMode>
        digitalWrite(_rst, HIGH);
 23fa998:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fa99c:	2101      	movs	r1, #1
 23fa99e:	b280      	uxth	r0, r0
 23fa9a0:	f001 fe95 	bl	23fc6ce <digitalWrite>
        delay(100);
 23fa9a4:	2064      	movs	r0, #100	; 0x64
 23fa9a6:	f001 f851 	bl	23fba4c <delay>
        digitalWrite(_rst, LOW);
 23fa9aa:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fa9ae:	2100      	movs	r1, #0
 23fa9b0:	b280      	uxth	r0, r0
 23fa9b2:	f001 fe8c 	bl	23fc6ce <digitalWrite>
        delay(100);
 23fa9b6:	2064      	movs	r0, #100	; 0x64
 23fa9b8:	f001 f848 	bl	23fba4c <delay>
        digitalWrite(_rst, HIGH);
 23fa9bc:	f994 003d 	ldrsb.w	r0, [r4, #61]	; 0x3d
 23fa9c0:	2101      	movs	r1, #1
 23fa9c2:	b280      	uxth	r0, r0
 23fa9c4:	f001 fe83 	bl	23fc6ce <digitalWrite>
}
 23fa9c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        delay(200);
 23fa9cc:	20c8      	movs	r0, #200	; 0xc8
 23fa9ce:	f001 b83d 	b.w	23fba4c <delay>
    } else if(connection == TFT_SOFT_SPI) {
 23fa9d2:	2d01      	cmp	r5, #1
 23fa9d4:	d120      	bne.n	23faa18 <_ZN15Adafruit_SPITFT7initSPIEmh+0xf0>
        pinMode(swspi._mosi, OUTPUT);
 23fa9d6:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fa9da:	4629      	mov	r1, r5
 23fa9dc:	b280      	uxth	r0, r0
 23fa9de:	f001 fe65 	bl	23fc6ac <pinMode>
        digitalWrite(swspi._mosi, LOW);
 23fa9e2:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fa9e6:	2100      	movs	r1, #0
 23fa9e8:	b280      	uxth	r0, r0
 23fa9ea:	f001 fe70 	bl	23fc6ce <digitalWrite>
        pinMode(swspi._sck, OUTPUT);
 23fa9ee:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fa9f2:	4629      	mov	r1, r5
 23fa9f4:	b280      	uxth	r0, r0
 23fa9f6:	f001 fe59 	bl	23fc6ac <pinMode>
        digitalWrite(swspi._sck, LOW);
 23fa9fa:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fa9fe:	2100      	movs	r1, #0
 23faa00:	b280      	uxth	r0, r0
 23faa02:	f001 fe64 	bl	23fc6ce <digitalWrite>
        if(swspi._miso >= 0) {
 23faa06:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23faa0a:	2800      	cmp	r0, #0
 23faa0c:	dbbc      	blt.n	23fa988 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(swspi._miso, INPUT);
 23faa0e:	2100      	movs	r1, #0
 23faa10:	b280      	uxth	r0, r0
 23faa12:	f001 fe4b 	bl	23fc6ac <pinMode>
 23faa16:	e7b7      	b.n	23fa988 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
        pinMode(tft8._wr, OUTPUT);
 23faa18:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23faa1c:	2101      	movs	r1, #1
 23faa1e:	b280      	uxth	r0, r0
 23faa20:	f001 fe44 	bl	23fc6ac <pinMode>
        digitalWrite(tft8._wr, HIGH);
 23faa24:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23faa28:	2101      	movs	r1, #1
 23faa2a:	b280      	uxth	r0, r0
 23faa2c:	f001 fe4f 	bl	23fc6ce <digitalWrite>
        if(tft8._rd >= 0) {
 23faa30:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23faa34:	2800      	cmp	r0, #0
 23faa36:	dba7      	blt.n	23fa988 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
            pinMode(tft8._rd, OUTPUT);
 23faa38:	2101      	movs	r1, #1
 23faa3a:	b280      	uxth	r0, r0
 23faa3c:	f001 fe36 	bl	23fc6ac <pinMode>
            digitalWrite(tft8._rd, HIGH);
 23faa40:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23faa44:	2101      	movs	r1, #1
 23faa46:	b280      	uxth	r0, r0
 23faa48:	f001 fe41 	bl	23fc6ce <digitalWrite>
 23faa4c:	e79c      	b.n	23fa988 <_ZN15Adafruit_SPITFT7initSPIEmh+0x60>
}
 23faa4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 23faa50:	00f42400 	.word	0x00f42400

023faa54 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
 23faa54:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 23faa58:	b923      	cbnz	r3, 23faa64 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv+0x10>
        hwspi._spi->beginTransaction(hwspi.settings);
 23faa5a:	f100 0128 	add.w	r1, r0, #40	; 0x28
 23faa5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23faa60:	f001 bb98 	b.w	23fc194 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
}
 23faa64:	4770      	bx	lr

023faa66 <_ZN15Adafruit_SPITFT10startWriteEv>:
void Adafruit_SPITFT::startWrite(void) {
 23faa66:	b510      	push	{r4, lr}
 23faa68:	4604      	mov	r4, r0
    SPI_BEGIN_TRANSACTION();
 23faa6a:	f7ff fff3 	bl	23faa54 <_ZN15Adafruit_SPITFT21SPI_BEGIN_TRANSACTIONEv>
    if(_cs >= 0) SPI_CS_LOW();
 23faa6e:	f994 003e 	ldrsb.w	r0, [r4, #62]	; 0x3e
 23faa72:	2800      	cmp	r0, #0
 23faa74:	db05      	blt.n	23faa82 <_ZN15Adafruit_SPITFT10startWriteEv+0x1c>
}
 23faa76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_cs, LOW);
 23faa7a:	2100      	movs	r1, #0
 23faa7c:	b280      	uxth	r0, r0
 23faa7e:	f001 be26 	b.w	23fc6ce <digitalWrite>
 23faa82:	bd10      	pop	{r4, pc}

023faa84 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>:
    if(connection == TFT_HARD_SPI) {
 23faa84:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 23faa88:	b913      	cbnz	r3, 23faa90 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv+0xc>
        hwspi._spi->endTransaction();
 23faa8a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23faa8c:	f001 bb68 	b.w	23fc160 <_ZN8SPIClass14endTransactionEv>
}
 23faa90:	4770      	bx	lr

023faa92 <_ZN15Adafruit_SPITFT8endWriteEv>:
void Adafruit_SPITFT::endWrite(void) {
 23faa92:	b510      	push	{r4, lr}
 23faa94:	4604      	mov	r4, r0
    if(_cs >= 0) SPI_CS_HIGH();
 23faa96:	f990 003e 	ldrsb.w	r0, [r0, #62]	; 0x3e
 23faa9a:	2800      	cmp	r0, #0
 23faa9c:	db03      	blt.n	23faaa6 <_ZN15Adafruit_SPITFT8endWriteEv+0x14>
        digitalWrite(_cs, HIGH);
 23faa9e:	2101      	movs	r1, #1
 23faaa0:	b280      	uxth	r0, r0
 23faaa2:	f001 fe14 	bl	23fc6ce <digitalWrite>
    SPI_END_TRANSACTION();
 23faaa6:	4620      	mov	r0, r4
 23faaa8:	f7ff ffec 	bl	23faa84 <_ZN15Adafruit_SPITFT19SPI_END_TRANSACTIONEv>
}
 23faaac:	bd10      	pop	{r4, pc}

023faaae <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>:

/*!
    @brief  Set the WR line LOW, then HIGH. Used for parallel-connected
            interfaces when writing data.
*/
inline void Adafruit_SPITFT::TFT_WR_STROBE(void) {
 23faaae:	b510      	push	{r4, lr}
 23faab0:	4604      	mov	r4, r0
 #else  // !HAS_PORT_SET_CLR
    *tft8.wrPort   &= tft8.wrPinMaskClr;
    *tft8.wrPort   |= tft8.wrPinMaskSet;
 #endif // end !HAS_PORT_SET_CLR
#else  // !USE_FAST_PINIO
    digitalWrite(tft8._wr, LOW);
 23faab2:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 23faab6:	2100      	movs	r1, #0
 23faab8:	b280      	uxth	r0, r0
 23faaba:	f001 fe08 	bl	23fc6ce <digitalWrite>
    digitalWrite(tft8._wr, HIGH);
 23faabe:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
 23faac2:	2101      	movs	r1, #1
#endif // end !USE_FAST_PINIO
}
 23faac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(tft8._wr, HIGH);
 23faac8:	b280      	uxth	r0, r0
 23faaca:	f001 be00 	b.w	23fc6ce <digitalWrite>

023faace <_ZN15Adafruit_SPITFT10writeColorEtm>:
void Adafruit_SPITFT::writeColor(uint16_t color, uint32_t len) {
 23faace:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23faad2:	4605      	mov	r5, r0
 23faad4:	460e      	mov	r6, r1
    if(!len) return; // Avoid 0-byte transfers
 23faad6:	4614      	mov	r4, r2
 23faad8:	b17a      	cbz	r2, 23faafa <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
    if(connection == TFT_HARD_SPI) {
 23faada:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    uint8_t hi = color >> 8, lo = color;
 23faade:	ea4f 2811 	mov.w	r8, r1, lsr #8
 23faae2:	b2cf      	uxtb	r7, r1
    if(connection == TFT_HARD_SPI) {
 23faae4:	b95b      	cbnz	r3, 23faafe <_ZN15Adafruit_SPITFT10writeColorEtm+0x30>
            hwspi._spi->transfer(hi);
 23faae6:	4641      	mov	r1, r8
 23faae8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23faaea:	f001 fbc1 	bl	23fc270 <_ZN8SPIClass8transferEh>
            hwspi._spi->transfer(lo);
 23faaee:	4639      	mov	r1, r7
 23faaf0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23faaf2:	f001 fbbd 	bl	23fc270 <_ZN8SPIClass8transferEh>
        while(len--) {
 23faaf6:	3c01      	subs	r4, #1
 23faaf8:	d1f5      	bne.n	23faae6 <_ZN15Adafruit_SPITFT10writeColorEtm+0x18>
}
 23faafa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    } else if(connection == TFT_SOFT_SPI) {
 23faafe:	2b01      	cmp	r3, #1
 23fab00:	d11e      	bne.n	23fab40 <_ZN15Adafruit_SPITFT10writeColorEtm+0x72>
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fab02:	46b0      	mov	r8, r6
 23fab04:	2710      	movs	r7, #16
                if(x & 0x8000) SPI_MOSI_HIGH();
 23fab06:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 23fab0a:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
 23fab0e:	d014      	beq.n	23fab3a <_ZN15Adafruit_SPITFT10writeColorEtm+0x6c>
 23fab10:	f7ff feac 	bl	23fa86c <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
                SPI_SCK_HIGH();
 23fab14:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fab18:	3f01      	subs	r7, #1
                SPI_SCK_HIGH();
 23fab1a:	f7ff fe9f 	bl	23fa85c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
                x <<= 1;
 23fab1e:	ea4f 0848 	mov.w	r8, r8, lsl #1
                SPI_SCK_LOW();
 23fab22:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fab26:	b2bf      	uxth	r7, r7
                SPI_SCK_LOW();
 23fab28:	f7ff fe94 	bl	23fa854 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
                x <<= 1;
 23fab2c:	fa1f f888 	uxth.w	r8, r8
            for(uint16_t bit=0, x=color; bit<16; bit++) {
 23fab30:	2f00      	cmp	r7, #0
 23fab32:	d1e8      	bne.n	23fab06 <_ZN15Adafruit_SPITFT10writeColorEtm+0x38>
        while(len--) {
 23fab34:	3c01      	subs	r4, #1
 23fab36:	d1e4      	bne.n	23fab02 <_ZN15Adafruit_SPITFT10writeColorEtm+0x34>
 23fab38:	e7df      	b.n	23faafa <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                else           SPI_MOSI_LOW();
 23fab3a:	f7ff fe93 	bl	23fa864 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fab3e:	e7e9      	b.n	23fab14 <_ZN15Adafruit_SPITFT10writeColorEtm+0x46>
        if(hi == lo) {
 23fab40:	45b8      	cmp	r8, r7
 23fab42:	d0da      	beq.n	23faafa <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>
                TFT_WR_STROBE();
 23fab44:	4628      	mov	r0, r5
 23fab46:	f7ff ffb2 	bl	23faaae <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
            while(len--) {
 23fab4a:	3c01      	subs	r4, #1
 23fab4c:	d1fa      	bne.n	23fab44 <_ZN15Adafruit_SPITFT10writeColorEtm+0x76>
 23fab4e:	e7d4      	b.n	23faafa <_ZN15Adafruit_SPITFT10writeColorEtm+0x2c>

023fab50 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>:
  int16_t w, int16_t h, uint16_t color) {
 23fab50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fab54:	461d      	mov	r5, r3
 23fab56:	4604      	mov	r4, r0
    setAddrWindow(x, y, w, h);
 23fab58:	f8bd 3020 	ldrh.w	r3, [sp, #32]
  int16_t w, int16_t h, uint16_t color) {
 23fab5c:	f8bd 6024 	ldrh.w	r6, [sp, #36]	; 0x24
    setAddrWindow(x, y, w, h);
 23fab60:	9300      	str	r3, [sp, #0]
 23fab62:	6803      	ldr	r3, [r0, #0]
 23fab64:	b292      	uxth	r2, r2
 23fab66:	f8d3 8054 	ldr.w	r8, [r3, #84]	; 0x54
 23fab6a:	b289      	uxth	r1, r1
 23fab6c:	b2ab      	uxth	r3, r5
  int16_t w, int16_t h, uint16_t color) {
 23fab6e:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
    setAddrWindow(x, y, w, h);
 23fab72:	47c0      	blx	r8
    writeColor(color, (uint32_t)w * h);
 23fab74:	4631      	mov	r1, r6
 23fab76:	4620      	mov	r0, r4
 23fab78:	fb05 f207 	mul.w	r2, r5, r7
}
 23fab7c:	b002      	add	sp, #8
 23fab7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    writeColor(color, (uint32_t)w * h);
 23fab82:	f7ff bfa4 	b.w	23faace <_ZN15Adafruit_SPITFT10writeColorEtm>

023fab86 <_ZN15Adafruit_SPITFT13writeFillRectEsssst>:
  int16_t w, int16_t h, uint16_t color) {
 23fab86:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 23fab8a:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
    if(w && h) {                            // Nonzero width and height?
 23fab8e:	2b00      	cmp	r3, #0
 23fab90:	d046      	beq.n	23fac20 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
 23fab92:	2c00      	cmp	r4, #0
 23fab94:	d044      	beq.n	23fac20 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
        if(w < 0) {                         // If negative width...
 23fab96:	2b00      	cmp	r3, #0
 23fab98:	da05      	bge.n	23faba6 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x20>
            x +=  w + 1;                    //   Move X to left edge
 23fab9a:	3101      	adds	r1, #1
 23fab9c:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                        //   Use positive width
 23faba0:	425b      	negs	r3, r3
            x +=  w + 1;                    //   Move X to left edge
 23faba2:	b209      	sxth	r1, r1
            w  = -w;                        //   Use positive width
 23faba4:	b21b      	sxth	r3, r3
        if(x < _width) {                    // Not off right
 23faba6:	f9b0 600c 	ldrsh.w	r6, [r0, #12]
 23fabaa:	428e      	cmp	r6, r1
 23fabac:	dd38      	ble.n	23fac20 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
            if(h < 0) {                     // If negative height...
 23fabae:	2c00      	cmp	r4, #0
 23fabb0:	da05      	bge.n	23fabbe <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x38>
                y +=  h + 1;                //   Move Y to top edge
 23fabb2:	3201      	adds	r2, #1
 23fabb4:	fa12 f284 	uxtah	r2, r2, r4
                h  = -h;                    //   Use positive height
 23fabb8:	4264      	negs	r4, r4
                y +=  h + 1;                //   Move Y to top edge
 23fabba:	b212      	sxth	r2, r2
                h  = -h;                    //   Use positive height
 23fabbc:	b224      	sxth	r4, r4
            if(y < _height) {               // Not off bottom
 23fabbe:	f9b0 500e 	ldrsh.w	r5, [r0, #14]
 23fabc2:	4295      	cmp	r5, r2
 23fabc4:	dd2c      	ble.n	23fac20 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                int16_t x2 = x + w - 1;
 23fabc6:	eb01 0803 	add.w	r8, r1, r3
 23fabca:	fa1f f888 	uxth.w	r8, r8
 23fabce:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 23fabd2:	fa0f fc8c 	sxth.w	ip, ip
                if(x2 >= 0) {               // Not off left
 23fabd6:	f1bc 0f00 	cmp.w	ip, #0
 23fabda:	db21      	blt.n	23fac20 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                    int16_t y2 = y + h - 1;
 23fabdc:	eb02 0e04 	add.w	lr, r2, r4
 23fabe0:	fa1f fe8e 	uxth.w	lr, lr
 23fabe4:	f10e 37ff 	add.w	r7, lr, #4294967295	; 0xffffffff
 23fabe8:	b23f      	sxth	r7, r7
                    if(y2 >= 0) {           // Not off top
 23fabea:	2f00      	cmp	r7, #0
 23fabec:	db18      	blt.n	23fac20 <_ZN15Adafruit_SPITFT13writeFillRectEsssst+0x9a>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fabee:	2900      	cmp	r1, #0
 23fabf0:	bfbc      	itt	lt
 23fabf2:	2100      	movlt	r1, #0
 23fabf4:	fa0f f388 	sxthlt.w	r3, r8
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fabf8:	2a00      	cmp	r2, #0
 23fabfa:	bfbc      	itt	lt
 23fabfc:	2200      	movlt	r2, #0
 23fabfe:	fa0f f48e 	sxthlt.w	r4, lr
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fac02:	4566      	cmp	r6, ip
 23fac04:	bfdc      	itt	le
 23fac06:	1a73      	suble	r3, r6, r1
 23fac08:	b21b      	sxthle	r3, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fac0a:	42bd      	cmp	r5, r7
 23fac0c:	bfd8      	it	le
 23fac0e:	1aac      	suble	r4, r5, r2
                        writeFillRectPreclipped(x, y, w, h, color);
 23fac10:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fac14:	bfd8      	it	le
 23fac16:	b224      	sxthle	r4, r4
                        writeFillRectPreclipped(x, y, w, h, color);
 23fac18:	e9cd 4500 	strd	r4, r5, [sp]
 23fac1c:	f7ff ff98 	bl	23fab50 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fac20:	b002      	add	sp, #8
 23fac22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fac26 <_ZN15Adafruit_SPITFT8fillRectEsssst>:
  uint16_t color) {
 23fac26:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 23fac2a:	4680      	mov	r8, r0
 23fac2c:	460c      	mov	r4, r1
 23fac2e:	4615      	mov	r5, r2
    if(w && h) {                            // Nonzero width and height?
 23fac30:	461e      	mov	r6, r3
  uint16_t color) {
 23fac32:	f9bd 7028 	ldrsh.w	r7, [sp, #40]	; 0x28
 23fac36:	f8bd 902c 	ldrh.w	r9, [sp, #44]	; 0x2c
    if(w && h) {                            // Nonzero width and height?
 23fac3a:	2b00      	cmp	r3, #0
 23fac3c:	d052      	beq.n	23face4 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
 23fac3e:	2f00      	cmp	r7, #0
 23fac40:	d050      	beq.n	23face4 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
        if(w < 0) {                         // If negative width...
 23fac42:	2b00      	cmp	r3, #0
 23fac44:	da05      	bge.n	23fac52 <_ZN15Adafruit_SPITFT8fillRectEsssst+0x2c>
            x +=  w + 1;                    //   Move X to left edge
 23fac46:	3401      	adds	r4, #1
 23fac48:	fa14 f483 	uxtah	r4, r4, r3
            w  = -w;                        //   Use positive width
 23fac4c:	425e      	negs	r6, r3
            x +=  w + 1;                    //   Move X to left edge
 23fac4e:	b224      	sxth	r4, r4
            w  = -w;                        //   Use positive width
 23fac50:	b236      	sxth	r6, r6
        if(x < _width) {                    // Not off right
 23fac52:	f9b8 300c 	ldrsh.w	r3, [r8, #12]
 23fac56:	42a3      	cmp	r3, r4
 23fac58:	dd44      	ble.n	23face4 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
            if(h < 0) {                     // If negative height...
 23fac5a:	2f00      	cmp	r7, #0
 23fac5c:	da05      	bge.n	23fac6a <_ZN15Adafruit_SPITFT8fillRectEsssst+0x44>
                y +=  h + 1;                //   Move Y to top edge
 23fac5e:	3501      	adds	r5, #1
 23fac60:	fa15 f587 	uxtah	r5, r5, r7
                h  = -h;                    //   Use positive height
 23fac64:	427f      	negs	r7, r7
                y +=  h + 1;                //   Move Y to top edge
 23fac66:	b22d      	sxth	r5, r5
                h  = -h;                    //   Use positive height
 23fac68:	b23f      	sxth	r7, r7
            if(y < _height) {               // Not off bottom
 23fac6a:	f9b8 200e 	ldrsh.w	r2, [r8, #14]
 23fac6e:	42aa      	cmp	r2, r5
 23fac70:	dd38      	ble.n	23face4 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                int16_t x2 = x + w - 1;
 23fac72:	eb04 0e06 	add.w	lr, r4, r6
 23fac76:	fa1f fe8e 	uxth.w	lr, lr
 23fac7a:	f10e 30ff 	add.w	r0, lr, #4294967295	; 0xffffffff
 23fac7e:	b200      	sxth	r0, r0
                if(x2 >= 0) {               // Not off left
 23fac80:	2800      	cmp	r0, #0
 23fac82:	db2f      	blt.n	23face4 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                    int16_t y2 = y + h - 1;
 23fac84:	eb05 0c07 	add.w	ip, r5, r7
 23fac88:	fa1f fc8c 	uxth.w	ip, ip
 23fac8c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
 23fac90:	b209      	sxth	r1, r1
                    if(y2 >= 0) {           // Not off top
 23fac92:	2900      	cmp	r1, #0
 23fac94:	db26      	blt.n	23face4 <_ZN15Adafruit_SPITFT8fillRectEsssst+0xbe>
                        if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fac96:	2c00      	cmp	r4, #0
 23fac98:	bfbc      	itt	lt
 23fac9a:	2400      	movlt	r4, #0
 23fac9c:	fa0f f68e 	sxthlt.w	r6, lr
                        if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23faca0:	2d00      	cmp	r5, #0
 23faca2:	bfbc      	itt	lt
 23faca4:	2500      	movlt	r5, #0
 23faca6:	fa0f f78c 	sxthlt.w	r7, ip
                        if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23facaa:	4283      	cmp	r3, r0
 23facac:	bfdc      	itt	le
 23facae:	1b1b      	suble	r3, r3, r4
 23facb0:	b21e      	sxthle	r6, r3
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23facb2:	428a      	cmp	r2, r1
                        startWrite();
 23facb4:	f8d8 3000 	ldr.w	r3, [r8]
                        if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23facb8:	bfdc      	itt	le
 23facba:	1b52      	suble	r2, r2, r5
 23facbc:	b217      	sxthle	r7, r2
                        startWrite();
 23facbe:	4640      	mov	r0, r8
 23facc0:	695b      	ldr	r3, [r3, #20]
 23facc2:	4798      	blx	r3
                        writeFillRectPreclipped(x, y, w, h, color);
 23facc4:	4633      	mov	r3, r6
 23facc6:	4640      	mov	r0, r8
 23facc8:	462a      	mov	r2, r5
 23facca:	4621      	mov	r1, r4
 23faccc:	e9cd 7900 	strd	r7, r9, [sp]
 23facd0:	f7ff ff3e 	bl	23fab50 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                        endWrite();
 23facd4:	4640      	mov	r0, r8
 23facd6:	f8d8 3000 	ldr.w	r3, [r8]
 23facda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23facdc:	b003      	add	sp, #12
 23facde:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                        endWrite();
 23face2:	4718      	bx	r3
}
 23face4:	b003      	add	sp, #12
 23face6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023facea <_ZN15Adafruit_SPITFT13drawFastHLineEssst>:
  uint16_t color) {
 23facea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23facee:	1e17      	subs	r7, r2, #0
  uint16_t color) {
 23facf0:	4606      	mov	r6, r0
 23facf2:	460c      	mov	r4, r1
 23facf4:	461d      	mov	r5, r3
 23facf6:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23facfa:	db33      	blt.n	23fad64 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
 23facfc:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fad00:	42bb      	cmp	r3, r7
 23fad02:	dd2f      	ble.n	23fad64 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
 23fad04:	2d00      	cmp	r5, #0
 23fad06:	d02d      	beq.n	23fad64 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
        if(w < 0) {                      // If negative width...
 23fad08:	da05      	bge.n	23fad16 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x2c>
            x +=  w + 1;                 //   Move X to left edge
 23fad0a:	3401      	adds	r4, #1
 23fad0c:	fa14 f485 	uxtah	r4, r4, r5
            w  = -w;                     //   Use positive width
 23fad10:	426d      	negs	r5, r5
            x +=  w + 1;                 //   Move X to left edge
 23fad12:	b224      	sxth	r4, r4
            w  = -w;                     //   Use positive width
 23fad14:	b22d      	sxth	r5, r5
        if(x < _width) {                 // Not off right
 23fad16:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 23fad1a:	42a3      	cmp	r3, r4
 23fad1c:	dd22      	ble.n	23fad64 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
            int16_t x2 = x + w - 1;
 23fad1e:	1961      	adds	r1, r4, r5
 23fad20:	b289      	uxth	r1, r1
 23fad22:	1e4a      	subs	r2, r1, #1
 23fad24:	b212      	sxth	r2, r2
            if(x2 >= 0) {                // Not off left
 23fad26:	2a00      	cmp	r2, #0
 23fad28:	db1c      	blt.n	23fad64 <_ZN15Adafruit_SPITFT13drawFastHLineEssst+0x7a>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fad2a:	2c00      	cmp	r4, #0
 23fad2c:	bfbc      	itt	lt
 23fad2e:	2400      	movlt	r4, #0
 23fad30:	b20d      	sxthlt	r5, r1
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fad32:	4293      	cmp	r3, r2
 23fad34:	bfdc      	itt	le
 23fad36:	1b1b      	suble	r3, r3, r4
 23fad38:	b21d      	sxthle	r5, r3
                startWrite();
 23fad3a:	6833      	ldr	r3, [r6, #0]
 23fad3c:	4630      	mov	r0, r6
 23fad3e:	695b      	ldr	r3, [r3, #20]
 23fad40:	4798      	blx	r3
                writeFillRectPreclipped(x, y, w, 1, color);
 23fad42:	2301      	movs	r3, #1
 23fad44:	4630      	mov	r0, r6
 23fad46:	9300      	str	r3, [sp, #0]
 23fad48:	463a      	mov	r2, r7
 23fad4a:	462b      	mov	r3, r5
 23fad4c:	4621      	mov	r1, r4
 23fad4e:	f8cd 8004 	str.w	r8, [sp, #4]
 23fad52:	f7ff fefd 	bl	23fab50 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
 23fad56:	4630      	mov	r0, r6
 23fad58:	6833      	ldr	r3, [r6, #0]
 23fad5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fad5c:	b002      	add	sp, #8
 23fad5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
 23fad62:	4718      	bx	r3
}
 23fad64:	b002      	add	sp, #8
 23fad66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fad6a <_ZN15Adafruit_SPITFT13drawFastVLineEssst>:
  uint16_t color) {
 23fad6a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fad6e:	1e0f      	subs	r7, r1, #0
  uint16_t color) {
 23fad70:	4606      	mov	r6, r0
 23fad72:	4614      	mov	r4, r2
 23fad74:	461d      	mov	r5, r3
 23fad76:	f8bd 8020 	ldrh.w	r8, [sp, #32]
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fad7a:	db31      	blt.n	23fade0 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
 23fad7c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fad80:	42bb      	cmp	r3, r7
 23fad82:	dd2d      	ble.n	23fade0 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
 23fad84:	2d00      	cmp	r5, #0
 23fad86:	d02b      	beq.n	23fade0 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
        if(h < 0) {                     // If negative height...
 23fad88:	da05      	bge.n	23fad96 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x2c>
            y +=  h + 1;                //   Move Y to top edge
 23fad8a:	3401      	adds	r4, #1
 23fad8c:	fa14 f485 	uxtah	r4, r4, r5
            h  = -h;                    //   Use positive height
 23fad90:	426d      	negs	r5, r5
            y +=  h + 1;                //   Move Y to top edge
 23fad92:	b224      	sxth	r4, r4
            h  = -h;                    //   Use positive height
 23fad94:	b22d      	sxth	r5, r5
        if(y < _height) {               // Not off bottom
 23fad96:	f9b6 300e 	ldrsh.w	r3, [r6, #14]
 23fad9a:	42a3      	cmp	r3, r4
 23fad9c:	dd20      	ble.n	23fade0 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
            int16_t y2 = y + h - 1;
 23fad9e:	1961      	adds	r1, r4, r5
 23fada0:	b289      	uxth	r1, r1
 23fada2:	1e4a      	subs	r2, r1, #1
 23fada4:	b212      	sxth	r2, r2
            if(y2 >= 0) {               // Not off top
 23fada6:	2a00      	cmp	r2, #0
 23fada8:	db1a      	blt.n	23fade0 <_ZN15Adafruit_SPITFT13drawFastVLineEssst+0x76>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fadaa:	2c00      	cmp	r4, #0
 23fadac:	bfbc      	itt	lt
 23fadae:	2400      	movlt	r4, #0
 23fadb0:	b20d      	sxthlt	r5, r1
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fadb2:	4293      	cmp	r3, r2
 23fadb4:	bfdc      	itt	le
 23fadb6:	1b1b      	suble	r3, r3, r4
 23fadb8:	b21d      	sxthle	r5, r3
                startWrite();
 23fadba:	6833      	ldr	r3, [r6, #0]
 23fadbc:	4630      	mov	r0, r6
 23fadbe:	695b      	ldr	r3, [r3, #20]
 23fadc0:	4798      	blx	r3
                writeFillRectPreclipped(x, y, 1, h, color);
 23fadc2:	4630      	mov	r0, r6
 23fadc4:	2301      	movs	r3, #1
 23fadc6:	4622      	mov	r2, r4
 23fadc8:	4639      	mov	r1, r7
 23fadca:	e9cd 5800 	strd	r5, r8, [sp]
 23fadce:	f7ff febf 	bl	23fab50 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
                endWrite();
 23fadd2:	4630      	mov	r0, r6
 23fadd4:	6833      	ldr	r3, [r6, #0]
 23fadd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fadd8:	b002      	add	sp, #8
 23fadda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
                endWrite();
 23fadde:	4718      	bx	r3
}
 23fade0:	b002      	add	sp, #8
 23fade2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fade6 <_ZN15Adafruit_SPITFT14writeFastHLineEssst>:
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fade6:	2a00      	cmp	r2, #0
  uint16_t color) {
 23fade8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((y >= 0) && (y < _height) && w) { // Y on screen, nonzero width
 23fadea:	db26      	blt.n	23fae3a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
 23fadec:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fadf0:	4294      	cmp	r4, r2
 23fadf2:	dd22      	ble.n	23fae3a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
 23fadf4:	2b00      	cmp	r3, #0
 23fadf6:	d020      	beq.n	23fae3a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
        if(w < 0) {                      // If negative width...
 23fadf8:	da05      	bge.n	23fae06 <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x20>
            x +=  w + 1;                 //   Move X to left edge
 23fadfa:	3101      	adds	r1, #1
 23fadfc:	fa11 f183 	uxtah	r1, r1, r3
            w  = -w;                     //   Use positive width
 23fae00:	425b      	negs	r3, r3
            x +=  w + 1;                 //   Move X to left edge
 23fae02:	b209      	sxth	r1, r1
            w  = -w;                     //   Use positive width
 23fae04:	b21b      	sxth	r3, r3
        if(x < _width) {                 // Not off right
 23fae06:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fae0a:	428c      	cmp	r4, r1
 23fae0c:	dd15      	ble.n	23fae3a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
            int16_t x2 = x + w - 1;
 23fae0e:	18ce      	adds	r6, r1, r3
 23fae10:	b2b6      	uxth	r6, r6
 23fae12:	1e75      	subs	r5, r6, #1
 23fae14:	b22d      	sxth	r5, r5
            if(x2 >= 0) {                // Not off left
 23fae16:	2d00      	cmp	r5, #0
 23fae18:	db0f      	blt.n	23fae3a <_ZN15Adafruit_SPITFT14writeFastHLineEssst+0x54>
                if(x  <  0)       { x = 0; w = x2 + 1; } // Clip left
 23fae1a:	2900      	cmp	r1, #0
 23fae1c:	bfbc      	itt	lt
 23fae1e:	2100      	movlt	r1, #0
 23fae20:	b233      	sxthlt	r3, r6
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fae22:	42ac      	cmp	r4, r5
 23fae24:	bfd8      	it	le
 23fae26:	1a63      	suble	r3, r4, r1
                writeFillRectPreclipped(x, y, w, 1, color);
 23fae28:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(x2 >= _width)  { w = _width  - x;   } // Clip right
 23fae2c:	bfd8      	it	le
 23fae2e:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, w, 1, color);
 23fae30:	9401      	str	r4, [sp, #4]
 23fae32:	2401      	movs	r4, #1
 23fae34:	9400      	str	r4, [sp, #0]
 23fae36:	f7ff fe8b 	bl	23fab50 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fae3a:	b002      	add	sp, #8
 23fae3c:	bd70      	pop	{r4, r5, r6, pc}

023fae3e <_ZN15Adafruit_SPITFT14writeFastVLineEssst>:
  uint16_t color) {
 23fae3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if((x >= 0) && (x < _width) && h) { // X on screen, nonzero height
 23fae40:	2900      	cmp	r1, #0
 23fae42:	db26      	blt.n	23fae92 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
 23fae44:	f9b0 400c 	ldrsh.w	r4, [r0, #12]
 23fae48:	428c      	cmp	r4, r1
 23fae4a:	dd22      	ble.n	23fae92 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
 23fae4c:	2b00      	cmp	r3, #0
 23fae4e:	d020      	beq.n	23fae92 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
        if(h < 0) {                     // If negative height...
 23fae50:	da05      	bge.n	23fae5e <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x20>
            y +=  h + 1;                //   Move Y to top edge
 23fae52:	3201      	adds	r2, #1
 23fae54:	fa12 f283 	uxtah	r2, r2, r3
            h  = -h;                    //   Use positive height
 23fae58:	425b      	negs	r3, r3
            y +=  h + 1;                //   Move Y to top edge
 23fae5a:	b212      	sxth	r2, r2
            h  = -h;                    //   Use positive height
 23fae5c:	b21b      	sxth	r3, r3
        if(y < _height) {               // Not off bottom
 23fae5e:	f9b0 400e 	ldrsh.w	r4, [r0, #14]
 23fae62:	4294      	cmp	r4, r2
 23fae64:	dd15      	ble.n	23fae92 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
            int16_t y2 = y + h - 1;
 23fae66:	18d6      	adds	r6, r2, r3
 23fae68:	b2b6      	uxth	r6, r6
 23fae6a:	1e75      	subs	r5, r6, #1
 23fae6c:	b22d      	sxth	r5, r5
            if(y2 >= 0) {               // Not off top
 23fae6e:	2d00      	cmp	r5, #0
 23fae70:	db0f      	blt.n	23fae92 <_ZN15Adafruit_SPITFT14writeFastVLineEssst+0x54>
                if(y  <  0)       { y = 0; h = y2 + 1; } // Clip top
 23fae72:	2a00      	cmp	r2, #0
 23fae74:	bfbc      	itt	lt
 23fae76:	2200      	movlt	r2, #0
 23fae78:	b233      	sxthlt	r3, r6
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fae7a:	42ac      	cmp	r4, r5
 23fae7c:	bfd8      	it	le
 23fae7e:	1aa3      	suble	r3, r4, r2
                writeFillRectPreclipped(x, y, 1, h, color);
 23fae80:	f8bd 4018 	ldrh.w	r4, [sp, #24]
                if(y2 >= _height) { h = _height - y;   } // Clip bottom
 23fae84:	bfd8      	it	le
 23fae86:	b21b      	sxthle	r3, r3
                writeFillRectPreclipped(x, y, 1, h, color);
 23fae88:	e9cd 3400 	strd	r3, r4, [sp]
 23fae8c:	2301      	movs	r3, #1
 23fae8e:	f7ff fe5f 	bl	23fab50 <_ZN15Adafruit_SPITFT23writeFillRectPreclippedEsssst>
}
 23fae92:	b002      	add	sp, #8
 23fae94:	bd70      	pop	{r4, r5, r6, pc}

023fae96 <_ZN15Adafruit_SPITFT8spiWriteEh>:
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 23fae96:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fae98:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::spiWrite(uint8_t b) {
 23fae9c:	4604      	mov	r4, r0
 23fae9e:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
 23faea0:	b923      	cbnz	r3, 23faeac <_ZN15Adafruit_SPITFT8spiWriteEh+0x16>
}
 23faea2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(b);
 23faea6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23faea8:	f001 b9e2 	b.w	23fc270 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23faeac:	2b01      	cmp	r3, #1
 23faeae:	d118      	bne.n	23faee2 <_ZN15Adafruit_SPITFT8spiWriteEh+0x4c>
 23faeb0:	2608      	movs	r6, #8
            if(b & 0x80) SPI_MOSI_HIGH();
 23faeb2:	062b      	lsls	r3, r5, #24
 23faeb4:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23faeb8:	d510      	bpl.n	23faedc <_ZN15Adafruit_SPITFT8spiWriteEh+0x46>
 23faeba:	f7ff fcd7 	bl	23fa86c <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23faebe:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23faec2:	f7ff fccb 	bl	23fa85c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<8; bit++) {
 23faec6:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23faec8:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23faecc:	f7ff fcc2 	bl	23fa854 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            b <<= 1;
 23faed0:	006d      	lsls	r5, r5, #1
        for(uint8_t bit=0; bit<8; bit++) {
 23faed2:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            b <<= 1;
 23faed6:	b2ed      	uxtb	r5, r5
        for(uint8_t bit=0; bit<8; bit++) {
 23faed8:	d1eb      	bne.n	23faeb2 <_ZN15Adafruit_SPITFT8spiWriteEh+0x1c>
}
 23faeda:	bd70      	pop	{r4, r5, r6, pc}
            else         SPI_MOSI_LOW();
 23faedc:	f7ff fcc2 	bl	23fa864 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23faee0:	e7ed      	b.n	23faebe <_ZN15Adafruit_SPITFT8spiWriteEh+0x28>
        TFT_WR_STROBE();
 23faee2:	f7ff fde4 	bl	23faaae <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23faee6:	e7f8      	b.n	23faeda <_ZN15Adafruit_SPITFT8spiWriteEh+0x44>

023faee8 <_ZN15Adafruit_SPITFT12writeCommandEh>:
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 23faee8:	b513      	push	{r0, r1, r4, lr}
 23faeea:	4604      	mov	r4, r0
    SPI_DC_LOW();
 23faeec:	f990 003f 	ldrsb.w	r0, [r0, #63]	; 0x3f
void Adafruit_SPITFT::writeCommand(uint8_t cmd) {
 23faef0:	9101      	str	r1, [sp, #4]
    SPI_DC_LOW();
 23faef2:	f7ff fcbf 	bl	23fa874 <_ZN15Adafruit_SPITFT10SPI_DC_LOWEv.isra.0>
    spiWrite(cmd);
 23faef6:	4620      	mov	r0, r4
 23faef8:	9901      	ldr	r1, [sp, #4]
 23faefa:	f7ff ffcc 	bl	23fae96 <_ZN15Adafruit_SPITFT8spiWriteEh>
    SPI_DC_HIGH();
 23faefe:	f994 003f 	ldrsb.w	r0, [r4, #63]	; 0x3f
}
 23faf02:	b002      	add	sp, #8
 23faf04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    SPI_DC_HIGH();
 23faf08:	f7ff bcb8 	b.w	23fa87c <_ZN15Adafruit_SPITFT11SPI_DC_HIGHEv.isra.0>

023faf0c <_ZN15Adafruit_SPITFT13invertDisplayEb>:
void Adafruit_SPITFT::invertDisplay(bool i) {
 23faf0c:	b570      	push	{r4, r5, r6, lr}
 23faf0e:	460d      	mov	r5, r1
    startWrite();
 23faf10:	6803      	ldr	r3, [r0, #0]
void Adafruit_SPITFT::invertDisplay(bool i) {
 23faf12:	4604      	mov	r4, r0
    startWrite();
 23faf14:	695b      	ldr	r3, [r3, #20]
 23faf16:	4798      	blx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
 23faf18:	b155      	cbz	r5, 23faf30 <_ZN15Adafruit_SPITFT13invertDisplayEb+0x24>
 23faf1a:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
 23faf1e:	4620      	mov	r0, r4
 23faf20:	f7ff ffe2 	bl	23faee8 <_ZN15Adafruit_SPITFT12writeCommandEh>
    endWrite();
 23faf24:	6823      	ldr	r3, [r4, #0]
 23faf26:	4620      	mov	r0, r4
}
 23faf28:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    endWrite();
 23faf2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23faf2e:	4718      	bx	r3
    writeCommand(i ? invertOnCommand : invertOffCommand);
 23faf30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 23faf34:	e7f3      	b.n	23faf1e <_ZN15Adafruit_SPITFT13invertDisplayEb+0x12>

023faf36 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>:
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 23faf36:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23faf38:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE16(uint16_t w) {
 23faf3c:	4605      	mov	r5, r0
 23faf3e:	460c      	mov	r4, r1
    if(connection == TFT_HARD_SPI) {
 23faf40:	b94b      	cbnz	r3, 23faf56 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x20>
        hwspi._spi->transfer(w >> 8);
 23faf42:	0a09      	lsrs	r1, r1, #8
 23faf44:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23faf46:	f001 f993 	bl	23fc270 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(w);
 23faf4a:	6a68      	ldr	r0, [r5, #36]	; 0x24
 23faf4c:	b2e1      	uxtb	r1, r4
}
 23faf4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(w);
 23faf52:	f001 b98d 	b.w	23fc270 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23faf56:	2b01      	cmp	r3, #1
 23faf58:	d118      	bne.n	23faf8c <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x56>
 23faf5a:	2610      	movs	r6, #16
            if(w & 0x8000) SPI_MOSI_HIGH();
 23faf5c:	0423      	lsls	r3, r4, #16
 23faf5e:	f995 0024 	ldrsb.w	r0, [r5, #36]	; 0x24
 23faf62:	d510      	bpl.n	23faf86 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x50>
 23faf64:	f7ff fc82 	bl	23fa86c <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23faf68:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23faf6c:	f7ff fc76 	bl	23fa85c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<16; bit++) {
 23faf70:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23faf72:	f995 0026 	ldrsb.w	r0, [r5, #38]	; 0x26
 23faf76:	f7ff fc6d 	bl	23fa854 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
            w <<= 1;
 23faf7a:	0064      	lsls	r4, r4, #1
        for(uint8_t bit=0; bit<16; bit++) {
 23faf7c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            w <<= 1;
 23faf80:	b2a4      	uxth	r4, r4
        for(uint8_t bit=0; bit<16; bit++) {
 23faf82:	d1eb      	bne.n	23faf5c <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x26>
}
 23faf84:	bd70      	pop	{r4, r5, r6, pc}
            else           SPI_MOSI_LOW();
 23faf86:	f7ff fc6d 	bl	23fa864 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23faf8a:	e7ed      	b.n	23faf68 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x32>
        TFT_WR_STROBE();
 23faf8c:	f7ff fd8f 	bl	23faaae <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23faf90:	e7f8      	b.n	23faf84 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et+0x4e>

023faf92 <_ZN15Adafruit_SPITFT10writePixelEsst>:
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 23faf92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23faf94:	2900      	cmp	r1, #0
void Adafruit_SPITFT::writePixel(int16_t x, int16_t y, uint16_t color) {
 23faf96:	4604      	mov	r4, r0
 23faf98:	461e      	mov	r6, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23faf9a:	db17      	blt.n	23fafcc <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23faf9c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fafa0:	428b      	cmp	r3, r1
 23fafa2:	dd13      	ble.n	23fafcc <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fafa4:	2a00      	cmp	r2, #0
 23fafa6:	db11      	blt.n	23fafcc <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
 23fafa8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fafac:	4293      	cmp	r3, r2
 23fafae:	dd0d      	ble.n	23fafcc <_ZN15Adafruit_SPITFT10writePixelEsst+0x3a>
        setAddrWindow(x, y, 1, 1);
 23fafb0:	2301      	movs	r3, #1
 23fafb2:	6805      	ldr	r5, [r0, #0]
 23fafb4:	9300      	str	r3, [sp, #0]
 23fafb6:	6d6f      	ldr	r7, [r5, #84]	; 0x54
 23fafb8:	b292      	uxth	r2, r2
 23fafba:	b289      	uxth	r1, r1
 23fafbc:	47b8      	blx	r7
        SPI_WRITE16(color);
 23fafbe:	4631      	mov	r1, r6
 23fafc0:	4620      	mov	r0, r4
}
 23fafc2:	b003      	add	sp, #12
 23fafc4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        SPI_WRITE16(color);
 23fafc8:	f7ff bfb5 	b.w	23faf36 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
}
 23fafcc:	b003      	add	sp, #12
 23fafce:	bdf0      	pop	{r4, r5, r6, r7, pc}

023fafd0 <_ZN15Adafruit_SPITFT9drawPixelEsst>:
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fafd0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fafd4:	1e0d      	subs	r5, r1, #0
void Adafruit_SPITFT::drawPixel(int16_t x, int16_t y, uint16_t color) {
 23fafd6:	4604      	mov	r4, r0
 23fafd8:	4616      	mov	r6, r2
 23fafda:	461f      	mov	r7, r3
    if((x >= 0) && (x < _width) && (y >= 0) && (y < _height)) {
 23fafdc:	db20      	blt.n	23fb020 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fafde:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 23fafe2:	42ab      	cmp	r3, r5
 23fafe4:	dd1c      	ble.n	23fb020 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fafe6:	2a00      	cmp	r2, #0
 23fafe8:	db1a      	blt.n	23fb020 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
 23fafea:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 23fafee:	4293      	cmp	r3, r2
 23faff0:	dd16      	ble.n	23fb020 <_ZN15Adafruit_SPITFT9drawPixelEsst+0x50>
        startWrite();
 23faff2:	6803      	ldr	r3, [r0, #0]
 23faff4:	695b      	ldr	r3, [r3, #20]
 23faff6:	4798      	blx	r3
        setAddrWindow(x, y, 1, 1);
 23faff8:	2301      	movs	r3, #1
 23faffa:	6822      	ldr	r2, [r4, #0]
 23faffc:	9300      	str	r3, [sp, #0]
 23faffe:	4620      	mov	r0, r4
 23fb000:	f8d2 8054 	ldr.w	r8, [r2, #84]	; 0x54
 23fb004:	b2a9      	uxth	r1, r5
 23fb006:	b2b2      	uxth	r2, r6
 23fb008:	47c0      	blx	r8
        SPI_WRITE16(color);
 23fb00a:	4620      	mov	r0, r4
 23fb00c:	4639      	mov	r1, r7
 23fb00e:	f7ff ff92 	bl	23faf36 <_ZN15Adafruit_SPITFT11SPI_WRITE16Et>
        endWrite();
 23fb012:	4620      	mov	r0, r4
 23fb014:	6823      	ldr	r3, [r4, #0]
 23fb016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 23fb018:	b002      	add	sp, #8
 23fb01a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        endWrite();
 23fb01e:	4718      	bx	r3
}
 23fb020:	b002      	add	sp, #8
 23fb022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

023fb026 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>:
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 23fb026:	b570      	push	{r4, r5, r6, lr}
    if(connection == TFT_HARD_SPI) {
 23fb028:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
void Adafruit_SPITFT::SPI_WRITE32(uint32_t l) {
 23fb02c:	4604      	mov	r4, r0
 23fb02e:	460d      	mov	r5, r1
    if(connection == TFT_HARD_SPI) {
 23fb030:	b99b      	cbnz	r3, 23fb05a <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x34>
        hwspi._spi->transfer(l >> 24);
 23fb032:	0e09      	lsrs	r1, r1, #24
 23fb034:	6a40      	ldr	r0, [r0, #36]	; 0x24
 23fb036:	f001 f91b 	bl	23fc270 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 16);
 23fb03a:	f3c5 4107 	ubfx	r1, r5, #16, #8
 23fb03e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb040:	f001 f916 	bl	23fc270 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l >> 8);
 23fb044:	f3c5 2107 	ubfx	r1, r5, #8, #8
 23fb048:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb04a:	f001 f911 	bl	23fc270 <_ZN8SPIClass8transferEh>
        hwspi._spi->transfer(l);
 23fb04e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 23fb050:	b2e9      	uxtb	r1, r5
}
 23fb052:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        hwspi._spi->transfer(l);
 23fb056:	f001 b90b 	b.w	23fc270 <_ZN8SPIClass8transferEh>
    } else if(connection == TFT_SOFT_SPI) {
 23fb05a:	2b01      	cmp	r3, #1
 23fb05c:	d118      	bne.n	23fb090 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x6a>
 23fb05e:	2620      	movs	r6, #32
            if(l & 0x80000000) SPI_MOSI_HIGH();
 23fb060:	2d00      	cmp	r5, #0
 23fb062:	f994 0024 	ldrsb.w	r0, [r4, #36]	; 0x24
 23fb066:	da10      	bge.n	23fb08a <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x64>
 23fb068:	f7ff fc00 	bl	23fa86c <_ZN15Adafruit_SPITFT13SPI_MOSI_HIGHEv.isra.0>
            SPI_SCK_HIGH();
 23fb06c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fb070:	f7ff fbf4 	bl	23fa85c <_ZN15Adafruit_SPITFT12SPI_SCK_HIGHEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
 23fb074:	3e01      	subs	r6, #1
            SPI_SCK_LOW();
 23fb076:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
 23fb07a:	f7ff fbeb 	bl	23fa854 <_ZN15Adafruit_SPITFT11SPI_SCK_LOWEv.isra.0>
        for(uint8_t bit=0; bit<32; bit++) {
 23fb07e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
            l <<= 1;
 23fb082:	ea4f 0545 	mov.w	r5, r5, lsl #1
        for(uint8_t bit=0; bit<32; bit++) {
 23fb086:	d1eb      	bne.n	23fb060 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x3a>
}
 23fb088:	bd70      	pop	{r4, r5, r6, pc}
            else               SPI_MOSI_LOW();
 23fb08a:	f7ff fbeb 	bl	23fa864 <_ZN15Adafruit_SPITFT12SPI_MOSI_LOWEv.isra.0>
 23fb08e:	e7ed      	b.n	23fb06c <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x46>
        TFT_WR_STROBE();
 23fb090:	f7ff fd0d 	bl	23faaae <_ZN15Adafruit_SPITFT13TFT_WR_STROBEEv>
}
 23fb094:	e7f8      	b.n	23fb088 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em+0x62>

023fb096 <_ZN15Adafruit_ST7789D1Ev>:

//#include "Adafruit_ST77xx.h"
#include "../lib/Adafruit_ST7735_RK/src/Adafruit_ST77xx.h"

/// Subclass of ST77XX type display for ST7789 TFT Driver
class Adafruit_ST7789 : public Adafruit_ST77xx {
 23fb096:	4770      	bx	lr

023fb098 <_ZN15Adafruit_ST778911setRotationEh>:
*/
/**************************************************************************/
void Adafruit_ST7789::setRotation(uint8_t m) {
  uint8_t madctl = 0;

  rotation = m & 3; // can't be higher than 3
 23fb098:	f001 0103 	and.w	r1, r1, #3

  switch (rotation) {
 23fb09c:	2902      	cmp	r1, #2
void Adafruit_ST7789::setRotation(uint8_t m) {
 23fb09e:	b570      	push	{r4, r5, r6, lr}
 23fb0a0:	4604      	mov	r4, r0
  rotation = m & 3; // can't be higher than 3
 23fb0a2:	7681      	strb	r1, [r0, #26]
  switch (rotation) {
 23fb0a4:	d024      	beq.n	23fb0f0 <_ZN15Adafruit_ST778911setRotationEh+0x58>
 23fb0a6:	2903      	cmp	r1, #3
 23fb0a8:	d025      	beq.n	23fb0f6 <_ZN15Adafruit_ST778911setRotationEh+0x5e>
 23fb0aa:	2901      	cmp	r1, #1
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 23fb0ac:	bf14      	ite	ne
 23fb0ae:	25c0      	movne	r5, #192	; 0xc0
     _xstart = _colstart;
     _ystart = _rowstart;
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fb0b0:	25a0      	moveq	r5, #160	; 0xa0
 23fb0b2:	f890 304c 	ldrb.w	r3, [r0, #76]	; 0x4c
 23fb0b6:	f890 204d 	ldrb.w	r2, [r0, #77]	; 0x4d
     _xstart = _colstart;
 23fb0ba:	bf19      	ittee	ne
 23fb0bc:	f8a0 3040 	strhne.w	r3, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fb0c0:	f8a0 2042 	strhne.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fb0c4:	f8a0 2040 	strheq.w	r2, [r0, #64]	; 0x40
     _ystart = _colstart;
 23fb0c8:	f8a0 3042 	strheq.w	r3, [r0, #66]	; 0x42
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _xstart = 0;
     _ystart = 0;
     break;
  }
  startWrite();
 23fb0cc:	6823      	ldr	r3, [r4, #0]
 23fb0ce:	4620      	mov	r0, r4
 23fb0d0:	695b      	ldr	r3, [r3, #20]
 23fb0d2:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
 23fb0d4:	4620      	mov	r0, r4
 23fb0d6:	2136      	movs	r1, #54	; 0x36
 23fb0d8:	f7ff ff06 	bl	23faee8 <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
 23fb0dc:	4620      	mov	r0, r4
 23fb0de:	4629      	mov	r1, r5
 23fb0e0:	f7ff fed9 	bl	23fae96 <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
 23fb0e4:	6823      	ldr	r3, [r4, #0]
 23fb0e6:	4620      	mov	r0, r4
}
 23fb0e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
 23fb0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb0ee:	4718      	bx	r3
     _xstart = 0;
 23fb0f0:	2500      	movs	r5, #0
 23fb0f2:	6405      	str	r5, [r0, #64]	; 0x40
     break;
 23fb0f4:	e7ea      	b.n	23fb0cc <_ZN15Adafruit_ST778911setRotationEh+0x34>
     _xstart = 0;
 23fb0f6:	2300      	movs	r3, #0
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fb0f8:	2560      	movs	r5, #96	; 0x60
     _xstart = 0;
 23fb0fa:	6403      	str	r3, [r0, #64]	; 0x40
     break;
 23fb0fc:	e7e6      	b.n	23fb0cc <_ZN15Adafruit_ST778911setRotationEh+0x34>

023fb0fe <_ZN15Adafruit_ST7789D0Ev>:
 23fb0fe:	b510      	push	{r4, lr}
 23fb100:	4604      	mov	r4, r0
 23fb102:	2150      	movs	r1, #80	; 0x50
 23fb104:	f7fe f8bb 	bl	23f927e <_ZdlPvj>
 23fb108:	4620      	mov	r0, r4
 23fb10a:	bd10      	pop	{r4, pc}

023fb10c <_ZN15Adafruit_ST7789C1Eaaa>:
Adafruit_ST7789::Adafruit_ST7789(int8_t cs, int8_t dc, int8_t rst) :
 23fb10c:	b510      	push	{r4, lr}
 23fb10e:	4604      	mov	r4, r0
  Adafruit_ST77xx(cs, dc, rst) {
 23fb110:	f000 f89a 	bl	23fb248 <_ZN15Adafruit_ST77xxC1Eaaa>
 23fb114:	4b01      	ldr	r3, [pc, #4]	; (23fb11c <_ZN15Adafruit_ST7789C1Eaaa+0x10>)
}
 23fb116:	4620      	mov	r0, r4
  Adafruit_ST77xx(cs, dc, rst) {
 23fb118:	6023      	str	r3, [r4, #0]
}
 23fb11a:	bd10      	pop	{r4, pc}
 23fb11c:	023ffd24 	.word	0x023ffd24

023fb120 <_ZN15Adafruit_ST77894initEtt>:
void Adafruit_ST7789::init(uint16_t width, uint16_t height) {
 23fb120:	b570      	push	{r4, r5, r6, lr}
 23fb122:	4604      	mov	r4, r0
  _colstart = ST7789_240x240_XSTART;
 23fb124:	2500      	movs	r5, #0
  commonInit(NULL);
 23fb126:	2100      	movs	r1, #0
 23fb128:	f000 f8e5 	bl	23fb2f6 <_ZN15Adafruit_ST77xx10commonInitEPKh>
  _width    = 320;
 23fb12c:	4b07      	ldr	r3, [pc, #28]	; (23fb14c <_ZN15Adafruit_ST77894initEtt+0x2c>)
  displayInit(cmd_240x240);
 23fb12e:	4620      	mov	r0, r4
  _width    = 320;
 23fb130:	60e3      	str	r3, [r4, #12]
  displayInit(cmd_240x240);
 23fb132:	4907      	ldr	r1, [pc, #28]	; (23fb150 <_ZN15Adafruit_ST77894initEtt+0x30>)
  _colstart = ST7789_240x240_XSTART;
 23fb134:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
  displayInit(cmd_240x240);
 23fb138:	f000 f89a 	bl	23fb270 <_ZN15Adafruit_ST77xx11displayInitEPKh>
  setRotation(0);
 23fb13c:	6823      	ldr	r3, [r4, #0]
 23fb13e:	4629      	mov	r1, r5
 23fb140:	4620      	mov	r0, r4
}
 23fb142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  setRotation(0);
 23fb146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb148:	4718      	bx	r3
 23fb14a:	bf00      	nop
 23fb14c:	00f00140 	.word	0x00f00140
 23fb150:	023ffcf8 	.word	0x023ffcf8

023fb154 <_ZN15Adafruit_ST77xxD1Ev>:
#define ST77XX_MAGENTA    0xF81F
#define ST77XX_YELLOW     0xFFE0
#define	ST77XX_ORANGE     0xFC00

/// Subclass of SPITFT for ST77xx displays (lots in common!)
class Adafruit_ST77xx : public Adafruit_SPITFT {
 23fb154:	4770      	bx	lr

023fb156 <_ZN15Adafruit_ST77xx11setRotationEh>:
/*!
    @brief  Set origin of (0,0) and orientation of TFT display
    @param  m  The index for rotation, from 0-3 inclusive
*/
/**************************************************************************/
void Adafruit_ST77xx::setRotation(uint8_t m) {
 23fb156:	b570      	push	{r4, r5, r6, lr}
  uint8_t madctl = 0;

  rotation = m % 4; // can't be higher than 3
 23fb158:	f001 0103 	and.w	r1, r1, #3

  switch(rotation) {
 23fb15c:	2902      	cmp	r1, #2
void Adafruit_ST77xx::setRotation(uint8_t m) {
 23fb15e:	4604      	mov	r4, r0
   case 0:
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
     _xstart = _colstart;
 23fb160:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
     _ystart = _rowstart;
 23fb164:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
  rotation = m % 4; // can't be higher than 3
 23fb168:	7681      	strb	r1, [r0, #26]
  switch(rotation) {
 23fb16a:	d020      	beq.n	23fb1ae <_ZN15Adafruit_ST77xx11setRotationEh+0x58>
 23fb16c:	2903      	cmp	r1, #3
 23fb16e:	d024      	beq.n	23fb1ba <_ZN15Adafruit_ST77xx11setRotationEh+0x64>
 23fb170:	2901      	cmp	r1, #1
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MY | ST77XX_MADCTL_RGB;
 23fb172:	bf17      	itett	ne
 23fb174:	25c0      	movne	r5, #192	; 0xc0
     break;
   case 1:
     madctl  = ST77XX_MADCTL_MY | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fb176:	25a0      	moveq	r5, #160	; 0xa0
     _xstart = _colstart;
 23fb178:	f8a0 2040 	strhne.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fb17c:	f8a0 3042 	strhne.w	r3, [r0, #66]	; 0x42
     _ystart = _colstart;
 23fb180:	bf04      	itt	eq
 23fb182:	f8a0 2042 	strheq.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fb186:	f8a0 3040 	strheq.w	r3, [r0, #64]	; 0x40
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
     _ystart = _colstart;
     _xstart = _rowstart;
     break;
  }
  startWrite();
 23fb18a:	6823      	ldr	r3, [r4, #0]
 23fb18c:	4620      	mov	r0, r4
 23fb18e:	695b      	ldr	r3, [r3, #20]
 23fb190:	4798      	blx	r3
  writeCommand(ST77XX_MADCTL);
 23fb192:	4620      	mov	r0, r4
 23fb194:	2136      	movs	r1, #54	; 0x36
 23fb196:	f7ff fea7 	bl	23faee8 <_ZN15Adafruit_SPITFT12writeCommandEh>
  spiWrite(madctl);
 23fb19a:	4620      	mov	r0, r4
 23fb19c:	4629      	mov	r1, r5
 23fb19e:	f7ff fe7a 	bl	23fae96 <_ZN15Adafruit_SPITFT8spiWriteEh>
  endWrite();
 23fb1a2:	6823      	ldr	r3, [r4, #0]
 23fb1a4:	4620      	mov	r0, r4
}
 23fb1a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  endWrite();
 23fb1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb1ac:	4718      	bx	r3
     madctl  = ST77XX_MADCTL_RGB;
 23fb1ae:	2500      	movs	r5, #0
     _xstart = _colstart;
 23fb1b0:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
     _ystart = _rowstart;
 23fb1b4:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
     break;
 23fb1b8:	e7e7      	b.n	23fb18a <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
     madctl  = ST77XX_MADCTL_MX | ST77XX_MADCTL_MV | ST77XX_MADCTL_RGB;
 23fb1ba:	2560      	movs	r5, #96	; 0x60
     _ystart = _colstart;
 23fb1bc:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
     _xstart = _rowstart;
 23fb1c0:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
     break;
 23fb1c4:	e7e1      	b.n	23fb18a <_ZN15Adafruit_ST77xx11setRotationEh+0x34>
	...

023fb1c8 <_ZN15Adafruit_ST77xx5beginEm>:
    freq = SPI_DEFAULT_FREQ;
 23fb1c8:	4b06      	ldr	r3, [pc, #24]	; (23fb1e4 <_ZN15Adafruit_ST77xx5beginEm+0x1c>)
  initSPI(freq);
 23fb1ca:	2200      	movs	r2, #0
    freq = SPI_DEFAULT_FREQ;
 23fb1cc:	2900      	cmp	r1, #0
 23fb1ce:	bf18      	it	ne
 23fb1d0:	460b      	movne	r3, r1
  invertOnCommand  = ST77XX_INVON;
 23fb1d2:	f242 0121 	movw	r1, #8225	; 0x2021
  _freq = freq;
 23fb1d6:	6483      	str	r3, [r0, #72]	; 0x48
  invertOnCommand  = ST77XX_INVON;
 23fb1d8:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
  initSPI(freq);
 23fb1dc:	4619      	mov	r1, r3
 23fb1de:	f7ff bba3 	b.w	23fa928 <_ZN15Adafruit_SPITFT7initSPIEmh>
 23fb1e2:	bf00      	nop
 23fb1e4:	00f42400 	.word	0x00f42400

023fb1e8 <_ZN15Adafruit_ST77xx13setAddrWindowEtttt>:
  uint16_t h) {
 23fb1e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fb1ea:	4604      	mov	r4, r0
  x += _xstart;
 23fb1ec:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
  y += _ystart;
 23fb1f0:	f8b0 5042 	ldrh.w	r5, [r0, #66]	; 0x42
  uint16_t h) {
 23fb1f4:	f8bd 6018 	ldrh.w	r6, [sp, #24]
  x += _xstart;
 23fb1f8:	4439      	add	r1, r7
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
 23fb1fa:	fa13 f781 	uxtah	r7, r3, r1
  y += _ystart;
 23fb1fe:	442a      	add	r2, r5
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fb200:	fa16 f582 	uxtah	r5, r6, r2
  uint32_t xa = ((uint32_t)x << 16) | (x+w-1);
 23fb204:	3f01      	subs	r7, #1
 23fb206:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fb20a:	3d01      	subs	r5, #1
  writeCommand(ST77XX_CASET); // Column addr set
 23fb20c:	212a      	movs	r1, #42	; 0x2a
  uint32_t ya = ((uint32_t)y << 16) | (y+h-1); 
 23fb20e:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
  writeCommand(ST77XX_CASET); // Column addr set
 23fb212:	f7ff fe69 	bl	23faee8 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(xa);
 23fb216:	4639      	mov	r1, r7
 23fb218:	4620      	mov	r0, r4
 23fb21a:	f7ff ff04 	bl	23fb026 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RASET); // Row addr set
 23fb21e:	4620      	mov	r0, r4
 23fb220:	212b      	movs	r1, #43	; 0x2b
 23fb222:	f7ff fe61 	bl	23faee8 <_ZN15Adafruit_SPITFT12writeCommandEh>
  SPI_WRITE32(ya);
 23fb226:	4629      	mov	r1, r5
 23fb228:	4620      	mov	r0, r4
 23fb22a:	f7ff fefc 	bl	23fb026 <_ZN15Adafruit_SPITFT11SPI_WRITE32Em>
  writeCommand(ST77XX_RAMWR); // write to RAM
 23fb22e:	4620      	mov	r0, r4
}
 23fb230:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  writeCommand(ST77XX_RAMWR); // write to RAM
 23fb234:	212c      	movs	r1, #44	; 0x2c
 23fb236:	f7ff be57 	b.w	23faee8 <_ZN15Adafruit_SPITFT12writeCommandEh>

023fb23a <_ZN15Adafruit_ST77xxD0Ev>:
 23fb23a:	b510      	push	{r4, lr}
 23fb23c:	4604      	mov	r4, r0
 23fb23e:	2150      	movs	r1, #80	; 0x50
 23fb240:	f7fe f81d 	bl	23f927e <_ZdlPvj>
 23fb244:	4620      	mov	r0, r4
 23fb246:	bd10      	pop	{r4, pc}

023fb248 <_ZN15Adafruit_ST77xxC1Eaaa>:
Adafruit_ST77xx::Adafruit_ST77xx(int8_t cs, int8_t dc, int8_t rst) :
 23fb248:	b513      	push	{r0, r1, r4, lr}
 23fb24a:	4604      	mov	r4, r0
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
 23fb24c:	e9cd 2300 	strd	r2, r3, [sp]
 23fb250:	460b      	mov	r3, r1
 23fb252:	22a0      	movs	r2, #160	; 0xa0
 23fb254:	2180      	movs	r1, #128	; 0x80
 23fb256:	f7ff fb37 	bl	23fa8c8 <_ZN15Adafruit_SPITFTC1Ettaaa>
 23fb25a:	4b04      	ldr	r3, [pc, #16]	; (23fb26c <_ZN15Adafruit_ST77xxC1Eaaa+0x24>)
}
 23fb25c:	4620      	mov	r0, r4
  Adafruit_SPITFT(ST7735_TFTWIDTH_128, ST7735_TFTHEIGHT_160, cs, dc, rst) {
 23fb25e:	6023      	str	r3, [r4, #0]
 23fb260:	2300      	movs	r3, #0
 23fb262:	f8a4 304c 	strh.w	r3, [r4, #76]	; 0x4c
}
 23fb266:	b002      	add	sp, #8
 23fb268:	bd10      	pop	{r4, pc}
 23fb26a:	bf00      	nop
 23fb26c:	023ffd84 	.word	0x023ffd84

023fb270 <_ZN15Adafruit_ST77xx11displayInitEPKh>:
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 23fb270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 23fb274:	460c      	mov	r4, r1
  startWrite();
 23fb276:	6803      	ldr	r3, [r0, #0]
void Adafruit_ST77xx::displayInit(const uint8_t *addr) {
 23fb278:	4605      	mov	r5, r0
  startWrite();
 23fb27a:	695b      	ldr	r3, [r3, #20]
 23fb27c:	4798      	blx	r3
  numCommands = pgm_read_byte(addr++);   // Number of commands to follow
 23fb27e:	f814 7b01 	ldrb.w	r7, [r4], #1
  while(numCommands--) {                 // For each command...
 23fb282:	b397      	cbz	r7, 23fb2ea <_ZN15Adafruit_ST77xx11displayInitEPKh+0x7a>
    writeCommand(pgm_read_byte(addr++)); // Read, issue command
 23fb284:	4626      	mov	r6, r4
 23fb286:	4628      	mov	r0, r5
 23fb288:	f816 1b02 	ldrb.w	r1, [r6], #2
 23fb28c:	f7ff fe2c 	bl	23faee8 <_ZN15Adafruit_SPITFT12writeCommandEh>
    numArgs  = pgm_read_byte(addr++);    // Number of args to follow
 23fb290:	f894 9001 	ldrb.w	r9, [r4, #1]
 23fb294:	46b2      	mov	sl, r6
    numArgs &= ~ST_CMD_DELAY;            // Mask out delay bit
 23fb296:	f009 087f 	and.w	r8, r9, #127	; 0x7f
 23fb29a:	4644      	mov	r4, r8
    while(numArgs--) {                   // For each argument...
 23fb29c:	3c01      	subs	r4, #1
 23fb29e:	b2e4      	uxtb	r4, r4
 23fb2a0:	2cff      	cmp	r4, #255	; 0xff
 23fb2a2:	d005      	beq.n	23fb2b0 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x40>
      spiWrite(pgm_read_byte(addr++));   // Read, issue argument
 23fb2a4:	4628      	mov	r0, r5
 23fb2a6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 23fb2aa:	f7ff fdf4 	bl	23fae96 <_ZN15Adafruit_SPITFT8spiWriteEh>
    while(numArgs--) {                   // For each argument...
 23fb2ae:	e7f5      	b.n	23fb29c <_ZN15Adafruit_ST77xx11displayInitEPKh+0x2c>
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *csPort   |= csPinMaskSet;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_cs, HIGH);
 23fb2b0:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
 23fb2b4:	2101      	movs	r1, #1
 23fb2b6:	b280      	uxth	r0, r0
 23fb2b8:	f001 fa09 	bl	23fc6ce <digitalWrite>
      #endif // end !KINETISK
     #else  // !HAS_PORT_SET_CLR
        *csPort   &= csPinMaskClr;
     #endif // end !HAS_PORT_SET_CLR
    #else  // !USE_FAST_PINIO
        digitalWrite(_cs, LOW);
 23fb2bc:	f995 003e 	ldrsb.w	r0, [r5, #62]	; 0x3e
 23fb2c0:	2100      	movs	r1, #0
 23fb2c2:	b280      	uxth	r0, r0
 23fb2c4:	f001 fa03 	bl	23fc6ce <digitalWrite>
    if(ms) {
 23fb2c8:	f019 0f80 	tst.w	r9, #128	; 0x80
 23fb2cc:	eb06 0408 	add.w	r4, r6, r8
 23fb2d0:	d008      	beq.n	23fb2e4 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x74>
      ms = pgm_read_byte(addr++); // Read post-command delay time (ms)
 23fb2d2:	f816 0008 	ldrb.w	r0, [r6, r8]
 23fb2d6:	3401      	adds	r4, #1
      if(ms == 255) ms = 500;     // If 255, delay for 500 ms
 23fb2d8:	28ff      	cmp	r0, #255	; 0xff
      delay(ms);
 23fb2da:	bf08      	it	eq
 23fb2dc:	f44f 70fa 	moveq.w	r0, #500	; 0x1f4
 23fb2e0:	f000 fbb4 	bl	23fba4c <delay>
 23fb2e4:	3f01      	subs	r7, #1
 23fb2e6:	b2ff      	uxtb	r7, r7
 23fb2e8:	e7cb      	b.n	23fb282 <_ZN15Adafruit_ST77xx11displayInitEPKh+0x12>
  endWrite();
 23fb2ea:	682b      	ldr	r3, [r5, #0]
 23fb2ec:	4628      	mov	r0, r5
}
 23fb2ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  endWrite();
 23fb2f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb2f4:	4718      	bx	r3

023fb2f6 <_ZN15Adafruit_ST77xx10commonInitEPKh>:
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 23fb2f6:	b538      	push	{r3, r4, r5, lr}
 23fb2f8:	460d      	mov	r5, r1
  begin();
 23fb2fa:	6803      	ldr	r3, [r0, #0]
 23fb2fc:	2100      	movs	r1, #0
 23fb2fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
void Adafruit_ST77xx::commonInit(const uint8_t *cmdList) {
 23fb300:	4604      	mov	r4, r0
  begin();
 23fb302:	4798      	blx	r3
  if(cmdList) {
 23fb304:	b12d      	cbz	r5, 23fb312 <_ZN15Adafruit_ST77xx10commonInitEPKh+0x1c>
    displayInit(cmdList);
 23fb306:	4629      	mov	r1, r5
 23fb308:	4620      	mov	r0, r4
}
 23fb30a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    displayInit(cmdList);
 23fb30e:	f7ff bfaf 	b.w	23fb270 <_ZN15Adafruit_ST77xx11displayInitEPKh>
}
 23fb312:	bd38      	pop	{r3, r4, r5, pc}

023fb314 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fb314:	b509      	push	{r0, r3, lr}
 23fb316:	4804      	ldr	r0, [pc, #16]	; (23fb328 <os_mutex_recursive_create+0x14>)
 23fb318:	6800      	ldr	r0, [r0, #0]
 23fb31a:	4b04      	ldr	r3, [pc, #16]	; (23fb32c <os_mutex_recursive_create+0x18>)
 23fb31c:	4403      	add	r3, r0
 23fb31e:	681b      	ldr	r3, [r3, #0]
 23fb320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb322:	9302      	str	r3, [sp, #8]
 23fb324:	bd09      	pop	{r0, r3, pc}
 23fb326:	0000      	.short	0x0000
 23fb328:	1007ad5c 	.word	0x1007ad5c
 23fb32c:	00000030 	.word	0x00000030

023fb330 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fb330:	b509      	push	{r0, r3, lr}
 23fb332:	4804      	ldr	r0, [pc, #16]	; (23fb344 <HAL_RNG_GetRandomNumber+0x14>)
 23fb334:	6800      	ldr	r0, [r0, #0]
 23fb336:	4b04      	ldr	r3, [pc, #16]	; (23fb348 <HAL_RNG_GetRandomNumber+0x18>)
 23fb338:	4403      	add	r3, r0
 23fb33a:	681b      	ldr	r3, [r3, #0]
 23fb33c:	685b      	ldr	r3, [r3, #4]
 23fb33e:	9302      	str	r3, [sp, #8]
 23fb340:	bd09      	pop	{r0, r3, pc}
 23fb342:	0000      	.short	0x0000
 23fb344:	1007ad5c 	.word	0x1007ad5c
 23fb348:	00000000 	.word	0x00000000

023fb34c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fb34c:	b509      	push	{r0, r3, lr}
 23fb34e:	4804      	ldr	r0, [pc, #16]	; (23fb360 <HAL_Delay_Microseconds+0x14>)
 23fb350:	6800      	ldr	r0, [r0, #0]
 23fb352:	4b04      	ldr	r3, [pc, #16]	; (23fb364 <HAL_Delay_Microseconds+0x18>)
 23fb354:	4403      	add	r3, r0
 23fb356:	681b      	ldr	r3, [r3, #0]
 23fb358:	68db      	ldr	r3, [r3, #12]
 23fb35a:	9302      	str	r3, [sp, #8]
 23fb35c:	bd09      	pop	{r0, r3, pc}
 23fb35e:	0000      	.short	0x0000
 23fb360:	1007ad5c 	.word	0x1007ad5c
 23fb364:	00000000 	.word	0x00000000

023fb368 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fb368:	b509      	push	{r0, r3, lr}
 23fb36a:	4804      	ldr	r0, [pc, #16]	; (23fb37c <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fb36c:	6800      	ldr	r0, [r0, #0]
 23fb36e:	4b04      	ldr	r3, [pc, #16]	; (23fb380 <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fb370:	4403      	add	r3, r0
 23fb372:	681b      	ldr	r3, [r3, #0]
 23fb374:	695b      	ldr	r3, [r3, #20]
 23fb376:	9302      	str	r3, [sp, #8]
 23fb378:	bd09      	pop	{r0, r3, pc}
 23fb37a:	0000      	.short	0x0000
 23fb37c:	1007ad5c 	.word	0x1007ad5c
 23fb380:	00000000 	.word	0x00000000

023fb384 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fb384:	b509      	push	{r0, r3, lr}
 23fb386:	4804      	ldr	r0, [pc, #16]	; (23fb398 <hal_gpio_mode+0x14>)
 23fb388:	6800      	ldr	r0, [r0, #0]
 23fb38a:	4b04      	ldr	r3, [pc, #16]	; (23fb39c <hal_gpio_mode+0x18>)
 23fb38c:	4403      	add	r3, r0
 23fb38e:	681b      	ldr	r3, [r3, #0]
 23fb390:	689b      	ldr	r3, [r3, #8]
 23fb392:	9302      	str	r3, [sp, #8]
 23fb394:	bd09      	pop	{r0, r3, pc}
 23fb396:	0000      	.short	0x0000
 23fb398:	1007ad5c 	.word	0x1007ad5c
 23fb39c:	00000014 	.word	0x00000014

023fb3a0 <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fb3a0:	b509      	push	{r0, r3, lr}
 23fb3a2:	4804      	ldr	r0, [pc, #16]	; (23fb3b4 <hal_gpio_get_mode+0x14>)
 23fb3a4:	6800      	ldr	r0, [r0, #0]
 23fb3a6:	4b04      	ldr	r3, [pc, #16]	; (23fb3b8 <hal_gpio_get_mode+0x18>)
 23fb3a8:	4403      	add	r3, r0
 23fb3aa:	681b      	ldr	r3, [r3, #0]
 23fb3ac:	68db      	ldr	r3, [r3, #12]
 23fb3ae:	9302      	str	r3, [sp, #8]
 23fb3b0:	bd09      	pop	{r0, r3, pc}
 23fb3b2:	0000      	.short	0x0000
 23fb3b4:	1007ad5c 	.word	0x1007ad5c
 23fb3b8:	00000014 	.word	0x00000014

023fb3bc <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fb3bc:	b509      	push	{r0, r3, lr}
 23fb3be:	4804      	ldr	r0, [pc, #16]	; (23fb3d0 <hal_gpio_write+0x14>)
 23fb3c0:	6800      	ldr	r0, [r0, #0]
 23fb3c2:	4b04      	ldr	r3, [pc, #16]	; (23fb3d4 <hal_gpio_write+0x18>)
 23fb3c4:	4403      	add	r3, r0
 23fb3c6:	681b      	ldr	r3, [r3, #0]
 23fb3c8:	691b      	ldr	r3, [r3, #16]
 23fb3ca:	9302      	str	r3, [sp, #8]
 23fb3cc:	bd09      	pop	{r0, r3, pc}
 23fb3ce:	0000      	.short	0x0000
 23fb3d0:	1007ad5c 	.word	0x1007ad5c
 23fb3d4:	00000014 	.word	0x00000014

023fb3d8 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fb3d8:	b509      	push	{r0, r3, lr}
 23fb3da:	4804      	ldr	r0, [pc, #16]	; (23fb3ec <hal_i2c_begin+0x14>)
 23fb3dc:	6800      	ldr	r0, [r0, #0]
 23fb3de:	4b04      	ldr	r3, [pc, #16]	; (23fb3f0 <hal_i2c_begin+0x18>)
 23fb3e0:	4403      	add	r3, r0
 23fb3e2:	681b      	ldr	r3, [r3, #0]
 23fb3e4:	68db      	ldr	r3, [r3, #12]
 23fb3e6:	9302      	str	r3, [sp, #8]
 23fb3e8:	bd09      	pop	{r0, r3, pc}
 23fb3ea:	0000      	.short	0x0000
 23fb3ec:	1007ad5c 	.word	0x1007ad5c
 23fb3f0:	00000010 	.word	0x00000010

023fb3f4 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fb3f4:	b509      	push	{r0, r3, lr}
 23fb3f6:	4804      	ldr	r0, [pc, #16]	; (23fb408 <hal_i2c_begin_transmission+0x14>)
 23fb3f8:	6800      	ldr	r0, [r0, #0]
 23fb3fa:	4b04      	ldr	r3, [pc, #16]	; (23fb40c <hal_i2c_begin_transmission+0x18>)
 23fb3fc:	4403      	add	r3, r0
 23fb3fe:	681b      	ldr	r3, [r3, #0]
 23fb400:	699b      	ldr	r3, [r3, #24]
 23fb402:	9302      	str	r3, [sp, #8]
 23fb404:	bd09      	pop	{r0, r3, pc}
 23fb406:	0000      	.short	0x0000
 23fb408:	1007ad5c 	.word	0x1007ad5c
 23fb40c:	00000010 	.word	0x00000010

023fb410 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fb410:	b509      	push	{r0, r3, lr}
 23fb412:	4804      	ldr	r0, [pc, #16]	; (23fb424 <hal_i2c_end_transmission+0x14>)
 23fb414:	6800      	ldr	r0, [r0, #0]
 23fb416:	4b04      	ldr	r3, [pc, #16]	; (23fb428 <hal_i2c_end_transmission+0x18>)
 23fb418:	4403      	add	r3, r0
 23fb41a:	681b      	ldr	r3, [r3, #0]
 23fb41c:	69db      	ldr	r3, [r3, #28]
 23fb41e:	9302      	str	r3, [sp, #8]
 23fb420:	bd09      	pop	{r0, r3, pc}
 23fb422:	0000      	.short	0x0000
 23fb424:	1007ad5c 	.word	0x1007ad5c
 23fb428:	00000010 	.word	0x00000010

023fb42c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fb42c:	b509      	push	{r0, r3, lr}
 23fb42e:	4804      	ldr	r0, [pc, #16]	; (23fb440 <hal_i2c_write+0x14>)
 23fb430:	6800      	ldr	r0, [r0, #0]
 23fb432:	4b04      	ldr	r3, [pc, #16]	; (23fb444 <hal_i2c_write+0x18>)
 23fb434:	4403      	add	r3, r0
 23fb436:	681b      	ldr	r3, [r3, #0]
 23fb438:	6a1b      	ldr	r3, [r3, #32]
 23fb43a:	9302      	str	r3, [sp, #8]
 23fb43c:	bd09      	pop	{r0, r3, pc}
 23fb43e:	0000      	.short	0x0000
 23fb440:	1007ad5c 	.word	0x1007ad5c
 23fb444:	00000010 	.word	0x00000010

023fb448 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fb448:	b509      	push	{r0, r3, lr}
 23fb44a:	4804      	ldr	r0, [pc, #16]	; (23fb45c <hal_i2c_available+0x14>)
 23fb44c:	6800      	ldr	r0, [r0, #0]
 23fb44e:	4b04      	ldr	r3, [pc, #16]	; (23fb460 <hal_i2c_available+0x18>)
 23fb450:	4403      	add	r3, r0
 23fb452:	681b      	ldr	r3, [r3, #0]
 23fb454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fb456:	9302      	str	r3, [sp, #8]
 23fb458:	bd09      	pop	{r0, r3, pc}
 23fb45a:	0000      	.short	0x0000
 23fb45c:	1007ad5c 	.word	0x1007ad5c
 23fb460:	00000010 	.word	0x00000010

023fb464 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fb464:	b509      	push	{r0, r3, lr}
 23fb466:	4804      	ldr	r0, [pc, #16]	; (23fb478 <hal_i2c_read+0x14>)
 23fb468:	6800      	ldr	r0, [r0, #0]
 23fb46a:	4b04      	ldr	r3, [pc, #16]	; (23fb47c <hal_i2c_read+0x18>)
 23fb46c:	4403      	add	r3, r0
 23fb46e:	681b      	ldr	r3, [r3, #0]
 23fb470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb472:	9302      	str	r3, [sp, #8]
 23fb474:	bd09      	pop	{r0, r3, pc}
 23fb476:	0000      	.short	0x0000
 23fb478:	1007ad5c 	.word	0x1007ad5c
 23fb47c:	00000010 	.word	0x00000010

023fb480 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fb480:	b509      	push	{r0, r3, lr}
 23fb482:	4804      	ldr	r0, [pc, #16]	; (23fb494 <hal_i2c_peek+0x14>)
 23fb484:	6800      	ldr	r0, [r0, #0]
 23fb486:	4b04      	ldr	r3, [pc, #16]	; (23fb498 <hal_i2c_peek+0x18>)
 23fb488:	4403      	add	r3, r0
 23fb48a:	681b      	ldr	r3, [r3, #0]
 23fb48c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fb48e:	9302      	str	r3, [sp, #8]
 23fb490:	bd09      	pop	{r0, r3, pc}
 23fb492:	0000      	.short	0x0000
 23fb494:	1007ad5c 	.word	0x1007ad5c
 23fb498:	00000010 	.word	0x00000010

023fb49c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fb49c:	b509      	push	{r0, r3, lr}
 23fb49e:	4804      	ldr	r0, [pc, #16]	; (23fb4b0 <hal_i2c_flush+0x14>)
 23fb4a0:	6800      	ldr	r0, [r0, #0]
 23fb4a2:	4b04      	ldr	r3, [pc, #16]	; (23fb4b4 <hal_i2c_flush+0x18>)
 23fb4a4:	4403      	add	r3, r0
 23fb4a6:	681b      	ldr	r3, [r3, #0]
 23fb4a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb4aa:	9302      	str	r3, [sp, #8]
 23fb4ac:	bd09      	pop	{r0, r3, pc}
 23fb4ae:	0000      	.short	0x0000
 23fb4b0:	1007ad5c 	.word	0x1007ad5c
 23fb4b4:	00000010 	.word	0x00000010

023fb4b8 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fb4b8:	b509      	push	{r0, r3, lr}
 23fb4ba:	4804      	ldr	r0, [pc, #16]	; (23fb4cc <hal_i2c_is_enabled+0x14>)
 23fb4bc:	6800      	ldr	r0, [r0, #0]
 23fb4be:	4b04      	ldr	r3, [pc, #16]	; (23fb4d0 <hal_i2c_is_enabled+0x18>)
 23fb4c0:	4403      	add	r3, r0
 23fb4c2:	681b      	ldr	r3, [r3, #0]
 23fb4c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fb4c6:	9302      	str	r3, [sp, #8]
 23fb4c8:	bd09      	pop	{r0, r3, pc}
 23fb4ca:	0000      	.short	0x0000
 23fb4cc:	1007ad5c 	.word	0x1007ad5c
 23fb4d0:	00000010 	.word	0x00000010

023fb4d4 <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fb4d4:	b509      	push	{r0, r3, lr}
 23fb4d6:	4804      	ldr	r0, [pc, #16]	; (23fb4e8 <hal_i2c_init+0x14>)
 23fb4d8:	6800      	ldr	r0, [r0, #0]
 23fb4da:	4b04      	ldr	r3, [pc, #16]	; (23fb4ec <hal_i2c_init+0x18>)
 23fb4dc:	4403      	add	r3, r0
 23fb4de:	681b      	ldr	r3, [r3, #0]
 23fb4e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb4e2:	9302      	str	r3, [sp, #8]
 23fb4e4:	bd09      	pop	{r0, r3, pc}
 23fb4e6:	0000      	.short	0x0000
 23fb4e8:	1007ad5c 	.word	0x1007ad5c
 23fb4ec:	00000010 	.word	0x00000010

023fb4f0 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fb4f0:	b509      	push	{r0, r3, lr}
 23fb4f2:	4804      	ldr	r0, [pc, #16]	; (23fb504 <hal_i2c_request_ex+0x14>)
 23fb4f4:	6800      	ldr	r0, [r0, #0]
 23fb4f6:	4b04      	ldr	r3, [pc, #16]	; (23fb508 <hal_i2c_request_ex+0x18>)
 23fb4f8:	4403      	add	r3, r0
 23fb4fa:	681b      	ldr	r3, [r3, #0]
 23fb4fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fb4fe:	9302      	str	r3, [sp, #8]
 23fb500:	bd09      	pop	{r0, r3, pc}
 23fb502:	0000      	.short	0x0000
 23fb504:	1007ad5c 	.word	0x1007ad5c
 23fb508:	00000010 	.word	0x00000010

023fb50c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fb50c:	b509      	push	{r0, r3, lr}
 23fb50e:	4804      	ldr	r0, [pc, #16]	; (23fb520 <inet_inet_ntop+0x14>)
 23fb510:	6800      	ldr	r0, [r0, #0]
 23fb512:	4b04      	ldr	r3, [pc, #16]	; (23fb524 <inet_inet_ntop+0x18>)
 23fb514:	4403      	add	r3, r0
 23fb516:	681b      	ldr	r3, [r3, #0]
 23fb518:	695b      	ldr	r3, [r3, #20]
 23fb51a:	9302      	str	r3, [sp, #8]
 23fb51c:	bd09      	pop	{r0, r3, pc}
 23fb51e:	0000      	.short	0x0000
 23fb520:	1007ad5c 	.word	0x1007ad5c
 23fb524:	0000004c 	.word	0x0000004c

023fb528 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fb528:	b509      	push	{r0, r3, lr}
 23fb52a:	4804      	ldr	r0, [pc, #16]	; (23fb53c <netdb_freeaddrinfo+0x14>)
 23fb52c:	6800      	ldr	r0, [r0, #0]
 23fb52e:	4b04      	ldr	r3, [pc, #16]	; (23fb540 <netdb_freeaddrinfo+0x18>)
 23fb530:	4403      	add	r3, r0
 23fb532:	681b      	ldr	r3, [r3, #0]
 23fb534:	689b      	ldr	r3, [r3, #8]
 23fb536:	9302      	str	r3, [sp, #8]
 23fb538:	bd09      	pop	{r0, r3, pc}
 23fb53a:	0000      	.short	0x0000
 23fb53c:	1007ad5c 	.word	0x1007ad5c
 23fb540:	00000050 	.word	0x00000050

023fb544 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fb544:	b509      	push	{r0, r3, lr}
 23fb546:	4804      	ldr	r0, [pc, #16]	; (23fb558 <netdb_getaddrinfo+0x14>)
 23fb548:	6800      	ldr	r0, [r0, #0]
 23fb54a:	4b04      	ldr	r3, [pc, #16]	; (23fb55c <netdb_getaddrinfo+0x18>)
 23fb54c:	4403      	add	r3, r0
 23fb54e:	681b      	ldr	r3, [r3, #0]
 23fb550:	68db      	ldr	r3, [r3, #12]
 23fb552:	9302      	str	r3, [sp, #8]
 23fb554:	bd09      	pop	{r0, r3, pc}
 23fb556:	0000      	.short	0x0000
 23fb558:	1007ad5c 	.word	0x1007ad5c
 23fb55c:	00000050 	.word	0x00000050

023fb560 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
 23fb560:	b509      	push	{r0, r3, lr}
 23fb562:	4804      	ldr	r0, [pc, #16]	; (23fb574 <hal_spi_begin+0x14>)
 23fb564:	6800      	ldr	r0, [r0, #0]
 23fb566:	4b04      	ldr	r3, [pc, #16]	; (23fb578 <hal_spi_begin+0x18>)
 23fb568:	4403      	add	r3, r0
 23fb56a:	681b      	ldr	r3, [r3, #0]
 23fb56c:	681b      	ldr	r3, [r3, #0]
 23fb56e:	9302      	str	r3, [sp, #8]
 23fb570:	bd09      	pop	{r0, r3, pc}
 23fb572:	0000      	.short	0x0000
 23fb574:	1007ad5c 	.word	0x1007ad5c
 23fb578:	00000018 	.word	0x00000018

023fb57c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
 23fb57c:	b509      	push	{r0, r3, lr}
 23fb57e:	4804      	ldr	r0, [pc, #16]	; (23fb590 <hal_spi_transfer+0x14>)
 23fb580:	6800      	ldr	r0, [r0, #0]
 23fb582:	4b04      	ldr	r3, [pc, #16]	; (23fb594 <hal_spi_transfer+0x18>)
 23fb584:	4403      	add	r3, r0
 23fb586:	681b      	ldr	r3, [r3, #0]
 23fb588:	695b      	ldr	r3, [r3, #20]
 23fb58a:	9302      	str	r3, [sp, #8]
 23fb58c:	bd09      	pop	{r0, r3, pc}
 23fb58e:	0000      	.short	0x0000
 23fb590:	1007ad5c 	.word	0x1007ad5c
 23fb594:	00000018 	.word	0x00000018

023fb598 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fb598:	b509      	push	{r0, r3, lr}
 23fb59a:	4804      	ldr	r0, [pc, #16]	; (23fb5ac <hal_spi_init+0x14>)
 23fb59c:	6800      	ldr	r0, [r0, #0]
 23fb59e:	4b04      	ldr	r3, [pc, #16]	; (23fb5b0 <hal_spi_init+0x18>)
 23fb5a0:	4403      	add	r3, r0
 23fb5a2:	681b      	ldr	r3, [r3, #0]
 23fb5a4:	69db      	ldr	r3, [r3, #28]
 23fb5a6:	9302      	str	r3, [sp, #8]
 23fb5a8:	bd09      	pop	{r0, r3, pc}
 23fb5aa:	0000      	.short	0x0000
 23fb5ac:	1007ad5c 	.word	0x1007ad5c
 23fb5b0:	00000018 	.word	0x00000018

023fb5b4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fb5b4:	b509      	push	{r0, r3, lr}
 23fb5b6:	4804      	ldr	r0, [pc, #16]	; (23fb5c8 <hal_spi_is_enabled+0x14>)
 23fb5b8:	6800      	ldr	r0, [r0, #0]
 23fb5ba:	4b04      	ldr	r3, [pc, #16]	; (23fb5cc <hal_spi_is_enabled+0x18>)
 23fb5bc:	4403      	add	r3, r0
 23fb5be:	681b      	ldr	r3, [r3, #0]
 23fb5c0:	6a1b      	ldr	r3, [r3, #32]
 23fb5c2:	9302      	str	r3, [sp, #8]
 23fb5c4:	bd09      	pop	{r0, r3, pc}
 23fb5c6:	0000      	.short	0x0000
 23fb5c8:	1007ad5c 	.word	0x1007ad5c
 23fb5cc:	00000018 	.word	0x00000018

023fb5d0 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
 23fb5d0:	b509      	push	{r0, r3, lr}
 23fb5d2:	4804      	ldr	r0, [pc, #16]	; (23fb5e4 <hal_spi_info+0x14>)
 23fb5d4:	6800      	ldr	r0, [r0, #0]
 23fb5d6:	4b04      	ldr	r3, [pc, #16]	; (23fb5e8 <hal_spi_info+0x18>)
 23fb5d8:	4403      	add	r3, r0
 23fb5da:	681b      	ldr	r3, [r3, #0]
 23fb5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fb5de:	9302      	str	r3, [sp, #8]
 23fb5e0:	bd09      	pop	{r0, r3, pc}
 23fb5e2:	0000      	.short	0x0000
 23fb5e4:	1007ad5c 	.word	0x1007ad5c
 23fb5e8:	00000018 	.word	0x00000018

023fb5ec <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, const void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 23fb5ec:	b509      	push	{r0, r3, lr}
 23fb5ee:	4804      	ldr	r0, [pc, #16]	; (23fb600 <hal_spi_set_settings+0x14>)
 23fb5f0:	6800      	ldr	r0, [r0, #0]
 23fb5f2:	4b04      	ldr	r3, [pc, #16]	; (23fb604 <hal_spi_set_settings+0x18>)
 23fb5f4:	4403      	add	r3, r0
 23fb5f6:	681b      	ldr	r3, [r3, #0]
 23fb5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fb5fa:	9302      	str	r3, [sp, #8]
 23fb5fc:	bd09      	pop	{r0, r3, pc}
 23fb5fe:	0000      	.short	0x0000
 23fb600:	1007ad5c 	.word	0x1007ad5c
 23fb604:	00000018 	.word	0x00000018

023fb608 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
 23fb608:	b509      	push	{r0, r3, lr}
 23fb60a:	4804      	ldr	r0, [pc, #16]	; (23fb61c <hal_spi_acquire+0x14>)
 23fb60c:	6800      	ldr	r0, [r0, #0]
 23fb60e:	4b04      	ldr	r3, [pc, #16]	; (23fb620 <hal_spi_acquire+0x18>)
 23fb610:	4403      	add	r3, r0
 23fb612:	681b      	ldr	r3, [r3, #0]
 23fb614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb616:	9302      	str	r3, [sp, #8]
 23fb618:	bd09      	pop	{r0, r3, pc}
 23fb61a:	0000      	.short	0x0000
 23fb61c:	1007ad5c 	.word	0x1007ad5c
 23fb620:	00000018 	.word	0x00000018

023fb624 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
 23fb624:	b509      	push	{r0, r3, lr}
 23fb626:	4804      	ldr	r0, [pc, #16]	; (23fb638 <hal_spi_release+0x14>)
 23fb628:	6800      	ldr	r0, [r0, #0]
 23fb62a:	4b04      	ldr	r3, [pc, #16]	; (23fb63c <hal_spi_release+0x18>)
 23fb62c:	4403      	add	r3, r0
 23fb62e:	681b      	ldr	r3, [r3, #0]
 23fb630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb632:	9302      	str	r3, [sp, #8]
 23fb634:	bd09      	pop	{r0, r3, pc}
 23fb636:	0000      	.short	0x0000
 23fb638:	1007ad5c 	.word	0x1007ad5c
 23fb63c:	00000018 	.word	0x00000018

023fb640 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fb640:	b509      	push	{r0, r3, lr}
 23fb642:	4804      	ldr	r0, [pc, #16]	; (23fb654 <hal_usart_write+0x14>)
 23fb644:	6800      	ldr	r0, [r0, #0]
 23fb646:	4b04      	ldr	r3, [pc, #16]	; (23fb658 <hal_usart_write+0x18>)
 23fb648:	4403      	add	r3, r0
 23fb64a:	681b      	ldr	r3, [r3, #0]
 23fb64c:	68db      	ldr	r3, [r3, #12]
 23fb64e:	9302      	str	r3, [sp, #8]
 23fb650:	bd09      	pop	{r0, r3, pc}
 23fb652:	0000      	.short	0x0000
 23fb654:	1007ad5c 	.word	0x1007ad5c
 23fb658:	00000024 	.word	0x00000024

023fb65c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fb65c:	b509      	push	{r0, r3, lr}
 23fb65e:	4804      	ldr	r0, [pc, #16]	; (23fb670 <hal_usart_available+0x14>)
 23fb660:	6800      	ldr	r0, [r0, #0]
 23fb662:	4b04      	ldr	r3, [pc, #16]	; (23fb674 <hal_usart_available+0x18>)
 23fb664:	4403      	add	r3, r0
 23fb666:	681b      	ldr	r3, [r3, #0]
 23fb668:	691b      	ldr	r3, [r3, #16]
 23fb66a:	9302      	str	r3, [sp, #8]
 23fb66c:	bd09      	pop	{r0, r3, pc}
 23fb66e:	0000      	.short	0x0000
 23fb670:	1007ad5c 	.word	0x1007ad5c
 23fb674:	00000024 	.word	0x00000024

023fb678 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fb678:	b509      	push	{r0, r3, lr}
 23fb67a:	4804      	ldr	r0, [pc, #16]	; (23fb68c <hal_usart_read+0x14>)
 23fb67c:	6800      	ldr	r0, [r0, #0]
 23fb67e:	4b04      	ldr	r3, [pc, #16]	; (23fb690 <hal_usart_read+0x18>)
 23fb680:	4403      	add	r3, r0
 23fb682:	681b      	ldr	r3, [r3, #0]
 23fb684:	695b      	ldr	r3, [r3, #20]
 23fb686:	9302      	str	r3, [sp, #8]
 23fb688:	bd09      	pop	{r0, r3, pc}
 23fb68a:	0000      	.short	0x0000
 23fb68c:	1007ad5c 	.word	0x1007ad5c
 23fb690:	00000024 	.word	0x00000024

023fb694 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fb694:	b509      	push	{r0, r3, lr}
 23fb696:	4804      	ldr	r0, [pc, #16]	; (23fb6a8 <hal_usart_peek+0x14>)
 23fb698:	6800      	ldr	r0, [r0, #0]
 23fb69a:	4b04      	ldr	r3, [pc, #16]	; (23fb6ac <hal_usart_peek+0x18>)
 23fb69c:	4403      	add	r3, r0
 23fb69e:	681b      	ldr	r3, [r3, #0]
 23fb6a0:	699b      	ldr	r3, [r3, #24]
 23fb6a2:	9302      	str	r3, [sp, #8]
 23fb6a4:	bd09      	pop	{r0, r3, pc}
 23fb6a6:	0000      	.short	0x0000
 23fb6a8:	1007ad5c 	.word	0x1007ad5c
 23fb6ac:	00000024 	.word	0x00000024

023fb6b0 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fb6b0:	b509      	push	{r0, r3, lr}
 23fb6b2:	4804      	ldr	r0, [pc, #16]	; (23fb6c4 <hal_usart_flush+0x14>)
 23fb6b4:	6800      	ldr	r0, [r0, #0]
 23fb6b6:	4b04      	ldr	r3, [pc, #16]	; (23fb6c8 <hal_usart_flush+0x18>)
 23fb6b8:	4403      	add	r3, r0
 23fb6ba:	681b      	ldr	r3, [r3, #0]
 23fb6bc:	69db      	ldr	r3, [r3, #28]
 23fb6be:	9302      	str	r3, [sp, #8]
 23fb6c0:	bd09      	pop	{r0, r3, pc}
 23fb6c2:	0000      	.short	0x0000
 23fb6c4:	1007ad5c 	.word	0x1007ad5c
 23fb6c8:	00000024 	.word	0x00000024

023fb6cc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fb6cc:	b509      	push	{r0, r3, lr}
 23fb6ce:	4804      	ldr	r0, [pc, #16]	; (23fb6e0 <hal_usart_is_enabled+0x14>)
 23fb6d0:	6800      	ldr	r0, [r0, #0]
 23fb6d2:	4b04      	ldr	r3, [pc, #16]	; (23fb6e4 <hal_usart_is_enabled+0x18>)
 23fb6d4:	4403      	add	r3, r0
 23fb6d6:	681b      	ldr	r3, [r3, #0]
 23fb6d8:	6a1b      	ldr	r3, [r3, #32]
 23fb6da:	9302      	str	r3, [sp, #8]
 23fb6dc:	bd09      	pop	{r0, r3, pc}
 23fb6de:	0000      	.short	0x0000
 23fb6e0:	1007ad5c 	.word	0x1007ad5c
 23fb6e4:	00000024 	.word	0x00000024

023fb6e8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fb6e8:	b509      	push	{r0, r3, lr}
 23fb6ea:	4804      	ldr	r0, [pc, #16]	; (23fb6fc <hal_usart_available_data_for_write+0x14>)
 23fb6ec:	6800      	ldr	r0, [r0, #0]
 23fb6ee:	4b04      	ldr	r3, [pc, #16]	; (23fb700 <hal_usart_available_data_for_write+0x18>)
 23fb6f0:	4403      	add	r3, r0
 23fb6f2:	681b      	ldr	r3, [r3, #0]
 23fb6f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fb6f6:	9302      	str	r3, [sp, #8]
 23fb6f8:	bd09      	pop	{r0, r3, pc}
 23fb6fa:	0000      	.short	0x0000
 23fb6fc:	1007ad5c 	.word	0x1007ad5c
 23fb700:	00000024 	.word	0x00000024

023fb704 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fb704:	b509      	push	{r0, r3, lr}
 23fb706:	4804      	ldr	r0, [pc, #16]	; (23fb718 <hal_usart_init_ex+0x14>)
 23fb708:	6800      	ldr	r0, [r0, #0]
 23fb70a:	4b04      	ldr	r3, [pc, #16]	; (23fb71c <hal_usart_init_ex+0x18>)
 23fb70c:	4403      	add	r3, r0
 23fb70e:	681b      	ldr	r3, [r3, #0]
 23fb710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb712:	9302      	str	r3, [sp, #8]
 23fb714:	bd09      	pop	{r0, r3, pc}
 23fb716:	0000      	.short	0x0000
 23fb718:	1007ad5c 	.word	0x1007ad5c
 23fb71c:	00000024 	.word	0x00000024

023fb720 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fb720:	b509      	push	{r0, r3, lr}
 23fb722:	4804      	ldr	r0, [pc, #16]	; (23fb734 <HAL_USB_USART_Init+0x14>)
 23fb724:	6800      	ldr	r0, [r0, #0]
 23fb726:	4b04      	ldr	r3, [pc, #16]	; (23fb738 <HAL_USB_USART_Init+0x18>)
 23fb728:	4403      	add	r3, r0
 23fb72a:	681b      	ldr	r3, [r3, #0]
 23fb72c:	681b      	ldr	r3, [r3, #0]
 23fb72e:	9302      	str	r3, [sp, #8]
 23fb730:	bd09      	pop	{r0, r3, pc}
 23fb732:	0000      	.short	0x0000
 23fb734:	1007ad5c 	.word	0x1007ad5c
 23fb738:	00000034 	.word	0x00000034

023fb73c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 23fb73c:	b509      	push	{r0, r3, lr}
 23fb73e:	4804      	ldr	r0, [pc, #16]	; (23fb750 <HAL_USB_USART_Begin+0x14>)
 23fb740:	6800      	ldr	r0, [r0, #0]
 23fb742:	4b04      	ldr	r3, [pc, #16]	; (23fb754 <HAL_USB_USART_Begin+0x18>)
 23fb744:	4403      	add	r3, r0
 23fb746:	681b      	ldr	r3, [r3, #0]
 23fb748:	685b      	ldr	r3, [r3, #4]
 23fb74a:	9302      	str	r3, [sp, #8]
 23fb74c:	bd09      	pop	{r0, r3, pc}
 23fb74e:	0000      	.short	0x0000
 23fb750:	1007ad5c 	.word	0x1007ad5c
 23fb754:	00000034 	.word	0x00000034

023fb758 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fb758:	b509      	push	{r0, r3, lr}
 23fb75a:	4804      	ldr	r0, [pc, #16]	; (23fb76c <HAL_USB_USART_Available_Data+0x14>)
 23fb75c:	6800      	ldr	r0, [r0, #0]
 23fb75e:	4b04      	ldr	r3, [pc, #16]	; (23fb770 <HAL_USB_USART_Available_Data+0x18>)
 23fb760:	4403      	add	r3, r0
 23fb762:	681b      	ldr	r3, [r3, #0]
 23fb764:	691b      	ldr	r3, [r3, #16]
 23fb766:	9302      	str	r3, [sp, #8]
 23fb768:	bd09      	pop	{r0, r3, pc}
 23fb76a:	0000      	.short	0x0000
 23fb76c:	1007ad5c 	.word	0x1007ad5c
 23fb770:	00000034 	.word	0x00000034

023fb774 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fb774:	b509      	push	{r0, r3, lr}
 23fb776:	4804      	ldr	r0, [pc, #16]	; (23fb788 <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fb778:	6800      	ldr	r0, [r0, #0]
 23fb77a:	4b04      	ldr	r3, [pc, #16]	; (23fb78c <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fb77c:	4403      	add	r3, r0
 23fb77e:	681b      	ldr	r3, [r3, #0]
 23fb780:	695b      	ldr	r3, [r3, #20]
 23fb782:	9302      	str	r3, [sp, #8]
 23fb784:	bd09      	pop	{r0, r3, pc}
 23fb786:	0000      	.short	0x0000
 23fb788:	1007ad5c 	.word	0x1007ad5c
 23fb78c:	00000034 	.word	0x00000034

023fb790 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fb790:	b509      	push	{r0, r3, lr}
 23fb792:	4804      	ldr	r0, [pc, #16]	; (23fb7a4 <HAL_USB_USART_Receive_Data+0x14>)
 23fb794:	6800      	ldr	r0, [r0, #0]
 23fb796:	4b04      	ldr	r3, [pc, #16]	; (23fb7a8 <HAL_USB_USART_Receive_Data+0x18>)
 23fb798:	4403      	add	r3, r0
 23fb79a:	681b      	ldr	r3, [r3, #0]
 23fb79c:	699b      	ldr	r3, [r3, #24]
 23fb79e:	9302      	str	r3, [sp, #8]
 23fb7a0:	bd09      	pop	{r0, r3, pc}
 23fb7a2:	0000      	.short	0x0000
 23fb7a4:	1007ad5c 	.word	0x1007ad5c
 23fb7a8:	00000034 	.word	0x00000034

023fb7ac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fb7ac:	b509      	push	{r0, r3, lr}
 23fb7ae:	4804      	ldr	r0, [pc, #16]	; (23fb7c0 <HAL_USB_USART_Send_Data+0x14>)
 23fb7b0:	6800      	ldr	r0, [r0, #0]
 23fb7b2:	4b04      	ldr	r3, [pc, #16]	; (23fb7c4 <HAL_USB_USART_Send_Data+0x18>)
 23fb7b4:	4403      	add	r3, r0
 23fb7b6:	681b      	ldr	r3, [r3, #0]
 23fb7b8:	69db      	ldr	r3, [r3, #28]
 23fb7ba:	9302      	str	r3, [sp, #8]
 23fb7bc:	bd09      	pop	{r0, r3, pc}
 23fb7be:	0000      	.short	0x0000
 23fb7c0:	1007ad5c 	.word	0x1007ad5c
 23fb7c4:	00000034 	.word	0x00000034

023fb7c8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fb7c8:	b509      	push	{r0, r3, lr}
 23fb7ca:	4804      	ldr	r0, [pc, #16]	; (23fb7dc <HAL_USB_USART_Flush_Data+0x14>)
 23fb7cc:	6800      	ldr	r0, [r0, #0]
 23fb7ce:	4b04      	ldr	r3, [pc, #16]	; (23fb7e0 <HAL_USB_USART_Flush_Data+0x18>)
 23fb7d0:	4403      	add	r3, r0
 23fb7d2:	681b      	ldr	r3, [r3, #0]
 23fb7d4:	6a1b      	ldr	r3, [r3, #32]
 23fb7d6:	9302      	str	r3, [sp, #8]
 23fb7d8:	bd09      	pop	{r0, r3, pc}
 23fb7da:	0000      	.short	0x0000
 23fb7dc:	1007ad5c 	.word	0x1007ad5c
 23fb7e0:	00000034 	.word	0x00000034

023fb7e4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
 23fb7e4:	b509      	push	{r0, r3, lr}
 23fb7e6:	4804      	ldr	r0, [pc, #16]	; (23fb7f8 <panic_+0x14>)
 23fb7e8:	6800      	ldr	r0, [r0, #0]
 23fb7ea:	4b04      	ldr	r3, [pc, #16]	; (23fb7fc <panic_+0x18>)
 23fb7ec:	4403      	add	r3, r0
 23fb7ee:	681b      	ldr	r3, [r3, #0]
 23fb7f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fb7f2:	9302      	str	r3, [sp, #8]
 23fb7f4:	bd09      	pop	{r0, r3, pc}
 23fb7f6:	0000      	.short	0x0000
 23fb7f8:	1007ad5c 	.word	0x1007ad5c
 23fb7fc:	00000048 	.word	0x00000048

023fb800 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fb800:	b509      	push	{r0, r3, lr}
 23fb802:	4804      	ldr	r0, [pc, #16]	; (23fb814 <set_system_mode+0x14>)
 23fb804:	6800      	ldr	r0, [r0, #0]
 23fb806:	4b04      	ldr	r3, [pc, #16]	; (23fb818 <set_system_mode+0x18>)
 23fb808:	4403      	add	r3, r0
 23fb80a:	681b      	ldr	r3, [r3, #0]
 23fb80c:	685b      	ldr	r3, [r3, #4]
 23fb80e:	9302      	str	r3, [sp, #8]
 23fb810:	bd09      	pop	{r0, r3, pc}
 23fb812:	0000      	.short	0x0000
 23fb814:	1007ad5c 	.word	0x1007ad5c
 23fb818:	00000008 	.word	0x00000008

023fb81c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fb81c:	b509      	push	{r0, r3, lr}
 23fb81e:	4804      	ldr	r0, [pc, #16]	; (23fb830 <system_delay_ms+0x14>)
 23fb820:	6800      	ldr	r0, [r0, #0]
 23fb822:	4b04      	ldr	r3, [pc, #16]	; (23fb834 <system_delay_ms+0x18>)
 23fb824:	4403      	add	r3, r0
 23fb826:	681b      	ldr	r3, [r3, #0]
 23fb828:	695b      	ldr	r3, [r3, #20]
 23fb82a:	9302      	str	r3, [sp, #8]
 23fb82c:	bd09      	pop	{r0, r3, pc}
 23fb82e:	0000      	.short	0x0000
 23fb830:	1007ad5c 	.word	0x1007ad5c
 23fb834:	00000008 	.word	0x00000008

023fb838 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fb838:	b509      	push	{r0, r3, lr}
 23fb83a:	4804      	ldr	r0, [pc, #16]	; (23fb84c <system_ctrl_set_app_request_handler+0x14>)
 23fb83c:	6800      	ldr	r0, [r0, #0]
 23fb83e:	4b04      	ldr	r3, [pc, #16]	; (23fb850 <system_ctrl_set_app_request_handler+0x18>)
 23fb840:	4403      	add	r3, r0
 23fb842:	681b      	ldr	r3, [r3, #0]
 23fb844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fb848:	9302      	str	r3, [sp, #8]
 23fb84a:	bd09      	pop	{r0, r3, pc}
 23fb84c:	1007ad5c 	.word	0x1007ad5c
 23fb850:	00000008 	.word	0x00000008

023fb854 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fb854:	b509      	push	{r0, r3, lr}
 23fb856:	4804      	ldr	r0, [pc, #16]	; (23fb868 <system_ctrl_set_result+0x14>)
 23fb858:	6800      	ldr	r0, [r0, #0]
 23fb85a:	4b04      	ldr	r3, [pc, #16]	; (23fb86c <system_ctrl_set_result+0x18>)
 23fb85c:	4403      	add	r3, r0
 23fb85e:	681b      	ldr	r3, [r3, #0]
 23fb860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fb864:	9302      	str	r3, [sp, #8]
 23fb866:	bd09      	pop	{r0, r3, pc}
 23fb868:	1007ad5c 	.word	0x1007ad5c
 23fb86c:	00000008 	.word	0x00000008

023fb870 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fb870:	b509      	push	{r0, r3, lr}
 23fb872:	4804      	ldr	r0, [pc, #16]	; (23fb884 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fb874:	6800      	ldr	r0, [r0, #0]
 23fb876:	4b04      	ldr	r3, [pc, #16]	; (23fb888 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fb878:	4403      	add	r3, r0
 23fb87a:	681b      	ldr	r3, [r3, #0]
 23fb87c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fb87e:	9302      	str	r3, [sp, #8]
 23fb880:	bd09      	pop	{r0, r3, pc}
 23fb882:	0000      	.short	0x0000
 23fb884:	1007ad5c 	.word	0x1007ad5c
 23fb888:	0000002c 	.word	0x0000002c

023fb88c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fb88c:	b509      	push	{r0, r3, lr}
 23fb88e:	4804      	ldr	r0, [pc, #16]	; (23fb8a0 <network_connect+0x14>)
 23fb890:	6800      	ldr	r0, [r0, #0]
 23fb892:	4b04      	ldr	r3, [pc, #16]	; (23fb8a4 <network_connect+0x18>)
 23fb894:	4403      	add	r3, r0
 23fb896:	681b      	ldr	r3, [r3, #0]
 23fb898:	685b      	ldr	r3, [r3, #4]
 23fb89a:	9302      	str	r3, [sp, #8]
 23fb89c:	bd09      	pop	{r0, r3, pc}
 23fb89e:	0000      	.short	0x0000
 23fb8a0:	1007ad5c 	.word	0x1007ad5c
 23fb8a4:	00000028 	.word	0x00000028

023fb8a8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fb8a8:	b509      	push	{r0, r3, lr}
 23fb8aa:	4804      	ldr	r0, [pc, #16]	; (23fb8bc <network_connecting+0x14>)
 23fb8ac:	6800      	ldr	r0, [r0, #0]
 23fb8ae:	4b04      	ldr	r3, [pc, #16]	; (23fb8c0 <network_connecting+0x18>)
 23fb8b0:	4403      	add	r3, r0
 23fb8b2:	681b      	ldr	r3, [r3, #0]
 23fb8b4:	689b      	ldr	r3, [r3, #8]
 23fb8b6:	9302      	str	r3, [sp, #8]
 23fb8b8:	bd09      	pop	{r0, r3, pc}
 23fb8ba:	0000      	.short	0x0000
 23fb8bc:	1007ad5c 	.word	0x1007ad5c
 23fb8c0:	00000028 	.word	0x00000028

023fb8c4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fb8c4:	b509      	push	{r0, r3, lr}
 23fb8c6:	4804      	ldr	r0, [pc, #16]	; (23fb8d8 <network_disconnect+0x14>)
 23fb8c8:	6800      	ldr	r0, [r0, #0]
 23fb8ca:	4b04      	ldr	r3, [pc, #16]	; (23fb8dc <network_disconnect+0x18>)
 23fb8cc:	4403      	add	r3, r0
 23fb8ce:	681b      	ldr	r3, [r3, #0]
 23fb8d0:	68db      	ldr	r3, [r3, #12]
 23fb8d2:	9302      	str	r3, [sp, #8]
 23fb8d4:	bd09      	pop	{r0, r3, pc}
 23fb8d6:	0000      	.short	0x0000
 23fb8d8:	1007ad5c 	.word	0x1007ad5c
 23fb8dc:	00000028 	.word	0x00000028

023fb8e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fb8e0:	b509      	push	{r0, r3, lr}
 23fb8e2:	4804      	ldr	r0, [pc, #16]	; (23fb8f4 <network_ready+0x14>)
 23fb8e4:	6800      	ldr	r0, [r0, #0]
 23fb8e6:	4b04      	ldr	r3, [pc, #16]	; (23fb8f8 <network_ready+0x18>)
 23fb8e8:	4403      	add	r3, r0
 23fb8ea:	681b      	ldr	r3, [r3, #0]
 23fb8ec:	691b      	ldr	r3, [r3, #16]
 23fb8ee:	9302      	str	r3, [sp, #8]
 23fb8f0:	bd09      	pop	{r0, r3, pc}
 23fb8f2:	0000      	.short	0x0000
 23fb8f4:	1007ad5c 	.word	0x1007ad5c
 23fb8f8:	00000028 	.word	0x00000028

023fb8fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fb8fc:	b509      	push	{r0, r3, lr}
 23fb8fe:	4804      	ldr	r0, [pc, #16]	; (23fb910 <network_on+0x14>)
 23fb900:	6800      	ldr	r0, [r0, #0]
 23fb902:	4b04      	ldr	r3, [pc, #16]	; (23fb914 <network_on+0x18>)
 23fb904:	4403      	add	r3, r0
 23fb906:	681b      	ldr	r3, [r3, #0]
 23fb908:	695b      	ldr	r3, [r3, #20]
 23fb90a:	9302      	str	r3, [sp, #8]
 23fb90c:	bd09      	pop	{r0, r3, pc}
 23fb90e:	0000      	.short	0x0000
 23fb910:	1007ad5c 	.word	0x1007ad5c
 23fb914:	00000028 	.word	0x00000028

023fb918 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fb918:	b509      	push	{r0, r3, lr}
 23fb91a:	4804      	ldr	r0, [pc, #16]	; (23fb92c <network_off+0x14>)
 23fb91c:	6800      	ldr	r0, [r0, #0]
 23fb91e:	4b04      	ldr	r3, [pc, #16]	; (23fb930 <network_off+0x18>)
 23fb920:	4403      	add	r3, r0
 23fb922:	681b      	ldr	r3, [r3, #0]
 23fb924:	699b      	ldr	r3, [r3, #24]
 23fb926:	9302      	str	r3, [sp, #8]
 23fb928:	bd09      	pop	{r0, r3, pc}
 23fb92a:	0000      	.short	0x0000
 23fb92c:	1007ad5c 	.word	0x1007ad5c
 23fb930:	00000028 	.word	0x00000028

023fb934 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fb934:	b509      	push	{r0, r3, lr}
 23fb936:	4804      	ldr	r0, [pc, #16]	; (23fb948 <network_listen+0x14>)
 23fb938:	6800      	ldr	r0, [r0, #0]
 23fb93a:	4b04      	ldr	r3, [pc, #16]	; (23fb94c <network_listen+0x18>)
 23fb93c:	4403      	add	r3, r0
 23fb93e:	681b      	ldr	r3, [r3, #0]
 23fb940:	69db      	ldr	r3, [r3, #28]
 23fb942:	9302      	str	r3, [sp, #8]
 23fb944:	bd09      	pop	{r0, r3, pc}
 23fb946:	0000      	.short	0x0000
 23fb948:	1007ad5c 	.word	0x1007ad5c
 23fb94c:	00000028 	.word	0x00000028

023fb950 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fb950:	b509      	push	{r0, r3, lr}
 23fb952:	4804      	ldr	r0, [pc, #16]	; (23fb964 <network_listening+0x14>)
 23fb954:	6800      	ldr	r0, [r0, #0]
 23fb956:	4b04      	ldr	r3, [pc, #16]	; (23fb968 <network_listening+0x18>)
 23fb958:	4403      	add	r3, r0
 23fb95a:	681b      	ldr	r3, [r3, #0]
 23fb95c:	6a1b      	ldr	r3, [r3, #32]
 23fb95e:	9302      	str	r3, [sp, #8]
 23fb960:	bd09      	pop	{r0, r3, pc}
 23fb962:	0000      	.short	0x0000
 23fb964:	1007ad5c 	.word	0x1007ad5c
 23fb968:	00000028 	.word	0x00000028

023fb96c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fb96c:	b509      	push	{r0, r3, lr}
 23fb96e:	4804      	ldr	r0, [pc, #16]	; (23fb980 <network_set_listen_timeout+0x14>)
 23fb970:	6800      	ldr	r0, [r0, #0]
 23fb972:	4b04      	ldr	r3, [pc, #16]	; (23fb984 <network_set_listen_timeout+0x18>)
 23fb974:	4403      	add	r3, r0
 23fb976:	681b      	ldr	r3, [r3, #0]
 23fb978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fb97a:	9302      	str	r3, [sp, #8]
 23fb97c:	bd09      	pop	{r0, r3, pc}
 23fb97e:	0000      	.short	0x0000
 23fb980:	1007ad5c 	.word	0x1007ad5c
 23fb984:	00000028 	.word	0x00000028

023fb988 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fb988:	b509      	push	{r0, r3, lr}
 23fb98a:	4804      	ldr	r0, [pc, #16]	; (23fb99c <network_get_listen_timeout+0x14>)
 23fb98c:	6800      	ldr	r0, [r0, #0]
 23fb98e:	4b04      	ldr	r3, [pc, #16]	; (23fb9a0 <network_get_listen_timeout+0x18>)
 23fb990:	4403      	add	r3, r0
 23fb992:	681b      	ldr	r3, [r3, #0]
 23fb994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fb996:	9302      	str	r3, [sp, #8]
 23fb998:	bd09      	pop	{r0, r3, pc}
 23fb99a:	0000      	.short	0x0000
 23fb99c:	1007ad5c 	.word	0x1007ad5c
 23fb9a0:	00000028 	.word	0x00000028

023fb9a4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fb9a4:	b509      	push	{r0, r3, lr}
 23fb9a6:	4804      	ldr	r0, [pc, #16]	; (23fb9b8 <network_is_on+0x14>)
 23fb9a8:	6800      	ldr	r0, [r0, #0]
 23fb9aa:	4b04      	ldr	r3, [pc, #16]	; (23fb9bc <network_is_on+0x18>)
 23fb9ac:	4403      	add	r3, r0
 23fb9ae:	681b      	ldr	r3, [r3, #0]
 23fb9b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fb9b2:	9302      	str	r3, [sp, #8]
 23fb9b4:	bd09      	pop	{r0, r3, pc}
 23fb9b6:	0000      	.short	0x0000
 23fb9b8:	1007ad5c 	.word	0x1007ad5c
 23fb9bc:	00000028 	.word	0x00000028

023fb9c0 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fb9c0:	b509      	push	{r0, r3, lr}
 23fb9c2:	4804      	ldr	r0, [pc, #16]	; (23fb9d4 <network_is_off+0x14>)
 23fb9c4:	6800      	ldr	r0, [r0, #0]
 23fb9c6:	4b04      	ldr	r3, [pc, #16]	; (23fb9d8 <network_is_off+0x18>)
 23fb9c8:	4403      	add	r3, r0
 23fb9ca:	681b      	ldr	r3, [r3, #0]
 23fb9cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fb9ce:	9302      	str	r3, [sp, #8]
 23fb9d0:	bd09      	pop	{r0, r3, pc}
 23fb9d2:	0000      	.short	0x0000
 23fb9d4:	1007ad5c 	.word	0x1007ad5c
 23fb9d8:	00000028 	.word	0x00000028

023fb9dc <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fb9dc:	b509      	push	{r0, r3, lr}
 23fb9de:	4804      	ldr	r0, [pc, #16]	; (23fb9f0 <malloc+0x14>)
 23fb9e0:	6800      	ldr	r0, [r0, #0]
 23fb9e2:	4b04      	ldr	r3, [pc, #16]	; (23fb9f4 <malloc+0x18>)
 23fb9e4:	4403      	add	r3, r0
 23fb9e6:	681b      	ldr	r3, [r3, #0]
 23fb9e8:	681b      	ldr	r3, [r3, #0]
 23fb9ea:	9302      	str	r3, [sp, #8]
 23fb9ec:	bd09      	pop	{r0, r3, pc}
 23fb9ee:	0000      	.short	0x0000
 23fb9f0:	1007ad5c 	.word	0x1007ad5c
 23fb9f4:	00000004 	.word	0x00000004

023fb9f8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fb9f8:	b509      	push	{r0, r3, lr}
 23fb9fa:	4804      	ldr	r0, [pc, #16]	; (23fba0c <free+0x14>)
 23fb9fc:	6800      	ldr	r0, [r0, #0]
 23fb9fe:	4b04      	ldr	r3, [pc, #16]	; (23fba10 <free+0x18>)
 23fba00:	4403      	add	r3, r0
 23fba02:	681b      	ldr	r3, [r3, #0]
 23fba04:	685b      	ldr	r3, [r3, #4]
 23fba06:	9302      	str	r3, [sp, #8]
 23fba08:	bd09      	pop	{r0, r3, pc}
 23fba0a:	0000      	.short	0x0000
 23fba0c:	1007ad5c 	.word	0x1007ad5c
 23fba10:	00000004 	.word	0x00000004

023fba14 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fba14:	b509      	push	{r0, r3, lr}
 23fba16:	4804      	ldr	r0, [pc, #16]	; (23fba28 <__assert_func+0x14>)
 23fba18:	6800      	ldr	r0, [r0, #0]
 23fba1a:	4b04      	ldr	r3, [pc, #16]	; (23fba2c <__assert_func+0x18>)
 23fba1c:	4403      	add	r3, r0
 23fba1e:	681b      	ldr	r3, [r3, #0]
 23fba20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fba22:	9302      	str	r3, [sp, #8]
 23fba24:	bd09      	pop	{r0, r3, pc}
 23fba26:	0000      	.short	0x0000
 23fba28:	1007ad5c 	.word	0x1007ad5c
 23fba2c:	00000004 	.word	0x00000004

023fba30 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fba30:	b509      	push	{r0, r3, lr}
 23fba32:	4804      	ldr	r0, [pc, #16]	; (23fba44 <newlib_impure_ptr_callback+0x14>)
 23fba34:	6800      	ldr	r0, [r0, #0]
 23fba36:	4b04      	ldr	r3, [pc, #16]	; (23fba48 <newlib_impure_ptr_callback+0x18>)
 23fba38:	4403      	add	r3, r0
 23fba3a:	681b      	ldr	r3, [r3, #0]
 23fba3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fba3e:	9302      	str	r3, [sp, #8]
 23fba40:	bd09      	pop	{r0, r3, pc}
 23fba42:	0000      	.short	0x0000
 23fba44:	1007ad5c 	.word	0x1007ad5c
 23fba48:	00000004 	.word	0x00000004

023fba4c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fba4c:	2100      	movs	r1, #0
 23fba4e:	f7ff bee5 	b.w	23fb81c <system_delay_ms>
	...

023fba54 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fba54:	2300      	movs	r3, #0
 23fba56:	4802      	ldr	r0, [pc, #8]	; (23fba60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fba58:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fba5a:	f7ff bc5b 	b.w	23fb314 <os_mutex_recursive_create>
 23fba5e:	bf00      	nop
 23fba60:	1007ae8c 	.word	0x1007ae8c

023fba64 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fba64:	2200      	movs	r2, #0
 23fba66:	6840      	ldr	r0, [r0, #4]
 23fba68:	4611      	mov	r1, r2
 23fba6a:	f7ff bf71 	b.w	23fb950 <network_listening>

023fba6e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fba6e:	2200      	movs	r2, #0
 23fba70:	6840      	ldr	r0, [r0, #4]
 23fba72:	4611      	mov	r1, r2
 23fba74:	f7ff bf88 	b.w	23fb988 <network_get_listen_timeout>

023fba78 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fba78:	2200      	movs	r2, #0
 23fba7a:	6840      	ldr	r0, [r0, #4]
 23fba7c:	f7ff bf76 	b.w	23fb96c <network_set_listen_timeout>

023fba80 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fba80:	2200      	movs	r2, #0
 23fba82:	6840      	ldr	r0, [r0, #4]
 23fba84:	f081 0101 	eor.w	r1, r1, #1
 23fba88:	f7ff bf54 	b.w	23fb934 <network_listen>

023fba8c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fba8c:	2300      	movs	r3, #0
 23fba8e:	6840      	ldr	r0, [r0, #4]
 23fba90:	461a      	mov	r2, r3
 23fba92:	4619      	mov	r1, r3
 23fba94:	f7ff bf40 	b.w	23fb918 <network_off>

023fba98 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fba98:	2300      	movs	r3, #0
 23fba9a:	6840      	ldr	r0, [r0, #4]
 23fba9c:	461a      	mov	r2, r3
 23fba9e:	4619      	mov	r1, r3
 23fbaa0:	f7ff bf2c 	b.w	23fb8fc <network_on>

023fbaa4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fbaa4:	2200      	movs	r2, #0
 23fbaa6:	6840      	ldr	r0, [r0, #4]
 23fbaa8:	4611      	mov	r1, r2
 23fbaaa:	f7ff bf19 	b.w	23fb8e0 <network_ready>

023fbaae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fbaae:	2200      	movs	r2, #0
 23fbab0:	6840      	ldr	r0, [r0, #4]
 23fbab2:	4611      	mov	r1, r2
 23fbab4:	f7ff bef8 	b.w	23fb8a8 <network_connecting>

023fbab8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fbab8:	2200      	movs	r2, #0
 23fbaba:	2102      	movs	r1, #2
 23fbabc:	6840      	ldr	r0, [r0, #4]
 23fbabe:	f7ff bf01 	b.w	23fb8c4 <network_disconnect>

023fbac2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fbac2:	2300      	movs	r3, #0
 23fbac4:	6840      	ldr	r0, [r0, #4]
 23fbac6:	461a      	mov	r2, r3
 23fbac8:	f7ff bee0 	b.w	23fb88c <network_connect>

023fbacc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fbacc:	2203      	movs	r2, #3
 23fbace:	4b02      	ldr	r3, [pc, #8]	; (23fbad8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fbad0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fbad2:	4a02      	ldr	r2, [pc, #8]	; (23fbadc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23fbad4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fbad6:	4770      	bx	lr
 23fbad8:	1007ae90 	.word	0x1007ae90
 23fbadc:	023ffde4 	.word	0x023ffde4

023fbae0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fbae0:	4770      	bx	lr

023fbae2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fbae2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbae4:	4606      	mov	r6, r0
 23fbae6:	4615      	mov	r5, r2
 23fbae8:	460c      	mov	r4, r1
 23fbaea:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fbaec:	42bc      	cmp	r4, r7
 23fbaee:	d006      	beq.n	23fbafe <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fbaf0:	6833      	ldr	r3, [r6, #0]
 23fbaf2:	4630      	mov	r0, r6
 23fbaf4:	689b      	ldr	r3, [r3, #8]
 23fbaf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fbafa:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fbafc:	e7f6      	b.n	23fbaec <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fbafe:	4628      	mov	r0, r5
 23fbb00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbb02 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fbb02:	2200      	movs	r2, #0
 23fbb04:	7c00      	ldrb	r0, [r0, #16]
 23fbb06:	f7ff bc91 	b.w	23fb42c <hal_i2c_write>

023fbb0a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fbb0a:	2100      	movs	r1, #0
 23fbb0c:	7c00      	ldrb	r0, [r0, #16]
 23fbb0e:	f7ff bc9b 	b.w	23fb448 <hal_i2c_available>

023fbb12 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fbb12:	2100      	movs	r1, #0
 23fbb14:	7c00      	ldrb	r0, [r0, #16]
 23fbb16:	f7ff bca5 	b.w	23fb464 <hal_i2c_read>

023fbb1a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fbb1a:	2100      	movs	r1, #0
 23fbb1c:	7c00      	ldrb	r0, [r0, #16]
 23fbb1e:	f7ff bcaf 	b.w	23fb480 <hal_i2c_peek>

023fbb22 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fbb22:	2100      	movs	r1, #0
 23fbb24:	7c00      	ldrb	r0, [r0, #16]
 23fbb26:	f7ff bcb9 	b.w	23fb49c <hal_i2c_flush>

023fbb2a <_ZN7TwoWireD0Ev>:
 23fbb2a:	b510      	push	{r4, lr}
 23fbb2c:	4604      	mov	r4, r0
 23fbb2e:	2114      	movs	r1, #20
 23fbb30:	f7fd fba5 	bl	23f927e <_ZdlPvj>
 23fbb34:	4620      	mov	r0, r4
 23fbb36:	bd10      	pop	{r4, pc}

023fbb38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fbb38:	b538      	push	{r3, r4, r5, lr}
 23fbb3a:	4604      	mov	r4, r0
 23fbb3c:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fbb3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fbb42:	2200      	movs	r2, #0
 23fbb44:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fbb48:	4b09      	ldr	r3, [pc, #36]	; (23fbb70 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fbb4a:	4608      	mov	r0, r1
  _i2c = i2c;
 23fbb4c:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fbb4e:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fbb50:	4629      	mov	r1, r5
 23fbb52:	f7ff fcbf 	bl	23fb4d4 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fbb56:	30bf      	adds	r0, #191	; 0xbf
 23fbb58:	d108      	bne.n	23fbb6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fbb5a:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fbb5c:	07db      	lsls	r3, r3, #31
 23fbb5e:	d505      	bpl.n	23fbb6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fbb60:	6868      	ldr	r0, [r5, #4]
 23fbb62:	f7ff ff49 	bl	23fb9f8 <free>
    free(conf.tx_buffer);
 23fbb66:	68e8      	ldr	r0, [r5, #12]
 23fbb68:	f7ff ff46 	bl	23fb9f8 <free>
}
 23fbb6c:	4620      	mov	r0, r4
 23fbb6e:	bd38      	pop	{r3, r4, r5, pc}
 23fbb70:	023ffe20 	.word	0x023ffe20

023fbb74 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fbb74:	2300      	movs	r3, #0
 23fbb76:	7c00      	ldrb	r0, [r0, #16]
 23fbb78:	461a      	mov	r2, r3
 23fbb7a:	4619      	mov	r1, r3
 23fbb7c:	f7ff bc2c 	b.w	23fb3d8 <hal_i2c_begin>

023fbb80 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fbb80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fbb82:	2200      	movs	r2, #0
 23fbb84:	2314      	movs	r3, #20
 23fbb86:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fbb8a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fbb8e:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fbb90:	7c00      	ldrb	r0, [r0, #16]
 23fbb92:	f88d 3008 	strb.w	r3, [sp, #8]
 23fbb96:	684b      	ldr	r3, [r1, #4]
 23fbb98:	9303      	str	r3, [sp, #12]
 23fbb9a:	68cb      	ldr	r3, [r1, #12]
 23fbb9c:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fbb9e:	7a0b      	ldrb	r3, [r1, #8]
 23fbba0:	a901      	add	r1, sp, #4
 23fbba2:	9305      	str	r3, [sp, #20]
 23fbba4:	f7ff fca4 	bl	23fb4f0 <hal_i2c_request_ex>
}
 23fbba8:	b007      	add	sp, #28
 23fbbaa:	f85d fb04 	ldr.w	pc, [sp], #4

023fbbae <_ZN7TwoWire11requestFromEhjh>:
{
 23fbbae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fbbb0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fbbb2:	f88d 1000 	strb.w	r1, [sp]
 23fbbb6:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fbbba:	bf18      	it	ne
 23fbbbc:	2301      	movne	r3, #1
 23fbbbe:	9103      	str	r1, [sp, #12]
 23fbbc0:	4669      	mov	r1, sp
    size_ = size;
 23fbbc2:	9201      	str	r2, [sp, #4]
 23fbbc4:	f88d 3008 	strb.w	r3, [sp, #8]
 23fbbc8:	f7ff ffda 	bl	23fbb80 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fbbcc:	b005      	add	sp, #20
 23fbbce:	f85d fb04 	ldr.w	pc, [sp], #4

023fbbd2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23fbbd2:	2301      	movs	r3, #1
 23fbbd4:	f7ff bfeb 	b.w	23fbbae <_ZN7TwoWire11requestFromEhjh>

023fbbd8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fbbd8:	2200      	movs	r2, #0
 23fbbda:	7c00      	ldrb	r0, [r0, #16]
 23fbbdc:	f7ff bc0a 	b.w	23fb3f4 <hal_i2c_begin_transmission>

023fbbe0 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fbbe0:	2200      	movs	r2, #0
 23fbbe2:	7c00      	ldrb	r0, [r0, #16]
 23fbbe4:	f7ff bc14 	b.w	23fb410 <hal_i2c_end_transmission>

023fbbe8 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23fbbe8:	2101      	movs	r1, #1
 23fbbea:	f7ff bff9 	b.w	23fbbe0 <_ZN7TwoWire15endTransmissionEh>

023fbbee <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fbbee:	4770      	bx	lr

023fbbf0 <_ZN9IPAddressD0Ev>:
 23fbbf0:	b510      	push	{r4, lr}
 23fbbf2:	4604      	mov	r4, r0
 23fbbf4:	2118      	movs	r1, #24
 23fbbf6:	f7fd fb42 	bl	23f927e <_ZdlPvj>
 23fbbfa:	4620      	mov	r0, r4
 23fbbfc:	bd10      	pop	{r4, pc}

023fbbfe <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fbbfe:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fbc00:	7d03      	ldrb	r3, [r0, #20]
{
 23fbc02:	460e      	mov	r6, r1
	if (address.v==6) {
 23fbc04:	2b06      	cmp	r3, #6
 23fbc06:	f04f 0400 	mov.w	r4, #0
{
 23fbc0a:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fbc0c:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fbc10:	d012      	beq.n	23fbc38 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fbc12:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fbc16:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fbc1a:	220a      	movs	r2, #10
 23fbc1c:	4630      	mov	r0, r6
 23fbc1e:	f000 f964 	bl	23fbeea <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fbc22:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fbc24:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fbc26:	d019      	beq.n	23fbc5c <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fbc28:	2c00      	cmp	r4, #0
 23fbc2a:	d0f4      	beq.n	23fbc16 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fbc2c:	212e      	movs	r1, #46	; 0x2e
 23fbc2e:	4630      	mov	r0, r6
 23fbc30:	f000 f93c 	bl	23fbeac <_ZN5Print5printEc>
 23fbc34:	4404      	add	r4, r0
 23fbc36:	e7ee      	b.n	23fbc16 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fbc38:	232f      	movs	r3, #47	; 0x2f
 23fbc3a:	466a      	mov	r2, sp
 23fbc3c:	4639      	mov	r1, r7
 23fbc3e:	200a      	movs	r0, #10
		buf[0] = 0;
 23fbc40:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fbc44:	f7ff fc62 	bl	23fb50c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fbc48:	4668      	mov	r0, sp
 23fbc4a:	f7fd faf1 	bl	23f9230 <strlen>
 23fbc4e:	6833      	ldr	r3, [r6, #0]
 23fbc50:	4602      	mov	r2, r0
 23fbc52:	4669      	mov	r1, sp
 23fbc54:	4630      	mov	r0, r6
 23fbc56:	68db      	ldr	r3, [r3, #12]
 23fbc58:	4798      	blx	r3
 23fbc5a:	4604      	mov	r4, r0
    }
    return n;
}
 23fbc5c:	4620      	mov	r0, r4
 23fbc5e:	b00d      	add	sp, #52	; 0x34
 23fbc60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fbc64 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fbc64:	b510      	push	{r4, lr}
 23fbc66:	4604      	mov	r4, r0
 23fbc68:	4b04      	ldr	r3, [pc, #16]	; (23fbc7c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fbc6a:	2211      	movs	r2, #17
 23fbc6c:	2100      	movs	r1, #0
 23fbc6e:	f840 3b04 	str.w	r3, [r0], #4
 23fbc72:	f000 fe5a 	bl	23fc92a <memset>
}
 23fbc76:	4620      	mov	r0, r4
 23fbc78:	bd10      	pop	{r4, pc}
 23fbc7a:	bf00      	nop
 23fbc7c:	023ffe48 	.word	0x023ffe48

023fbc80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fbc80:	4603      	mov	r3, r0
 23fbc82:	4a07      	ldr	r2, [pc, #28]	; (23fbca0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fbc84:	b510      	push	{r4, lr}
 23fbc86:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fbc8a:	f101 0210 	add.w	r2, r1, #16
 23fbc8e:	f851 4b04 	ldr.w	r4, [r1], #4
 23fbc92:	4291      	cmp	r1, r2
 23fbc94:	f843 4b04 	str.w	r4, [r3], #4
 23fbc98:	d1f9      	bne.n	23fbc8e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fbc9a:	780a      	ldrb	r2, [r1, #0]
 23fbc9c:	701a      	strb	r2, [r3, #0]
}
 23fbc9e:	bd10      	pop	{r4, pc}
 23fbca0:	023ffe48 	.word	0x023ffe48

023fbca4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23fbca4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23fbca6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23fbcaa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23fbcae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23fbcb2:	2304      	movs	r3, #4
 23fbcb4:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23fbcb8:	6041      	str	r1, [r0, #4]
 23fbcba:	7503      	strb	r3, [r0, #20]
}
 23fbcbc:	bd10      	pop	{r4, pc}
	...

023fbcc0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23fbcc0:	b507      	push	{r0, r1, r2, lr}
 23fbcc2:	4b06      	ldr	r3, [pc, #24]	; (23fbcdc <_ZN9IPAddressC1EPKh+0x1c>)
 23fbcc4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23fbcc6:	78cb      	ldrb	r3, [r1, #3]
 23fbcc8:	9300      	str	r3, [sp, #0]
 23fbcca:	788b      	ldrb	r3, [r1, #2]
 23fbccc:	784a      	ldrb	r2, [r1, #1]
 23fbcce:	7809      	ldrb	r1, [r1, #0]
 23fbcd0:	f7ff ffe8 	bl	23fbca4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23fbcd4:	b003      	add	sp, #12
 23fbcd6:	f85d fb04 	ldr.w	pc, [sp], #4
 23fbcda:	bf00      	nop
 23fbcdc:	023ffe48 	.word	0x023ffe48

023fbce0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23fbce0:	4b01      	ldr	r3, [pc, #4]	; (23fbce8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23fbce2:	4a02      	ldr	r2, [pc, #8]	; (23fbcec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23fbce4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23fbce6:	4770      	bx	lr
 23fbce8:	1007ae98 	.word	0x1007ae98
 23fbcec:	023ffe54 	.word	0x023ffe54

023fbcf0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23fbcf0:	2300      	movs	r3, #0
 23fbcf2:	6840      	ldr	r0, [r0, #4]
 23fbcf4:	461a      	mov	r2, r3
 23fbcf6:	f7ff bdc9 	b.w	23fb88c <network_connect>

023fbcfa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23fbcfa:	2200      	movs	r2, #0
 23fbcfc:	2102      	movs	r1, #2
 23fbcfe:	6840      	ldr	r0, [r0, #4]
 23fbd00:	f7ff bde0 	b.w	23fb8c4 <network_disconnect>

023fbd04 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fbd04:	2200      	movs	r2, #0
 23fbd06:	6840      	ldr	r0, [r0, #4]
 23fbd08:	4611      	mov	r1, r2
 23fbd0a:	f7ff bdcd 	b.w	23fb8a8 <network_connecting>

023fbd0e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fbd0e:	2200      	movs	r2, #0
 23fbd10:	6840      	ldr	r0, [r0, #4]
 23fbd12:	4611      	mov	r1, r2
 23fbd14:	f7ff bde4 	b.w	23fb8e0 <network_ready>

023fbd18 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fbd18:	2300      	movs	r3, #0
 23fbd1a:	6840      	ldr	r0, [r0, #4]
 23fbd1c:	461a      	mov	r2, r3
 23fbd1e:	4619      	mov	r1, r3
 23fbd20:	f7ff bdec 	b.w	23fb8fc <network_on>

023fbd24 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fbd24:	2300      	movs	r3, #0
 23fbd26:	6840      	ldr	r0, [r0, #4]
 23fbd28:	461a      	mov	r2, r3
 23fbd2a:	4619      	mov	r1, r3
 23fbd2c:	f7ff bdf4 	b.w	23fb918 <network_off>

023fbd30 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fbd30:	2100      	movs	r1, #0
 23fbd32:	6840      	ldr	r0, [r0, #4]
 23fbd34:	f7ff be36 	b.w	23fb9a4 <network_is_on>

023fbd38 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fbd38:	2100      	movs	r1, #0
 23fbd3a:	6840      	ldr	r0, [r0, #4]
 23fbd3c:	f7ff be40 	b.w	23fb9c0 <network_is_off>

023fbd40 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fbd40:	2200      	movs	r2, #0
 23fbd42:	6840      	ldr	r0, [r0, #4]
 23fbd44:	f081 0101 	eor.w	r1, r1, #1
 23fbd48:	f7ff bdf4 	b.w	23fb934 <network_listen>

023fbd4c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fbd4c:	2200      	movs	r2, #0
 23fbd4e:	6840      	ldr	r0, [r0, #4]
 23fbd50:	f7ff be0c 	b.w	23fb96c <network_set_listen_timeout>

023fbd54 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fbd54:	2200      	movs	r2, #0
 23fbd56:	6840      	ldr	r0, [r0, #4]
 23fbd58:	4611      	mov	r1, r2
 23fbd5a:	f7ff be15 	b.w	23fb988 <network_get_listen_timeout>

023fbd5e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fbd5e:	2200      	movs	r2, #0
 23fbd60:	6840      	ldr	r0, [r0, #4]
 23fbd62:	4611      	mov	r1, r2
 23fbd64:	f7ff bdf4 	b.w	23fb950 <network_listening>

023fbd68 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fbd68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fbd6c:	b095      	sub	sp, #84	; 0x54
 23fbd6e:	4614      	mov	r4, r2
 23fbd70:	460d      	mov	r5, r1
 23fbd72:	4607      	mov	r7, r0
    IPAddress addr;
 23fbd74:	f7ff ff76 	bl	23fbc64 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fbd78:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fbd7a:	221c      	movs	r2, #28
 23fbd7c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fbd7e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fbd80:	f000 fdd3 	bl	23fc92a <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fbd84:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fbd86:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fbd88:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fbd8a:	2100      	movs	r1, #0
 23fbd8c:	466b      	mov	r3, sp
 23fbd8e:	aa0c      	add	r2, sp, #48	; 0x30
 23fbd90:	f7ff fbd8 	bl	23fb544 <netdb_getaddrinfo>
    if (!r) {
 23fbd94:	4604      	mov	r4, r0
 23fbd96:	2800      	cmp	r0, #0
 23fbd98:	d14b      	bne.n	23fbe32 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fbd9a:	4602      	mov	r2, r0
 23fbd9c:	2101      	movs	r1, #1
 23fbd9e:	6868      	ldr	r0, [r5, #4]
 23fbda0:	f7ff fd9e 	bl	23fb8e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fbda4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fbda6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fbda8:	4622      	mov	r2, r4
 23fbdaa:	6868      	ldr	r0, [r5, #4]
 23fbdac:	f7ff fd98 	bl	23fb8e0 <network_ready>
        bool ok = false;
 23fbdb0:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fbdb2:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fbdb4:	9e00      	ldr	r6, [sp, #0]
 23fbdb6:	2e00      	cmp	r6, #0
 23fbdb8:	d03b      	beq.n	23fbe32 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fbdba:	2900      	cmp	r1, #0
 23fbdbc:	d139      	bne.n	23fbe32 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fbdbe:	6873      	ldr	r3, [r6, #4]
 23fbdc0:	2b02      	cmp	r3, #2
 23fbdc2:	d003      	beq.n	23fbdcc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fbdc4:	2b0a      	cmp	r3, #10
 23fbdc6:	d011      	beq.n	23fbdec <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fbdc8:	69f6      	ldr	r6, [r6, #28]
 23fbdca:	e7f4      	b.n	23fbdb6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fbdcc:	f1b8 0f00 	cmp.w	r8, #0
 23fbdd0:	d0fa      	beq.n	23fbdc8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fbdd2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fbdd4:	a806      	add	r0, sp, #24
 23fbdd6:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fbdd8:	1d3c      	adds	r4, r7, #4
 23fbdda:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fbddc:	f7ff ff70 	bl	23fbcc0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fbde0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fbde2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fbde4:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fbde6:	4641      	mov	r1, r8
 23fbde8:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fbdea:	e7ed      	b.n	23fbdc8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fbdec:	f1b9 0f00 	cmp.w	r9, #0
 23fbdf0:	d0ea      	beq.n	23fbdc8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23fbdf2:	2210      	movs	r2, #16
 23fbdf4:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23fbdf6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23fbdf8:	f000 fd97 	bl	23fc92a <memset>
                    a.v = 6;
 23fbdfc:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fbdfe:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23fbe00:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23fbe04:	f104 0308 	add.w	r3, r4, #8
 23fbe08:	3418      	adds	r4, #24
 23fbe0a:	462a      	mov	r2, r5
 23fbe0c:	6818      	ldr	r0, [r3, #0]
 23fbe0e:	6859      	ldr	r1, [r3, #4]
 23fbe10:	3308      	adds	r3, #8
 23fbe12:	c203      	stmia	r2!, {r0, r1}
 23fbe14:	42a3      	cmp	r3, r4
 23fbe16:	4615      	mov	r5, r2
 23fbe18:	d1f7      	bne.n	23fbe0a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23fbe1a:	a901      	add	r1, sp, #4
 23fbe1c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23fbe1e:	1d3c      	adds	r4, r7, #4
 23fbe20:	ad07      	add	r5, sp, #28
 23fbe22:	f7ff ff2d 	bl	23fbc80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23fbe26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fbe28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fbe2a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fbe2c:	4649      	mov	r1, r9
 23fbe2e:	7023      	strb	r3, [r4, #0]
                    break;
 23fbe30:	e7ca      	b.n	23fbdc8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23fbe32:	9800      	ldr	r0, [sp, #0]
 23fbe34:	f7ff fb78 	bl	23fb528 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23fbe38:	4638      	mov	r0, r7
 23fbe3a:	b015      	add	sp, #84	; 0x54
 23fbe3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023fbe40 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23fbe40:	4b02      	ldr	r3, [pc, #8]	; (23fbe4c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23fbe42:	4a03      	ldr	r2, [pc, #12]	; (23fbe50 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23fbe44:	601a      	str	r2, [r3, #0]
 23fbe46:	2200      	movs	r2, #0
 23fbe48:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23fbe4a:	4770      	bx	lr
 23fbe4c:	1007ae9c 	.word	0x1007ae9c
 23fbe50:	023ffe60 	.word	0x023ffe60

023fbe54 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23fbe54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fbe56:	4606      	mov	r6, r0
 23fbe58:	460d      	mov	r5, r1
  size_t n = 0;
 23fbe5a:	2400      	movs	r4, #0
 23fbe5c:	188f      	adds	r7, r1, r2
  while (size--) {
 23fbe5e:	42bd      	cmp	r5, r7
 23fbe60:	d00c      	beq.n	23fbe7c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23fbe62:	6833      	ldr	r3, [r6, #0]
 23fbe64:	4630      	mov	r0, r6
 23fbe66:	689b      	ldr	r3, [r3, #8]
 23fbe68:	f815 1b01 	ldrb.w	r1, [r5], #1
 23fbe6c:	4798      	blx	r3
     if (chunk>=0)
 23fbe6e:	1e03      	subs	r3, r0, #0
 23fbe70:	db01      	blt.n	23fbe76 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23fbe72:	441c      	add	r4, r3
  while (size--) {
 23fbe74:	e7f3      	b.n	23fbe5e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23fbe76:	2c00      	cmp	r4, #0
 23fbe78:	bf08      	it	eq
 23fbe7a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23fbe7c:	4620      	mov	r0, r4
 23fbe7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fbe80 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23fbe80:	b513      	push	{r0, r1, r4, lr}
 23fbe82:	4604      	mov	r4, r0
    }
 23fbe84:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23fbe86:	b159      	cbz	r1, 23fbea0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23fbe88:	9101      	str	r1, [sp, #4]
 23fbe8a:	f7fd f9d1 	bl	23f9230 <strlen>
 23fbe8e:	4602      	mov	r2, r0
 23fbe90:	4620      	mov	r0, r4
 23fbe92:	6823      	ldr	r3, [r4, #0]
 23fbe94:	9901      	ldr	r1, [sp, #4]
 23fbe96:	68db      	ldr	r3, [r3, #12]
    }
 23fbe98:	b002      	add	sp, #8
 23fbe9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23fbe9e:	4718      	bx	r3
    }
 23fbea0:	b002      	add	sp, #8
 23fbea2:	bd10      	pop	{r4, pc}

023fbea4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
 23fbea4:	b508      	push	{r3, lr}
  return write(str);
 23fbea6:	f7ff ffeb 	bl	23fbe80 <_ZN5Print5writeEPKc>
}
 23fbeaa:	bd08      	pop	{r3, pc}

023fbeac <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
 23fbeac:	6803      	ldr	r3, [r0, #0]
 23fbeae:	689b      	ldr	r3, [r3, #8]
 23fbeb0:	4718      	bx	r3

023fbeb2 <_ZN5Print5printEPK19__FlashStringHelper>:
 23fbeb2:	b508      	push	{r3, lr}
 23fbeb4:	f7ff ffe4 	bl	23fbe80 <_ZN5Print5writeEPKc>
 23fbeb8:	bd08      	pop	{r3, pc}

023fbeba <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 23fbeba:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 23fbebc:	210d      	movs	r1, #13
{
 23fbebe:	4605      	mov	r5, r0
  size_t n = print('\r');
 23fbec0:	f7ff fff4 	bl	23fbeac <_ZN5Print5printEc>
  n += print('\n');
 23fbec4:	210a      	movs	r1, #10
  size_t n = print('\r');
 23fbec6:	4604      	mov	r4, r0
  n += print('\n');
 23fbec8:	4628      	mov	r0, r5
 23fbeca:	f7ff ffef 	bl	23fbeac <_ZN5Print5printEc>
  return n;
}
 23fbece:	4420      	add	r0, r4
 23fbed0:	bd38      	pop	{r3, r4, r5, pc}

023fbed2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 23fbed2:	b538      	push	{r3, r4, r5, lr}
 23fbed4:	4605      	mov	r5, r0
  return write(str);
 23fbed6:	f7ff ffd3 	bl	23fbe80 <_ZN5Print5writeEPKc>
 23fbeda:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
 23fbedc:	4628      	mov	r0, r5
 23fbede:	f7ff ffec 	bl	23fbeba <_ZN5Print7printlnEv>
  return n;
}
 23fbee2:	4420      	add	r0, r4
 23fbee4:	bd38      	pop	{r3, r4, r5, pc}

023fbee6 <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
 23fbee6:	f7ff bff4 	b.w	23fbed2 <_ZN5Print7printlnEPKc>

023fbeea <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23fbeea:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23fbeec:	2a01      	cmp	r2, #1
 23fbeee:	bf98      	it	ls
 23fbef0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23fbef2:	b530      	push	{r4, r5, lr}
 23fbef4:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23fbef6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23fbefa:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23fbefc:	460d      	mov	r5, r1
 23fbefe:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23fbf02:	fb01 5312 	mls	r3, r1, r2, r5
 23fbf06:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fbf0a:	2b09      	cmp	r3, #9
 23fbf0c:	bf94      	ite	ls
 23fbf0e:	3330      	addls	r3, #48	; 0x30
 23fbf10:	3337      	addhi	r3, #55	; 0x37
 23fbf12:	b2db      	uxtb	r3, r3
  } while(n);
 23fbf14:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23fbf16:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23fbf1a:	d9ef      	bls.n	23fbefc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23fbf1c:	4621      	mov	r1, r4
 23fbf1e:	f7ff ffaf 	bl	23fbe80 <_ZN5Print5writeEPKc>
}
 23fbf22:	b00b      	add	sp, #44	; 0x2c
 23fbf24:	bd30      	pop	{r4, r5, pc}
	...

023fbf28 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 23fbf28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fbf2c:	ec55 4b10 	vmov	r4, r5, d0
 23fbf30:	4606      	mov	r6, r0
 23fbf32:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
 23fbf34:	ee10 2a10 	vmov	r2, s0
 23fbf38:	462b      	mov	r3, r5
 23fbf3a:	ee10 0a10 	vmov	r0, s0
 23fbf3e:	4629      	mov	r1, r5
 23fbf40:	f7fd f8c8 	bl	23f90d4 <__aeabi_dcmpun>
 23fbf44:	b140      	cbz	r0, 23fbf58 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
 23fbf46:	4953      	ldr	r1, [pc, #332]	; (23fc094 <_ZN5Print10printFloatEdh+0x16c>)
 23fbf48:	4630      	mov	r0, r6
 23fbf4a:	f7ff ff99 	bl	23fbe80 <_ZN5Print5writeEPKc>
 23fbf4e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
 23fbf50:	4650      	mov	r0, sl
 23fbf52:	b003      	add	sp, #12
 23fbf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
 23fbf58:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
 23fbf5c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fbf60:	4620      	mov	r0, r4
 23fbf62:	4649      	mov	r1, r9
 23fbf64:	4b4c      	ldr	r3, [pc, #304]	; (23fc098 <_ZN5Print10printFloatEdh+0x170>)
 23fbf66:	f7fd f8b5 	bl	23f90d4 <__aeabi_dcmpun>
 23fbf6a:	b948      	cbnz	r0, 23fbf80 <_ZN5Print10printFloatEdh+0x58>
 23fbf6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 23fbf70:	4620      	mov	r0, r4
 23fbf72:	4649      	mov	r1, r9
 23fbf74:	4b48      	ldr	r3, [pc, #288]	; (23fc098 <_ZN5Print10printFloatEdh+0x170>)
 23fbf76:	f7fd f88f 	bl	23f9098 <__aeabi_dcmple>
 23fbf7a:	b908      	cbnz	r0, 23fbf80 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
 23fbf7c:	4947      	ldr	r1, [pc, #284]	; (23fc09c <_ZN5Print10printFloatEdh+0x174>)
 23fbf7e:	e7e3      	b.n	23fbf48 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 23fbf80:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23fbf84:	4620      	mov	r0, r4
 23fbf86:	4629      	mov	r1, r5
 23fbf88:	4b45      	ldr	r3, [pc, #276]	; (23fc0a0 <_ZN5Print10printFloatEdh+0x178>)
 23fbf8a:	f7fd f899 	bl	23f90c0 <__aeabi_dcmpgt>
 23fbf8e:	b108      	cbz	r0, 23fbf94 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
 23fbf90:	4944      	ldr	r1, [pc, #272]	; (23fc0a4 <_ZN5Print10printFloatEdh+0x17c>)
 23fbf92:	e7d9      	b.n	23fbf48 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 23fbf94:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 23fbf98:	4620      	mov	r0, r4
 23fbf9a:	4629      	mov	r1, r5
 23fbf9c:	4b42      	ldr	r3, [pc, #264]	; (23fc0a8 <_ZN5Print10printFloatEdh+0x180>)
 23fbf9e:	f7fd f871 	bl	23f9084 <__aeabi_dcmplt>
 23fbfa2:	2800      	cmp	r0, #0
 23fbfa4:	d1f4      	bne.n	23fbf90 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
 23fbfa6:	2200      	movs	r2, #0
 23fbfa8:	2300      	movs	r3, #0
 23fbfaa:	4620      	mov	r0, r4
 23fbfac:	4629      	mov	r1, r5
 23fbfae:	f7fd f869 	bl	23f9084 <__aeabi_dcmplt>
 23fbfb2:	b1d0      	cbz	r0, 23fbfea <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
 23fbfb4:	212d      	movs	r1, #45	; 0x2d
 23fbfb6:	4630      	mov	r0, r6
 23fbfb8:	f7ff ff78 	bl	23fbeac <_ZN5Print5printEc>
     number = -number;
 23fbfbc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
 23fbfc0:	4682      	mov	sl, r0
     number = -number;
 23fbfc2:	461d      	mov	r5, r3
  size_t n = 0;
 23fbfc4:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
 23fbfc8:	2000      	movs	r0, #0
    rounding /= 10.0;
 23fbfca:	f04f 0800 	mov.w	r8, #0
  double rounding = 0.5;
 23fbfce:	4937      	ldr	r1, [pc, #220]	; (23fc0ac <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
 23fbfd0:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 23fc0b4 <_ZN5Print10printFloatEdh+0x18c>
  for (uint8_t i=0; i<digits; ++i)
 23fbfd4:	fa5f f38b 	uxtb.w	r3, fp
 23fbfd8:	429f      	cmp	r7, r3
 23fbfda:	d908      	bls.n	23fbfee <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
 23fbfdc:	4642      	mov	r2, r8
 23fbfde:	464b      	mov	r3, r9
 23fbfe0:	f7fc ff08 	bl	23f8df4 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
 23fbfe4:	f10b 0b01 	add.w	fp, fp, #1
 23fbfe8:	e7f4      	b.n	23fbfd4 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
 23fbfea:	4682      	mov	sl, r0
 23fbfec:	e7ea      	b.n	23fbfc4 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
 23fbfee:	4622      	mov	r2, r4
 23fbff0:	462b      	mov	r3, r5
 23fbff2:	f7fc fc1f 	bl	23f8834 <__adddf3>
 23fbff6:	460d      	mov	r5, r1
 23fbff8:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
 23fbffa:	f7fd f8a9 	bl	23f9150 <__aeabi_d2uiz>
 23fbffe:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
 23fc000:	f7fc fd54 	bl	23f8aac <__aeabi_ui2d>
 23fc004:	4602      	mov	r2, r0
 23fc006:	460b      	mov	r3, r1
 23fc008:	4620      	mov	r0, r4
 23fc00a:	4629      	mov	r1, r5
 23fc00c:	f7fc fc10 	bl	23f8830 <__aeabi_dsub>
        return printNumber(val, base) + t;
 23fc010:	220a      	movs	r2, #10
 23fc012:	4604      	mov	r4, r0
 23fc014:	460d      	mov	r5, r1
 23fc016:	4630      	mov	r0, r6
 23fc018:	4641      	mov	r1, r8
 23fc01a:	f7ff ff66 	bl	23fbeea <_ZN5Print11printNumberEmh>
  n += print(int_part);
 23fc01e:	4482      	add	sl, r0
  if (digits > 0) {
 23fc020:	2f00      	cmp	r7, #0
 23fc022:	d095      	beq.n	23fbf50 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
 23fc024:	4630      	mov	r0, r6
 23fc026:	4922      	ldr	r1, [pc, #136]	; (23fc0b0 <_ZN5Print10printFloatEdh+0x188>)
 23fc028:	f7ff ff2a 	bl	23fbe80 <_ZN5Print5writeEPKc>
    remainder *= 10.0;
 23fc02c:	f04f 0800 	mov.w	r8, #0
 23fc030:	f8df 9080 	ldr.w	r9, [pc, #128]	; 23fc0b4 <_ZN5Print10printFloatEdh+0x18c>
    n += print(".");
 23fc034:	4482      	add	sl, r0
  while (digits-- > 0)
 23fc036:	2f00      	cmp	r7, #0
 23fc038:	d08a      	beq.n	23fbf50 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
 23fc03a:	4642      	mov	r2, r8
 23fc03c:	464b      	mov	r3, r9
 23fc03e:	4620      	mov	r0, r4
 23fc040:	4629      	mov	r1, r5
 23fc042:	f7fc fdad 	bl	23f8ba0 <__aeabi_dmul>
 23fc046:	4604      	mov	r4, r0
 23fc048:	460d      	mov	r5, r1
    int toPrint = int(remainder);
 23fc04a:	f7fd f859 	bl	23f9100 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
 23fc04e:	f1b0 0b00 	subs.w	fp, r0, #0
 23fc052:	da1c      	bge.n	23fc08e <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
 23fc054:	212d      	movs	r1, #45	; 0x2d
 23fc056:	4630      	mov	r0, r6
 23fc058:	f7ff ff28 	bl	23fbeac <_ZN5Print5printEc>
 23fc05c:	4603      	mov	r3, r0
            val = -n;
 23fc05e:	f1cb 0100 	rsb	r1, fp, #0
        return printNumber(val, base) + t;
 23fc062:	220a      	movs	r2, #10
 23fc064:	4630      	mov	r0, r6
 23fc066:	9301      	str	r3, [sp, #4]
 23fc068:	f7ff ff3f 	bl	23fbeea <_ZN5Print11printNumberEmh>
 23fc06c:	9b01      	ldr	r3, [sp, #4]
 23fc06e:	3f01      	subs	r7, #1
 23fc070:	4418      	add	r0, r3
    n += print(toPrint);
 23fc072:	4482      	add	sl, r0
    remainder -= toPrint;
 23fc074:	4658      	mov	r0, fp
 23fc076:	f7fc fd29 	bl	23f8acc <__aeabi_i2d>
 23fc07a:	4602      	mov	r2, r0
 23fc07c:	460b      	mov	r3, r1
 23fc07e:	4620      	mov	r0, r4
 23fc080:	4629      	mov	r1, r5
 23fc082:	f7fc fbd5 	bl	23f8830 <__aeabi_dsub>
 23fc086:	b2ff      	uxtb	r7, r7
 23fc088:	4604      	mov	r4, r0
 23fc08a:	460d      	mov	r5, r1
  while (digits-- > 0)
 23fc08c:	e7d3      	b.n	23fc036 <_ZN5Print10printFloatEdh+0x10e>
            val = n;
 23fc08e:	4659      	mov	r1, fp
        size_t t = 0;
 23fc090:	2300      	movs	r3, #0
 23fc092:	e7e6      	b.n	23fc062 <_ZN5Print10printFloatEdh+0x13a>
 23fc094:	023ffe94 	.word	0x023ffe94
 23fc098:	7fefffff 	.word	0x7fefffff
 23fc09c:	023ffe98 	.word	0x023ffe98
 23fc0a0:	41efffff 	.word	0x41efffff
 23fc0a4:	023ffe9c 	.word	0x023ffe9c
 23fc0a8:	c1efffff 	.word	0xc1efffff
 23fc0ac:	3fe00000 	.word	0x3fe00000
 23fc0b0:	023fcb0b 	.word	0x023fcb0b
 23fc0b4:	40240000 	.word	0x40240000

023fc0b8 <_ZN5Print5printEfi>:
{
 23fc0b8:	b538      	push	{r3, r4, r5, lr}
 23fc0ba:	4604      	mov	r4, r0
 23fc0bc:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
 23fc0c0:	b2cd      	uxtb	r5, r1
 23fc0c2:	f7fc fd15 	bl	23f8af0 <__aeabi_f2d>
 23fc0c6:	ec41 0b10 	vmov	d0, r0, r1
 23fc0ca:	4629      	mov	r1, r5
 23fc0cc:	4620      	mov	r0, r4
}
 23fc0ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
 23fc0d2:	f7ff bf29 	b.w	23fbf28 <_ZN5Print10printFloatEdh>

023fc0d6 <_ZN5Print7printlnEdi>:
{
 23fc0d6:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
 23fc0d8:	b2c9      	uxtb	r1, r1
{
 23fc0da:	4605      	mov	r5, r0
  return printFloat(n, digits);
 23fc0dc:	f7ff ff24 	bl	23fbf28 <_ZN5Print10printFloatEdh>
 23fc0e0:	4604      	mov	r4, r0
  n += println();
 23fc0e2:	4628      	mov	r0, r5
 23fc0e4:	f7ff fee9 	bl	23fbeba <_ZN5Print7printlnEv>
}
 23fc0e8:	4420      	add	r0, r4
 23fc0ea:	bd38      	pop	{r3, r4, r5, pc}

023fc0ec <_ZN5Print7printlnEfi>:
{
 23fc0ec:	b538      	push	{r3, r4, r5, lr}
 23fc0ee:	4604      	mov	r4, r0
 23fc0f0:	ee10 0a10 	vmov	r0, s0
 23fc0f4:	460d      	mov	r5, r1
    return println((double)num, digits);
 23fc0f6:	f7fc fcfb 	bl	23f8af0 <__aeabi_f2d>
 23fc0fa:	ec41 0b10 	vmov	d0, r0, r1
 23fc0fe:	4629      	mov	r1, r5
 23fc100:	4620      	mov	r0, r4
}
 23fc102:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
 23fc106:	f7ff bfe6 	b.w	23fc0d6 <_ZN5Print7printlnEdi>
	...

023fc10c <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 23fc10c:	2200      	movs	r2, #0
 23fc10e:	4b01      	ldr	r3, [pc, #4]	; (23fc114 <_GLOBAL__sub_I_RGB+0x8>)
 23fc110:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23fc112:	4770      	bx	lr
 23fc114:	1007aea4 	.word	0x1007aea4

023fc118 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
 23fc118:	2100      	movs	r1, #0
 23fc11a:	f7ff ba83 	b.w	23fb624 <hal_spi_release>

023fc11e <_ZN8SPIClass4lockEv.isra.0>:
    return hal_spi_acquire(_spi, nullptr);
 23fc11e:	2100      	movs	r1, #0
 23fc120:	f7ff ba72 	b.w	23fb608 <hal_spi_acquire>

023fc124 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23fc124:	b510      	push	{r4, lr}
 23fc126:	4604      	mov	r4, r0
 23fc128:	4608      	mov	r0, r1
{
    _spi = spi;
 23fc12a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23fc12c:	f7ff fa34 	bl	23fb598 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fc130:	2300      	movs	r3, #0
}
 23fc132:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23fc134:	6063      	str	r3, [r4, #4]
}
 23fc136:	bd10      	pop	{r4, pc}

023fc138 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
 23fc138:	b513      	push	{r0, r1, r4, lr}
 23fc13a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
 23fc13c:	7800      	ldrb	r0, [r0, #0]
 23fc13e:	f7ff ffee 	bl	23fc11e <_ZN8SPIClass4lockEv.isra.0>
 23fc142:	b958      	cbnz	r0, 23fc15c <_ZN8SPIClass5beginEv+0x24>
 23fc144:	7820      	ldrb	r0, [r4, #0]
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
 23fc146:	f64f 71ff 	movw	r1, #65535	; 0xffff
 23fc14a:	9001      	str	r0, [sp, #4]
 23fc14c:	f7ff fa08 	bl	23fb560 <hal_spi_begin>
        unlock();
 23fc150:	9801      	ldr	r0, [sp, #4]
    }
}
 23fc152:	b002      	add	sp, #8
 23fc154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 23fc158:	f7ff bfde 	b.w	23fc118 <_ZN8SPIClass6unlockEv.isra.0>
 23fc15c:	b002      	add	sp, #8
 23fc15e:	bd10      	pop	{r4, pc}

023fc160 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
 23fc160:	7800      	ldrb	r0, [r0, #0]
 23fc162:	f7ff bfd9 	b.w	23fc118 <_ZN8SPIClass6unlockEv.isra.0>
	...

023fc168 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
 23fc168:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
 23fc16a:	2400      	movs	r4, #0
 23fc16c:	0840      	lsrs	r0, r0, #1
 23fc16e:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fc170:	6818      	ldr	r0, [r3, #0]
 23fc172:	b2e5      	uxtb	r5, r4
 23fc174:	4288      	cmp	r0, r1
 23fc176:	d906      	bls.n	23fc186 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 23fc178:	3401      	adds	r4, #1
 23fc17a:	2c08      	cmp	r4, #8
 23fc17c:	d002      	beq.n	23fc184 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
 23fc17e:	0840      	lsrs	r0, r0, #1
 23fc180:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
 23fc182:	e7f5      	b.n	23fc170 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 23fc184:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
 23fc186:	4b02      	ldr	r3, [pc, #8]	; (23fc190 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 23fc188:	5d5b      	ldrb	r3, [r3, r5]
 23fc18a:	7013      	strb	r3, [r2, #0]
}
 23fc18c:	bd30      	pop	{r4, r5, pc}
 23fc18e:	bf00      	nop
 23fc190:	023ffea0 	.word	0x023ffea0

023fc194 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
 23fc194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fc198:	4606      	mov	r6, r0
 23fc19a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
 23fc19c:	7800      	ldrb	r0, [r0, #0]
{
 23fc19e:	460c      	mov	r4, r1
    CHECK(lock());
 23fc1a0:	f7ff ffbd 	bl	23fc11e <_ZN8SPIClass4lockEv.isra.0>
 23fc1a4:	2800      	cmp	r0, #0
 23fc1a6:	db1b      	blt.n	23fc1e0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    memset(info, 0, sizeof(hal_spi_info_t));
 23fc1a8:	2214      	movs	r2, #20
 23fc1aa:	2100      	movs	r1, #0
 23fc1ac:	a809      	add	r0, sp, #36	; 0x24
    querySpiInfo(_spi, &spi_info);
 23fc1ae:	7835      	ldrb	r5, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
 23fc1b0:	f000 fbbb 	bl	23fc92a <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
 23fc1b4:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
 23fc1b6:	2200      	movs	r2, #0
 23fc1b8:	4628      	mov	r0, r5
 23fc1ba:	a909      	add	r1, sp, #36	; 0x24
    info->version = HAL_SPI_INFO_VERSION_1;
 23fc1bc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
 23fc1c0:	f7ff fa06 	bl	23fb5d0 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
 23fc1c4:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
 23fc1c8:	b113      	cbz	r3, 23fc1d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
 23fc1ca:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 23fc1ce:	b155      	cbz	r5, 23fc1e6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
 23fc1d0:	2700      	movs	r7, #0
 23fc1d2:	2501      	movs	r5, #1
 23fc1d4:	46b9      	mov	r9, r7
 23fc1d6:	46b8      	mov	r8, r7
    if (default_ && other.default_)
 23fc1d8:	7923      	ldrb	r3, [r4, #4]
 23fc1da:	b15d      	cbz	r5, 23fc1f4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
 23fc1dc:	b1c3      	cbz	r3, 23fc210 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
 23fc1de:	2000      	movs	r0, #0
}
 23fc1e0:	b00f      	add	sp, #60	; 0x3c
 23fc1e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
 23fc1e6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 23fc1ea:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 23fc1ee:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
 23fc1f2:	e7f1      	b.n	23fc1d8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
 23fc1f4:	2b00      	cmp	r3, #0
 23fc1f6:	d135      	bne.n	23fc264 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
 23fc1f8:	68a3      	ldr	r3, [r4, #8]
 23fc1fa:	4543      	cmp	r3, r8
 23fc1fc:	d108      	bne.n	23fc210 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
 23fc1fe:	f88d 9020 	strb.w	r9, [sp, #32]
 23fc202:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fc206:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fc20a:	89a3      	ldrh	r3, [r4, #12]
 23fc20c:	429a      	cmp	r2, r3
 23fc20e:	d0e6      	beq.n	23fc1de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
 23fc210:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fc212:	68a1      	ldr	r1, [r4, #8]
            uint8_t divisor = 0;
 23fc214:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
 23fc218:	980a      	ldr	r0, [sp, #40]	; 0x28
 23fc21a:	ab04      	add	r3, sp, #16
 23fc21c:	f10d 020f 	add.w	r2, sp, #15
 23fc220:	f7ff ffa2 	bl	23fc168 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
 23fc224:	7921      	ldrb	r1, [r4, #4]
 23fc226:	b985      	cbnz	r5, 23fc24a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
 23fc228:	b989      	cbnz	r1, 23fc24e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fc22a:	68a3      	ldr	r3, [r4, #8]
 23fc22c:	4543      	cmp	r3, r8
 23fc22e:	d30e      	bcc.n	23fc24e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
 23fc230:	f88d 9020 	strb.w	r9, [sp, #32]
 23fc234:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
 23fc238:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 23fc23c:	89a3      	ldrh	r3, [r4, #12]
 23fc23e:	429a      	cmp	r2, r3
 23fc240:	d105      	bne.n	23fc24e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
 23fc242:	9b04      	ldr	r3, [sp, #16]
 23fc244:	4543      	cmp	r3, r8
 23fc246:	d102      	bne.n	23fc24e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
 23fc248:	e7c9      	b.n	23fc1de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
 23fc24a:	2900      	cmp	r1, #0
 23fc24c:	d1f9      	bne.n	23fc242 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
 23fc24e:	2300      	movs	r3, #0
 23fc250:	9301      	str	r3, [sp, #4]
 23fc252:	7b63      	ldrb	r3, [r4, #13]
 23fc254:	f89d 200f 	ldrb.w	r2, [sp, #15]
 23fc258:	9300      	str	r3, [sp, #0]
 23fc25a:	7b23      	ldrb	r3, [r4, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
 23fc25c:	7830      	ldrb	r0, [r6, #0]
 23fc25e:	f7ff f9c5 	bl	23fb5ec <hal_spi_set_settings>
 23fc262:	e7bc      	b.n	23fc1de <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
 23fc264:	462b      	mov	r3, r5
 23fc266:	462a      	mov	r2, r5
 23fc268:	2101      	movs	r1, #1
 23fc26a:	e9cd 5500 	strd	r5, r5, [sp]
 23fc26e:	e7f5      	b.n	23fc25c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

023fc270 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
 23fc270:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
 23fc272:	7800      	ldrb	r0, [r0, #0]
 23fc274:	f7ff f982 	bl	23fb57c <hal_spi_transfer>
}
 23fc278:	b2c0      	uxtb	r0, r0
 23fc27a:	bd08      	pop	{r3, pc}

023fc27c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fc27c:	2202      	movs	r2, #2

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
 23fc27e:	2000      	movs	r0, #0
 23fc280:	4b04      	ldr	r3, [pc, #16]	; (23fc294 <_GLOBAL__sub_I_System+0x18>)
 23fc282:	601a      	str	r2, [r3, #0]
 23fc284:	4b04      	ldr	r3, [pc, #16]	; (23fc298 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23fc286:	4a05      	ldr	r2, [pc, #20]	; (23fc29c <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23fc288:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23fc28c:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fc28e:	f7ff bab7 	b.w	23fb800 <set_system_mode>
 23fc292:	bf00      	nop
 23fc294:	1007aec0 	.word	0x1007aec0
 23fc298:	1007aeb4 	.word	0x1007aeb4
 23fc29c:	ffff0000 	.word	0xffff0000

023fc2a0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23fc2a0:	4b02      	ldr	r3, [pc, #8]	; (23fc2ac <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23fc2a2:	681a      	ldr	r2, [r3, #0]
 23fc2a4:	4b02      	ldr	r3, [pc, #8]	; (23fc2b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23fc2a6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23fc2a8:	4770      	bx	lr
 23fc2aa:	bf00      	nop
 23fc2ac:	1007ad68 	.word	0x1007ad68
 23fc2b0:	1007aec4 	.word	0x1007aec4

023fc2b4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23fc2b4:	4770      	bx	lr

023fc2b6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fc2b6:	7441      	strb	r1, [r0, #17]
}
 23fc2b8:	4770      	bx	lr

023fc2ba <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23fc2ba:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23fc2bc:	7c00      	ldrb	r0, [r0, #16]
 23fc2be:	f7ff fa13 	bl	23fb6e8 <hal_usart_available_data_for_write>
}
 23fc2c2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc2c6:	bd08      	pop	{r3, pc}

023fc2c8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23fc2c8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23fc2ca:	7c00      	ldrb	r0, [r0, #16]
 23fc2cc:	f7ff f9c6 	bl	23fb65c <hal_usart_available>
}
 23fc2d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc2d4:	bd08      	pop	{r3, pc}

023fc2d6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23fc2d6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23fc2d8:	7c00      	ldrb	r0, [r0, #16]
 23fc2da:	f7ff f9db 	bl	23fb694 <hal_usart_peek>
}
 23fc2de:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc2e2:	bd08      	pop	{r3, pc}

023fc2e4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23fc2e4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23fc2e6:	7c00      	ldrb	r0, [r0, #16]
 23fc2e8:	f7ff f9c6 	bl	23fb678 <hal_usart_read>
}
 23fc2ec:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc2f0:	bd08      	pop	{r3, pc}

023fc2f2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23fc2f2:	7c00      	ldrb	r0, [r0, #16]
 23fc2f4:	f7ff b9dc 	b.w	23fb6b0 <hal_usart_flush>

023fc2f8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23fc2f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fc2fa:	7c45      	ldrb	r5, [r0, #17]
{
 23fc2fc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fc2fe:	b12d      	cbz	r5, 23fc30c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23fc300:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23fc302:	b003      	add	sp, #12
 23fc304:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23fc308:	f7ff b99a 	b.w	23fb640 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23fc30c:	7c00      	ldrb	r0, [r0, #16]
 23fc30e:	9101      	str	r1, [sp, #4]
 23fc310:	f7ff f9ea 	bl	23fb6e8 <hal_usart_available_data_for_write>
 23fc314:	2800      	cmp	r0, #0
 23fc316:	9901      	ldr	r1, [sp, #4]
 23fc318:	dcf2      	bgt.n	23fc300 <_ZN11USARTSerial5writeEh+0x8>
}
 23fc31a:	4628      	mov	r0, r5
 23fc31c:	b003      	add	sp, #12
 23fc31e:	bd30      	pop	{r4, r5, pc}

023fc320 <_ZN11USARTSerialD0Ev>:
 23fc320:	b510      	push	{r4, lr}
 23fc322:	4604      	mov	r4, r0
 23fc324:	2114      	movs	r1, #20
 23fc326:	f7fc ffaa 	bl	23f927e <_ZdlPvj>
 23fc32a:	4620      	mov	r0, r4
 23fc32c:	bd10      	pop	{r4, pc}
	...

023fc330 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fc330:	b510      	push	{r4, lr}
 23fc332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc336:	4604      	mov	r4, r0
 23fc338:	4608      	mov	r0, r1
 23fc33a:	4611      	mov	r1, r2
 23fc33c:	2200      	movs	r2, #0
 23fc33e:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fc342:	4b04      	ldr	r3, [pc, #16]	; (23fc354 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23fc344:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23fc346:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fc348:	2301      	movs	r3, #1
 23fc34a:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23fc34c:	f7ff f9da 	bl	23fb704 <hal_usart_init_ex>
}
 23fc350:	4620      	mov	r0, r4
 23fc352:	bd10      	pop	{r4, pc}
 23fc354:	023ffecc 	.word	0x023ffecc

023fc358 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23fc358:	7c00      	ldrb	r0, [r0, #16]
 23fc35a:	f7ff b9b7 	b.w	23fb6cc <hal_usart_is_enabled>

023fc35e <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23fc35e:	7441      	strb	r1, [r0, #17]
}
 23fc360:	4770      	bx	lr

023fc362 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fc362:	4770      	bx	lr

023fc364 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23fc364:	4770      	bx	lr

023fc366 <_ZN9USBSerial4readEv>:
{
 23fc366:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23fc368:	2100      	movs	r1, #0
 23fc36a:	7c00      	ldrb	r0, [r0, #16]
 23fc36c:	f7ff fa10 	bl	23fb790 <HAL_USB_USART_Receive_Data>
}
 23fc370:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc374:	bd08      	pop	{r3, pc}

023fc376 <_ZN9USBSerial4peekEv>:
{
 23fc376:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23fc378:	2101      	movs	r1, #1
 23fc37a:	7c00      	ldrb	r0, [r0, #16]
 23fc37c:	f7ff fa08 	bl	23fb790 <HAL_USB_USART_Receive_Data>
}
 23fc380:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23fc384:	bd08      	pop	{r3, pc}

023fc386 <_ZN9USBSerial17availableForWriteEv>:
{
 23fc386:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23fc388:	7c00      	ldrb	r0, [r0, #16]
 23fc38a:	f7ff f9f3 	bl	23fb774 <HAL_USB_USART_Available_Data_For_Write>
}
 23fc38e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc392:	bd08      	pop	{r3, pc}

023fc394 <_ZN9USBSerial9availableEv>:
{
 23fc394:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23fc396:	7c00      	ldrb	r0, [r0, #16]
 23fc398:	f7ff f9de 	bl	23fb758 <HAL_USB_USART_Available_Data>
}
 23fc39c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23fc3a0:	bd08      	pop	{r3, pc}

023fc3a2 <_ZN9USBSerial5writeEh>:
{
 23fc3a2:	b513      	push	{r0, r1, r4, lr}
 23fc3a4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fc3a6:	7c00      	ldrb	r0, [r0, #16]
{
 23fc3a8:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23fc3aa:	f7ff f9e3 	bl	23fb774 <HAL_USB_USART_Available_Data_For_Write>
 23fc3ae:	2800      	cmp	r0, #0
 23fc3b0:	9901      	ldr	r1, [sp, #4]
 23fc3b2:	dc01      	bgt.n	23fc3b8 <_ZN9USBSerial5writeEh+0x16>
 23fc3b4:	7c60      	ldrb	r0, [r4, #17]
 23fc3b6:	b120      	cbz	r0, 23fc3c2 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23fc3b8:	7c20      	ldrb	r0, [r4, #16]
 23fc3ba:	f7ff f9f7 	bl	23fb7ac <HAL_USB_USART_Send_Data>
 23fc3be:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23fc3c2:	b002      	add	sp, #8
 23fc3c4:	bd10      	pop	{r4, pc}

023fc3c6 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23fc3c6:	7c00      	ldrb	r0, [r0, #16]
 23fc3c8:	f7ff b9fe 	b.w	23fb7c8 <HAL_USB_USART_Flush_Data>

023fc3cc <_ZN9USBSerialD0Ev>:
 23fc3cc:	b510      	push	{r4, lr}
 23fc3ce:	4604      	mov	r4, r0
 23fc3d0:	2114      	movs	r1, #20
 23fc3d2:	f7fc ff54 	bl	23f927e <_ZdlPvj>
 23fc3d6:	4620      	mov	r0, r4
 23fc3d8:	bd10      	pop	{r4, pc}
	...

023fc3dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fc3dc:	b510      	push	{r4, lr}
 23fc3de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fc3e2:	4604      	mov	r4, r0
 23fc3e4:	4608      	mov	r0, r1
 23fc3e6:	2100      	movs	r1, #0
 23fc3e8:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23fc3ec:	4b04      	ldr	r3, [pc, #16]	; (23fc400 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23fc3ee:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23fc3f0:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23fc3f2:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23fc3f4:	4611      	mov	r1, r2
  _blocking = true;
 23fc3f6:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23fc3f8:	f7ff f992 	bl	23fb720 <HAL_USB_USART_Init>
}
 23fc3fc:	4620      	mov	r0, r4
 23fc3fe:	bd10      	pop	{r4, pc}
 23fc400:	023ffefc 	.word	0x023ffefc

023fc404 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
 23fc404:	2200      	movs	r2, #0
 23fc406:	7c00      	ldrb	r0, [r0, #16]
 23fc408:	f7ff b998 	b.w	23fb73c <HAL_USB_USART_Begin>

023fc40c <_Z19acquireSerialBufferv>:
{
 23fc40c:	b510      	push	{r4, lr}
 23fc40e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23fc410:	2214      	movs	r2, #20
 23fc412:	2100      	movs	r1, #0
 23fc414:	f000 fa89 	bl	23fc92a <memset>
}
 23fc418:	4620      	mov	r0, r4
 23fc41a:	bd10      	pop	{r4, pc}

023fc41c <_Z16_fetch_usbserialv>:
{
 23fc41c:	b510      	push	{r4, lr}
 23fc41e:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23fc420:	a803      	add	r0, sp, #12
 23fc422:	f7ff fff3 	bl	23fc40c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23fc426:	4c0c      	ldr	r4, [pc, #48]	; (23fc458 <_Z16_fetch_usbserialv+0x3c>)
 23fc428:	e8d4 1f8f 	ldab	r1, [r4]
 23fc42c:	f011 0101 	ands.w	r1, r1, #1
 23fc430:	d10f      	bne.n	23fc452 <_Z16_fetch_usbserialv+0x36>
 23fc432:	4620      	mov	r0, r4
 23fc434:	9101      	str	r1, [sp, #4]
 23fc436:	f7fc ff31 	bl	23f929c <__cxa_guard_acquire>
 23fc43a:	9901      	ldr	r1, [sp, #4]
 23fc43c:	b148      	cbz	r0, 23fc452 <_Z16_fetch_usbserialv+0x36>
 23fc43e:	aa03      	add	r2, sp, #12
 23fc440:	4806      	ldr	r0, [pc, #24]	; (23fc45c <_Z16_fetch_usbserialv+0x40>)
 23fc442:	f7ff ffcb 	bl	23fc3dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23fc446:	4620      	mov	r0, r4
 23fc448:	f7fc ff2d 	bl	23f92a6 <__cxa_guard_release>
 23fc44c:	4804      	ldr	r0, [pc, #16]	; (23fc460 <_Z16_fetch_usbserialv+0x44>)
 23fc44e:	f000 fa59 	bl	23fc904 <atexit>
	return _usbserial;
}
 23fc452:	4802      	ldr	r0, [pc, #8]	; (23fc45c <_Z16_fetch_usbserialv+0x40>)
 23fc454:	b008      	add	sp, #32
 23fc456:	bd10      	pop	{r4, pc}
 23fc458:	1007aec8 	.word	0x1007aec8
 23fc45c:	1007aecc 	.word	0x1007aecc
 23fc460:	023fc363 	.word	0x023fc363

023fc464 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23fc464:	2200      	movs	r2, #0
 23fc466:	6840      	ldr	r0, [r0, #4]
 23fc468:	4611      	mov	r1, r2
 23fc46a:	f7ff ba39 	b.w	23fb8e0 <network_ready>

023fc46e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fc46e:	2200      	movs	r2, #0
 23fc470:	6840      	ldr	r0, [r0, #4]
 23fc472:	4611      	mov	r1, r2
 23fc474:	f7ff ba6c 	b.w	23fb950 <network_listening>

023fc478 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fc478:	2200      	movs	r2, #0
 23fc47a:	6840      	ldr	r0, [r0, #4]
 23fc47c:	4611      	mov	r1, r2
 23fc47e:	f7ff ba83 	b.w	23fb988 <network_get_listen_timeout>

023fc482 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fc482:	2200      	movs	r2, #0
 23fc484:	6840      	ldr	r0, [r0, #4]
 23fc486:	f7ff ba71 	b.w	23fb96c <network_set_listen_timeout>

023fc48a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fc48a:	2200      	movs	r2, #0
 23fc48c:	6840      	ldr	r0, [r0, #4]
 23fc48e:	f081 0101 	eor.w	r1, r1, #1
 23fc492:	f7ff ba4f 	b.w	23fb934 <network_listen>

023fc496 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fc496:	2300      	movs	r3, #0
 23fc498:	6840      	ldr	r0, [r0, #4]
 23fc49a:	461a      	mov	r2, r3
 23fc49c:	4619      	mov	r1, r3
 23fc49e:	f7ff ba3b 	b.w	23fb918 <network_off>

023fc4a2 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fc4a2:	2300      	movs	r3, #0
 23fc4a4:	6840      	ldr	r0, [r0, #4]
 23fc4a6:	461a      	mov	r2, r3
 23fc4a8:	4619      	mov	r1, r3
 23fc4aa:	f7ff ba27 	b.w	23fb8fc <network_on>

023fc4ae <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23fc4ae:	2200      	movs	r2, #0
 23fc4b0:	6840      	ldr	r0, [r0, #4]
 23fc4b2:	4611      	mov	r1, r2
 23fc4b4:	f7ff b9f8 	b.w	23fb8a8 <network_connecting>

023fc4b8 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fc4b8:	2200      	movs	r2, #0
 23fc4ba:	2102      	movs	r1, #2
 23fc4bc:	6840      	ldr	r0, [r0, #4]
 23fc4be:	f7ff ba01 	b.w	23fb8c4 <network_disconnect>

023fc4c2 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fc4c2:	2300      	movs	r3, #0
 23fc4c4:	6840      	ldr	r0, [r0, #4]
 23fc4c6:	461a      	mov	r2, r3
 23fc4c8:	f7ff b9e0 	b.w	23fb88c <network_connect>

023fc4cc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23fc4cc:	2204      	movs	r2, #4
 23fc4ce:	4b02      	ldr	r3, [pc, #8]	; (23fc4d8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23fc4d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23fc4d2:	4a02      	ldr	r2, [pc, #8]	; (23fc4dc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23fc4d4:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23fc4d6:	4770      	bx	lr
 23fc4d8:	1007aee0 	.word	0x1007aee0
 23fc4dc:	023fff2c 	.word	0x023fff2c

023fc4e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23fc4e0:	4b01      	ldr	r3, [pc, #4]	; (23fc4e8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23fc4e2:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23fc4e4:	4770      	bx	lr
 23fc4e6:	bf00      	nop
 23fc4e8:	1007ad6c 	.word	0x1007ad6c

023fc4ec <serialEventRun>:
{
 23fc4ec:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23fc4ee:	4b0f      	ldr	r3, [pc, #60]	; (23fc52c <serialEventRun+0x40>)
 23fc4f0:	b143      	cbz	r3, 23fc504 <serialEventRun+0x18>
 23fc4f2:	f7ff ff93 	bl	23fc41c <_Z16_fetch_usbserialv>
 23fc4f6:	6803      	ldr	r3, [r0, #0]
 23fc4f8:	691b      	ldr	r3, [r3, #16]
 23fc4fa:	4798      	blx	r3
 23fc4fc:	2800      	cmp	r0, #0
 23fc4fe:	dd01      	ble.n	23fc504 <serialEventRun+0x18>
        serialEvent();
 23fc500:	e000      	b.n	23fc504 <serialEventRun+0x18>
 23fc502:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23fc504:	4b0a      	ldr	r3, [pc, #40]	; (23fc530 <serialEventRun+0x44>)
 23fc506:	b143      	cbz	r3, 23fc51a <serialEventRun+0x2e>
 23fc508:	f000 f96a 	bl	23fc7e0 <_Z22__fetch_global_Serial1v>
 23fc50c:	6803      	ldr	r3, [r0, #0]
 23fc50e:	691b      	ldr	r3, [r3, #16]
 23fc510:	4798      	blx	r3
 23fc512:	2800      	cmp	r0, #0
 23fc514:	dd01      	ble.n	23fc51a <serialEventRun+0x2e>
        serialEvent1();
 23fc516:	e000      	b.n	23fc51a <serialEventRun+0x2e>
 23fc518:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23fc51a:	4b06      	ldr	r3, [pc, #24]	; (23fc534 <serialEventRun+0x48>)
 23fc51c:	b10b      	cbz	r3, 23fc522 <serialEventRun+0x36>
 23fc51e:	f000 f9a5 	bl	23fc86c <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23fc522:	4b05      	ldr	r3, [pc, #20]	; (23fc538 <serialEventRun+0x4c>)
 23fc524:	b10b      	cbz	r3, 23fc52a <serialEventRun+0x3e>
 23fc526:	f000 f9d7 	bl	23fc8d8 <_Z15serialEventRun3v>
}
 23fc52a:	bd08      	pop	{r3, pc}
	...

023fc53c <_post_loop>:
{
 23fc53c:	b508      	push	{r3, lr}
	serialEventRun();
 23fc53e:	f7ff ffd5 	bl	23fc4ec <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23fc542:	f7fe ff11 	bl	23fb368 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23fc546:	4b01      	ldr	r3, [pc, #4]	; (23fc54c <_post_loop+0x10>)
 23fc548:	6018      	str	r0, [r3, #0]
}
 23fc54a:	bd08      	pop	{r3, pc}
 23fc54c:	1007aef0 	.word	0x1007aef0

023fc550 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fc550:	4805      	ldr	r0, [pc, #20]	; (23fc568 <_Z33system_initialize_user_backup_ramv+0x18>)
 23fc552:	4a06      	ldr	r2, [pc, #24]	; (23fc56c <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23fc554:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23fc556:	1a12      	subs	r2, r2, r0
 23fc558:	4905      	ldr	r1, [pc, #20]	; (23fc570 <_Z33system_initialize_user_backup_ramv+0x20>)
 23fc55a:	f000 f9d9 	bl	23fc910 <memcpy>
    __backup_sram_signature = signature;
 23fc55e:	4b05      	ldr	r3, [pc, #20]	; (23fc574 <_Z33system_initialize_user_backup_ramv+0x24>)
 23fc560:	4a05      	ldr	r2, [pc, #20]	; (23fc578 <_Z33system_initialize_user_backup_ramv+0x28>)
 23fc562:	601a      	str	r2, [r3, #0]
}
 23fc564:	bd08      	pop	{r3, pc}
 23fc566:	bf00      	nop
 23fc568:	1007b400 	.word	0x1007b400
 23fc56c:	1007b404 	.word	0x1007b404
 23fc570:	085ff8d8 	.word	0x085ff8d8
 23fc574:	1007b400 	.word	0x1007b400
 23fc578:	9a271c1e 	.word	0x9a271c1e

023fc57c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc57c:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23fc57e:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc580:	461a      	mov	r2, r3
 23fc582:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fc586:	9300      	str	r3, [sp, #0]
 23fc588:	f7ff f964 	bl	23fb854 <system_ctrl_set_result>
}
 23fc58c:	b003      	add	sp, #12
 23fc58e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023fc594 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23fc594:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23fc596:	8843      	ldrh	r3, [r0, #2]
 23fc598:	2b0a      	cmp	r3, #10
 23fc59a:	d008      	beq.n	23fc5ae <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23fc59c:	2b50      	cmp	r3, #80	; 0x50
 23fc59e:	d10b      	bne.n	23fc5b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23fc5a0:	4b09      	ldr	r3, [pc, #36]	; (23fc5c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23fc5a2:	681b      	ldr	r3, [r3, #0]
 23fc5a4:	b14b      	cbz	r3, 23fc5ba <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23fc5a6:	b003      	add	sp, #12
 23fc5a8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23fc5ac:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23fc5ae:	f7ff ffe5 	bl	23fc57c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23fc5b2:	b003      	add	sp, #12
 23fc5b4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23fc5b8:	2300      	movs	r3, #0
 23fc5ba:	461a      	mov	r2, r3
 23fc5bc:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23fc5c0:	9300      	str	r3, [sp, #0]
 23fc5c2:	f7ff f947 	bl	23fb854 <system_ctrl_set_result>
}
 23fc5c6:	e7f4      	b.n	23fc5b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23fc5c8:	1007aeec 	.word	0x1007aeec

023fc5cc <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fc5cc:	2100      	movs	r1, #0
{
 23fc5ce:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23fc5d0:	4811      	ldr	r0, [pc, #68]	; (23fc618 <module_user_init_hook+0x4c>)
 23fc5d2:	f7ff fa2d 	bl	23fba30 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23fc5d6:	4b11      	ldr	r3, [pc, #68]	; (23fc61c <module_user_init_hook+0x50>)
 23fc5d8:	681a      	ldr	r2, [r3, #0]
 23fc5da:	4b11      	ldr	r3, [pc, #68]	; (23fc620 <module_user_init_hook+0x54>)
 23fc5dc:	429a      	cmp	r2, r3
 23fc5de:	bf0c      	ite	eq
 23fc5e0:	2201      	moveq	r2, #1
 23fc5e2:	2200      	movne	r2, #0
 23fc5e4:	4b0f      	ldr	r3, [pc, #60]	; (23fc624 <module_user_init_hook+0x58>)
 23fc5e6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23fc5e8:	d001      	beq.n	23fc5ee <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23fc5ea:	f7ff ffb1 	bl	23fc550 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23fc5ee:	f7fe fe9f 	bl	23fb330 <HAL_RNG_GetRandomNumber>
 23fc5f2:	4604      	mov	r4, r0
    srand(seed);
 23fc5f4:	f000 f9a2 	bl	23fc93c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23fc5f8:	4b0b      	ldr	r3, [pc, #44]	; (23fc628 <module_user_init_hook+0x5c>)
 23fc5fa:	b113      	cbz	r3, 23fc602 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23fc5fc:	4620      	mov	r0, r4
 23fc5fe:	e000      	b.n	23fc602 <module_user_init_hook+0x36>
 23fc600:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23fc602:	2100      	movs	r1, #0
 23fc604:	4808      	ldr	r0, [pc, #32]	; (23fc628 <module_user_init_hook+0x5c>)
 23fc606:	f7ff f933 	bl	23fb870 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23fc60a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23fc60e:	2100      	movs	r1, #0
 23fc610:	4806      	ldr	r0, [pc, #24]	; (23fc62c <module_user_init_hook+0x60>)
 23fc612:	f7ff b911 	b.w	23fb838 <system_ctrl_set_app_request_handler>
 23fc616:	bf00      	nop
 23fc618:	023fc4e1 	.word	0x023fc4e1
 23fc61c:	1007b400 	.word	0x1007b400
 23fc620:	9a271c1e 	.word	0x9a271c1e
 23fc624:	1007aee8 	.word	0x1007aee8
 23fc628:	00000000 	.word	0x00000000
 23fc62c:	023fc595 	.word	0x023fc595

023fc630 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23fc630:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23fc632:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fc634:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23fc636:	d902      	bls.n	23fc63e <pinAvailable+0xe>
    return false;
 23fc638:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23fc63a:	b003      	add	sp, #12
 23fc63c:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fc63e:	f1a0 030f 	sub.w	r3, r0, #15
 23fc642:	2b02      	cmp	r3, #2
 23fc644:	d90b      	bls.n	23fc65e <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23fc646:	2801      	cmp	r0, #1
 23fc648:	d821      	bhi.n	23fc68e <pinAvailable+0x5e>
 23fc64a:	f000 f875 	bl	23fc738 <_Z19__fetch_global_Wirev>
 23fc64e:	2100      	movs	r1, #0
 23fc650:	7c00      	ldrb	r0, [r0, #16]
 23fc652:	f7fe ff31 	bl	23fb4b8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fc656:	f080 0001 	eor.w	r0, r0, #1
 23fc65a:	b2c0      	uxtb	r0, r0
 23fc65c:	e7ed      	b.n	23fc63a <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23fc65e:	4d11      	ldr	r5, [pc, #68]	; (23fc6a4 <pinAvailable+0x74>)
 23fc660:	e8d5 1f8f 	ldab	r1, [r5]
 23fc664:	f011 0101 	ands.w	r1, r1, #1
 23fc668:	d10b      	bne.n	23fc682 <pinAvailable+0x52>
 23fc66a:	4628      	mov	r0, r5
 23fc66c:	9101      	str	r1, [sp, #4]
 23fc66e:	f7fc fe15 	bl	23f929c <__cxa_guard_acquire>
 23fc672:	9901      	ldr	r1, [sp, #4]
 23fc674:	b128      	cbz	r0, 23fc682 <pinAvailable+0x52>
 23fc676:	480c      	ldr	r0, [pc, #48]	; (23fc6a8 <pinAvailable+0x78>)
 23fc678:	f7ff fd54 	bl	23fc124 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23fc67c:	4628      	mov	r0, r5
 23fc67e:	f7fc fe12 	bl	23f92a6 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23fc682:	4b09      	ldr	r3, [pc, #36]	; (23fc6a8 <pinAvailable+0x78>)
 23fc684:	7818      	ldrb	r0, [r3, #0]
 23fc686:	f7fe ff95 	bl	23fb5b4 <hal_spi_is_enabled>
 23fc68a:	2800      	cmp	r0, #0
 23fc68c:	d1d4      	bne.n	23fc638 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23fc68e:	3c08      	subs	r4, #8
 23fc690:	2c01      	cmp	r4, #1
 23fc692:	d805      	bhi.n	23fc6a0 <pinAvailable+0x70>
 23fc694:	f000 f8a4 	bl	23fc7e0 <_Z22__fetch_global_Serial1v>
 23fc698:	7c00      	ldrb	r0, [r0, #16]
 23fc69a:	f7ff f817 	bl	23fb6cc <hal_usart_is_enabled>
 23fc69e:	e7da      	b.n	23fc656 <pinAvailable+0x26>
  return true; // 'pin' is available
 23fc6a0:	2001      	movs	r0, #1
 23fc6a2:	e7ca      	b.n	23fc63a <pinAvailable+0xa>
 23fc6a4:	1007ae80 	.word	0x1007ae80
 23fc6a8:	1007ae84 	.word	0x1007ae84

023fc6ac <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fc6ac:	281b      	cmp	r0, #27
{
 23fc6ae:	b538      	push	{r3, r4, r5, lr}
 23fc6b0:	4604      	mov	r4, r0
 23fc6b2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23fc6b4:	d80a      	bhi.n	23fc6cc <pinMode+0x20>
 23fc6b6:	29ff      	cmp	r1, #255	; 0xff
 23fc6b8:	d008      	beq.n	23fc6cc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23fc6ba:	f7ff ffb9 	bl	23fc630 <pinAvailable>
 23fc6be:	b128      	cbz	r0, 23fc6cc <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23fc6c0:	4629      	mov	r1, r5
 23fc6c2:	4620      	mov	r0, r4
}
 23fc6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23fc6c8:	f7fe be5c 	b.w	23fb384 <hal_gpio_mode>
}
 23fc6cc:	bd38      	pop	{r3, r4, r5, pc}

023fc6ce <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23fc6ce:	b538      	push	{r3, r4, r5, lr}
 23fc6d0:	4604      	mov	r4, r0
 23fc6d2:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23fc6d4:	f7fe fe64 	bl	23fb3a0 <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23fc6d8:	28ff      	cmp	r0, #255	; 0xff
 23fc6da:	d010      	beq.n	23fc6fe <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23fc6dc:	2806      	cmp	r0, #6
 23fc6de:	d804      	bhi.n	23fc6ea <digitalWrite+0x1c>
 23fc6e0:	234d      	movs	r3, #77	; 0x4d
 23fc6e2:	fa23 f000 	lsr.w	r0, r3, r0
 23fc6e6:	07c3      	lsls	r3, r0, #31
 23fc6e8:	d409      	bmi.n	23fc6fe <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23fc6ea:	4620      	mov	r0, r4
 23fc6ec:	f7ff ffa0 	bl	23fc630 <pinAvailable>
 23fc6f0:	b128      	cbz	r0, 23fc6fe <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23fc6f2:	4629      	mov	r1, r5
 23fc6f4:	4620      	mov	r0, r4
}
 23fc6f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23fc6fa:	f7fe be5f 	b.w	23fb3bc <hal_gpio_write>
}
 23fc6fe:	bd38      	pop	{r3, r4, r5, pc}

023fc700 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fc700:	4770      	bx	lr
	...

023fc704 <_Z17acquireWireBufferv>:
{
 23fc704:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23fc706:	4b0a      	ldr	r3, [pc, #40]	; (23fc730 <_Z17acquireWireBufferv+0x2c>)
{
 23fc708:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23fc70a:	6003      	str	r3, [r0, #0]
 23fc70c:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fc70e:	4909      	ldr	r1, [pc, #36]	; (23fc734 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23fc710:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fc712:	2020      	movs	r0, #32
 23fc714:	f000 f8f4 	bl	23fc900 <_ZnajRKSt9nothrow_t>
	};
 23fc718:	2520      	movs	r5, #32
 23fc71a:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fc71c:	4905      	ldr	r1, [pc, #20]	; (23fc734 <_Z17acquireWireBufferv+0x30>)
 23fc71e:	4628      	mov	r0, r5
	};
 23fc720:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23fc722:	f000 f8ed 	bl	23fc900 <_ZnajRKSt9nothrow_t>
	};
 23fc726:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23fc72a:	4620      	mov	r0, r4
 23fc72c:	bd38      	pop	{r3, r4, r5, pc}
 23fc72e:	bf00      	nop
 23fc730:	00010018 	.word	0x00010018
 23fc734:	023fff60 	.word	0x023fff60

023fc738 <_Z19__fetch_global_Wirev>:
{
 23fc738:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fc73a:	4d0e      	ldr	r5, [pc, #56]	; (23fc774 <_Z19__fetch_global_Wirev+0x3c>)
{
 23fc73c:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23fc73e:	e8d5 1f8f 	ldab	r1, [r5]
 23fc742:	f011 0401 	ands.w	r4, r1, #1
 23fc746:	d111      	bne.n	23fc76c <_Z19__fetch_global_Wirev+0x34>
 23fc748:	4628      	mov	r0, r5
 23fc74a:	f7fc fda7 	bl	23f929c <__cxa_guard_acquire>
 23fc74e:	b168      	cbz	r0, 23fc76c <_Z19__fetch_global_Wirev+0x34>
 23fc750:	4668      	mov	r0, sp
 23fc752:	f7ff ffd7 	bl	23fc704 <_Z17acquireWireBufferv>
 23fc756:	466a      	mov	r2, sp
 23fc758:	4621      	mov	r1, r4
 23fc75a:	4807      	ldr	r0, [pc, #28]	; (23fc778 <_Z19__fetch_global_Wirev+0x40>)
 23fc75c:	f7ff f9ec 	bl	23fbb38 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23fc760:	4628      	mov	r0, r5
 23fc762:	f7fc fda0 	bl	23f92a6 <__cxa_guard_release>
 23fc766:	4805      	ldr	r0, [pc, #20]	; (23fc77c <_Z19__fetch_global_Wirev+0x44>)
 23fc768:	f000 f8cc 	bl	23fc904 <atexit>
	return wire;
}
 23fc76c:	4802      	ldr	r0, [pc, #8]	; (23fc778 <_Z19__fetch_global_Wirev+0x40>)
 23fc76e:	b007      	add	sp, #28
 23fc770:	bd30      	pop	{r4, r5, pc}
 23fc772:	bf00      	nop
 23fc774:	1007aef4 	.word	0x1007aef4
 23fc778:	1007aef8 	.word	0x1007aef8
 23fc77c:	023fc701 	.word	0x023fc701

023fc780 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fc780:	4770      	bx	lr
	...

023fc784 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23fc784:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23fc786:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23fc788:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23fc78a:	462a      	mov	r2, r5
 23fc78c:	2100      	movs	r1, #0
 23fc78e:	f000 f8cc 	bl	23fc92a <memset>
 23fc792:	8025      	strh	r5, [r4, #0]
 23fc794:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fc796:	4907      	ldr	r1, [pc, #28]	; (23fc7b4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23fc798:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23fc79a:	8125      	strh	r5, [r4, #8]
 23fc79c:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fc79e:	f000 f8af 	bl	23fc900 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fc7a2:	4904      	ldr	r1, [pc, #16]	; (23fc7b4 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23fc7a4:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23fc7a6:	4628      	mov	r0, r5
 23fc7a8:	f000 f8aa 	bl	23fc900 <_ZnajRKSt9nothrow_t>
    };
 23fc7ac:	60e0      	str	r0, [r4, #12]
}
 23fc7ae:	4620      	mov	r0, r4
 23fc7b0:	bd38      	pop	{r3, r4, r5, pc}
 23fc7b2:	bf00      	nop
 23fc7b4:	023fff60 	.word	0x023fff60

023fc7b8 <__tcf_2>:
 23fc7b8:	4770      	bx	lr

023fc7ba <__tcf_1>:
 23fc7ba:	4770      	bx	lr

023fc7bc <_Z20acquireSerial1Bufferv>:
{
 23fc7bc:	b510      	push	{r4, lr}
 23fc7be:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23fc7c0:	f7ff ffe0 	bl	23fc784 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23fc7c4:	4620      	mov	r0, r4
 23fc7c6:	bd10      	pop	{r4, pc}

023fc7c8 <_Z20acquireSerial2Bufferv>:
 23fc7c8:	b510      	push	{r4, lr}
 23fc7ca:	4604      	mov	r4, r0
 23fc7cc:	f7ff ffda 	bl	23fc784 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fc7d0:	4620      	mov	r0, r4
 23fc7d2:	bd10      	pop	{r4, pc}

023fc7d4 <_Z20acquireSerial3Bufferv>:
 23fc7d4:	b510      	push	{r4, lr}
 23fc7d6:	4604      	mov	r4, r0
 23fc7d8:	f7ff ffd4 	bl	23fc784 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23fc7dc:	4620      	mov	r0, r4
 23fc7de:	bd10      	pop	{r4, pc}

023fc7e0 <_Z22__fetch_global_Serial1v>:
{
 23fc7e0:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fc7e2:	4d0e      	ldr	r5, [pc, #56]	; (23fc81c <_Z22__fetch_global_Serial1v+0x3c>)
{
 23fc7e4:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23fc7e6:	e8d5 1f8f 	ldab	r1, [r5]
 23fc7ea:	f011 0401 	ands.w	r4, r1, #1
 23fc7ee:	d111      	bne.n	23fc814 <_Z22__fetch_global_Serial1v+0x34>
 23fc7f0:	4628      	mov	r0, r5
 23fc7f2:	f7fc fd53 	bl	23f929c <__cxa_guard_acquire>
 23fc7f6:	b168      	cbz	r0, 23fc814 <_Z22__fetch_global_Serial1v+0x34>
 23fc7f8:	a801      	add	r0, sp, #4
 23fc7fa:	f7ff ffdf 	bl	23fc7bc <_Z20acquireSerial1Bufferv>
 23fc7fe:	4621      	mov	r1, r4
 23fc800:	aa01      	add	r2, sp, #4
 23fc802:	4807      	ldr	r0, [pc, #28]	; (23fc820 <_Z22__fetch_global_Serial1v+0x40>)
 23fc804:	f7ff fd94 	bl	23fc330 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fc808:	4628      	mov	r0, r5
 23fc80a:	f7fc fd4c 	bl	23f92a6 <__cxa_guard_release>
 23fc80e:	4805      	ldr	r0, [pc, #20]	; (23fc824 <_Z22__fetch_global_Serial1v+0x44>)
 23fc810:	f000 f878 	bl	23fc904 <atexit>
    return serial1;
}
 23fc814:	4802      	ldr	r0, [pc, #8]	; (23fc820 <_Z22__fetch_global_Serial1v+0x40>)
 23fc816:	b007      	add	sp, #28
 23fc818:	bd30      	pop	{r4, r5, pc}
 23fc81a:	bf00      	nop
 23fc81c:	1007af0c 	.word	0x1007af0c
 23fc820:	1007af18 	.word	0x1007af18
 23fc824:	023fc781 	.word	0x023fc781

023fc828 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23fc828:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fc82a:	4c0d      	ldr	r4, [pc, #52]	; (23fc860 <_Z22__fetch_global_Serial2v+0x38>)
{
 23fc82c:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23fc82e:	e8d4 3f8f 	ldab	r3, [r4]
 23fc832:	07db      	lsls	r3, r3, #31
 23fc834:	d411      	bmi.n	23fc85a <_Z22__fetch_global_Serial2v+0x32>
 23fc836:	4620      	mov	r0, r4
 23fc838:	f7fc fd30 	bl	23f929c <__cxa_guard_acquire>
 23fc83c:	b168      	cbz	r0, 23fc85a <_Z22__fetch_global_Serial2v+0x32>
 23fc83e:	a801      	add	r0, sp, #4
 23fc840:	f7ff ffc2 	bl	23fc7c8 <_Z20acquireSerial2Bufferv>
 23fc844:	2101      	movs	r1, #1
 23fc846:	aa01      	add	r2, sp, #4
 23fc848:	4806      	ldr	r0, [pc, #24]	; (23fc864 <_Z22__fetch_global_Serial2v+0x3c>)
 23fc84a:	f7ff fd71 	bl	23fc330 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fc84e:	4620      	mov	r0, r4
 23fc850:	f7fc fd29 	bl	23f92a6 <__cxa_guard_release>
 23fc854:	4804      	ldr	r0, [pc, #16]	; (23fc868 <_Z22__fetch_global_Serial2v+0x40>)
 23fc856:	f000 f855 	bl	23fc904 <atexit>
	return serial2;
}
 23fc85a:	4802      	ldr	r0, [pc, #8]	; (23fc864 <_Z22__fetch_global_Serial2v+0x3c>)
 23fc85c:	b006      	add	sp, #24
 23fc85e:	bd10      	pop	{r4, pc}
 23fc860:	1007af10 	.word	0x1007af10
 23fc864:	1007af2c 	.word	0x1007af2c
 23fc868:	023fc7bb 	.word	0x023fc7bb

023fc86c <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23fc86c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23fc86e:	f7ff ffdb 	bl	23fc828 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23fc872:	4b07      	ldr	r3, [pc, #28]	; (23fc890 <_Z15serialEventRun2v+0x24>)
 23fc874:	4604      	mov	r4, r0
 23fc876:	b153      	cbz	r3, 23fc88e <_Z15serialEventRun2v+0x22>
 23fc878:	f7ff fd6e 	bl	23fc358 <_ZN11USARTSerial9isEnabledEv>
 23fc87c:	b138      	cbz	r0, 23fc88e <_Z15serialEventRun2v+0x22>
 23fc87e:	6823      	ldr	r3, [r4, #0]
 23fc880:	4620      	mov	r0, r4
 23fc882:	691b      	ldr	r3, [r3, #16]
 23fc884:	4798      	blx	r3
 23fc886:	2800      	cmp	r0, #0
 23fc888:	dd01      	ble.n	23fc88e <_Z15serialEventRun2v+0x22>
        handler();
 23fc88a:	e000      	b.n	23fc88e <_Z15serialEventRun2v+0x22>
 23fc88c:	bf00      	nop
}
 23fc88e:	bd10      	pop	{r4, pc}
 23fc890:	00000000 	.word	0x00000000

023fc894 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23fc894:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fc896:	4c0d      	ldr	r4, [pc, #52]	; (23fc8cc <_Z22__fetch_global_Serial3v+0x38>)
{
 23fc898:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23fc89a:	e8d4 3f8f 	ldab	r3, [r4]
 23fc89e:	07db      	lsls	r3, r3, #31
 23fc8a0:	d411      	bmi.n	23fc8c6 <_Z22__fetch_global_Serial3v+0x32>
 23fc8a2:	4620      	mov	r0, r4
 23fc8a4:	f7fc fcfa 	bl	23f929c <__cxa_guard_acquire>
 23fc8a8:	b168      	cbz	r0, 23fc8c6 <_Z22__fetch_global_Serial3v+0x32>
 23fc8aa:	a801      	add	r0, sp, #4
 23fc8ac:	f7ff ff92 	bl	23fc7d4 <_Z20acquireSerial3Bufferv>
 23fc8b0:	2102      	movs	r1, #2
 23fc8b2:	aa01      	add	r2, sp, #4
 23fc8b4:	4806      	ldr	r0, [pc, #24]	; (23fc8d0 <_Z22__fetch_global_Serial3v+0x3c>)
 23fc8b6:	f7ff fd3b 	bl	23fc330 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23fc8ba:	4620      	mov	r0, r4
 23fc8bc:	f7fc fcf3 	bl	23f92a6 <__cxa_guard_release>
 23fc8c0:	4804      	ldr	r0, [pc, #16]	; (23fc8d4 <_Z22__fetch_global_Serial3v+0x40>)
 23fc8c2:	f000 f81f 	bl	23fc904 <atexit>
	return serial3;
}
 23fc8c6:	4802      	ldr	r0, [pc, #8]	; (23fc8d0 <_Z22__fetch_global_Serial3v+0x3c>)
 23fc8c8:	b006      	add	sp, #24
 23fc8ca:	bd10      	pop	{r4, pc}
 23fc8cc:	1007af14 	.word	0x1007af14
 23fc8d0:	1007af40 	.word	0x1007af40
 23fc8d4:	023fc7b9 	.word	0x023fc7b9

023fc8d8 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23fc8d8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23fc8da:	f7ff ffdb 	bl	23fc894 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23fc8de:	4b07      	ldr	r3, [pc, #28]	; (23fc8fc <_Z15serialEventRun3v+0x24>)
 23fc8e0:	4604      	mov	r4, r0
 23fc8e2:	b153      	cbz	r3, 23fc8fa <_Z15serialEventRun3v+0x22>
 23fc8e4:	f7ff fd38 	bl	23fc358 <_ZN11USARTSerial9isEnabledEv>
 23fc8e8:	b138      	cbz	r0, 23fc8fa <_Z15serialEventRun3v+0x22>
 23fc8ea:	6823      	ldr	r3, [r4, #0]
 23fc8ec:	4620      	mov	r0, r4
 23fc8ee:	691b      	ldr	r3, [r3, #16]
 23fc8f0:	4798      	blx	r3
 23fc8f2:	2800      	cmp	r0, #0
 23fc8f4:	dd01      	ble.n	23fc8fa <_Z15serialEventRun3v+0x22>
        handler();
 23fc8f6:	e000      	b.n	23fc8fa <_Z15serialEventRun3v+0x22>
 23fc8f8:	bf00      	nop
}
 23fc8fa:	bd10      	pop	{r4, pc}
 23fc8fc:	00000000 	.word	0x00000000

023fc900 <_ZnajRKSt9nothrow_t>:
 23fc900:	f7fc bcbb 	b.w	23f927a <_Znaj>

023fc904 <atexit>:
 23fc904:	2300      	movs	r3, #0
 23fc906:	4601      	mov	r1, r0
 23fc908:	461a      	mov	r2, r3
 23fc90a:	4618      	mov	r0, r3
 23fc90c:	f000 b844 	b.w	23fc998 <__register_exitproc>

023fc910 <memcpy>:
 23fc910:	440a      	add	r2, r1
 23fc912:	1e43      	subs	r3, r0, #1
 23fc914:	4291      	cmp	r1, r2
 23fc916:	d100      	bne.n	23fc91a <memcpy+0xa>
 23fc918:	4770      	bx	lr
 23fc91a:	b510      	push	{r4, lr}
 23fc91c:	f811 4b01 	ldrb.w	r4, [r1], #1
 23fc920:	4291      	cmp	r1, r2
 23fc922:	f803 4f01 	strb.w	r4, [r3, #1]!
 23fc926:	d1f9      	bne.n	23fc91c <memcpy+0xc>
 23fc928:	bd10      	pop	{r4, pc}

023fc92a <memset>:
 23fc92a:	4402      	add	r2, r0
 23fc92c:	4603      	mov	r3, r0
 23fc92e:	4293      	cmp	r3, r2
 23fc930:	d100      	bne.n	23fc934 <memset+0xa>
 23fc932:	4770      	bx	lr
 23fc934:	f803 1b01 	strb.w	r1, [r3], #1
 23fc938:	e7f9      	b.n	23fc92e <memset+0x4>
	...

023fc93c <srand>:
 23fc93c:	b538      	push	{r3, r4, r5, lr}
 23fc93e:	4b10      	ldr	r3, [pc, #64]	; (23fc980 <srand+0x44>)
 23fc940:	4604      	mov	r4, r0
 23fc942:	681d      	ldr	r5, [r3, #0]
 23fc944:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc946:	b9b3      	cbnz	r3, 23fc976 <srand+0x3a>
 23fc948:	2018      	movs	r0, #24
 23fc94a:	f7ff f847 	bl	23fb9dc <malloc>
 23fc94e:	4602      	mov	r2, r0
 23fc950:	63a8      	str	r0, [r5, #56]	; 0x38
 23fc952:	b920      	cbnz	r0, 23fc95e <srand+0x22>
 23fc954:	4b0b      	ldr	r3, [pc, #44]	; (23fc984 <srand+0x48>)
 23fc956:	2142      	movs	r1, #66	; 0x42
 23fc958:	480b      	ldr	r0, [pc, #44]	; (23fc988 <srand+0x4c>)
 23fc95a:	f7ff f85b 	bl	23fba14 <__assert_func>
 23fc95e:	490b      	ldr	r1, [pc, #44]	; (23fc98c <srand+0x50>)
 23fc960:	4b0b      	ldr	r3, [pc, #44]	; (23fc990 <srand+0x54>)
 23fc962:	e9c0 1300 	strd	r1, r3, [r0]
 23fc966:	4b0b      	ldr	r3, [pc, #44]	; (23fc994 <srand+0x58>)
 23fc968:	2100      	movs	r1, #0
 23fc96a:	6083      	str	r3, [r0, #8]
 23fc96c:	230b      	movs	r3, #11
 23fc96e:	8183      	strh	r3, [r0, #12]
 23fc970:	2001      	movs	r0, #1
 23fc972:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23fc976:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23fc978:	2200      	movs	r2, #0
 23fc97a:	611c      	str	r4, [r3, #16]
 23fc97c:	615a      	str	r2, [r3, #20]
 23fc97e:	bd38      	pop	{r3, r4, r5, pc}
 23fc980:	1007ad6c 	.word	0x1007ad6c
 23fc984:	023fff61 	.word	0x023fff61
 23fc988:	023fff78 	.word	0x023fff78
 23fc98c:	abcd330e 	.word	0xabcd330e
 23fc990:	e66d1234 	.word	0xe66d1234
 23fc994:	0005deec 	.word	0x0005deec

023fc998 <__register_exitproc>:
 23fc998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23fc99c:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23fca5c <__register_exitproc+0xc4>
 23fc9a0:	4606      	mov	r6, r0
 23fc9a2:	461f      	mov	r7, r3
 23fc9a4:	460d      	mov	r5, r1
 23fc9a6:	f8d8 0000 	ldr.w	r0, [r8]
 23fc9aa:	4691      	mov	r9, r2
 23fc9ac:	f000 f858 	bl	23fca60 <__retarget_lock_acquire_recursive>
 23fc9b0:	4b26      	ldr	r3, [pc, #152]	; (23fca4c <__register_exitproc+0xb4>)
 23fc9b2:	681c      	ldr	r4, [r3, #0]
 23fc9b4:	b934      	cbnz	r4, 23fc9c4 <__register_exitproc+0x2c>
 23fc9b6:	4c26      	ldr	r4, [pc, #152]	; (23fca50 <__register_exitproc+0xb8>)
 23fc9b8:	601c      	str	r4, [r3, #0]
 23fc9ba:	4b26      	ldr	r3, [pc, #152]	; (23fca54 <__register_exitproc+0xbc>)
 23fc9bc:	b113      	cbz	r3, 23fc9c4 <__register_exitproc+0x2c>
 23fc9be:	681b      	ldr	r3, [r3, #0]
 23fc9c0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23fc9c4:	6863      	ldr	r3, [r4, #4]
 23fc9c6:	2b1f      	cmp	r3, #31
 23fc9c8:	dd07      	ble.n	23fc9da <__register_exitproc+0x42>
 23fc9ca:	f8d8 0000 	ldr.w	r0, [r8]
 23fc9ce:	f000 f849 	bl	23fca64 <__retarget_lock_release_recursive>
 23fc9d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fc9d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23fc9da:	b35e      	cbz	r6, 23fca34 <__register_exitproc+0x9c>
 23fc9dc:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23fc9e0:	b988      	cbnz	r0, 23fca06 <__register_exitproc+0x6e>
 23fc9e2:	4b1d      	ldr	r3, [pc, #116]	; (23fca58 <__register_exitproc+0xc0>)
 23fc9e4:	b923      	cbnz	r3, 23fc9f0 <__register_exitproc+0x58>
 23fc9e6:	f8d8 0000 	ldr.w	r0, [r8]
 23fc9ea:	f000 f83a 	bl	23fca62 <__retarget_lock_release>
 23fc9ee:	e7f0      	b.n	23fc9d2 <__register_exitproc+0x3a>
 23fc9f0:	f44f 7084 	mov.w	r0, #264	; 0x108
 23fc9f4:	f7fe fff2 	bl	23fb9dc <malloc>
 23fc9f8:	2800      	cmp	r0, #0
 23fc9fa:	d0f4      	beq.n	23fc9e6 <__register_exitproc+0x4e>
 23fc9fc:	2300      	movs	r3, #0
 23fc9fe:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23fca02:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23fca06:	6863      	ldr	r3, [r4, #4]
 23fca08:	2201      	movs	r2, #1
 23fca0a:	2e02      	cmp	r6, #2
 23fca0c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23fca10:	fa02 f203 	lsl.w	r2, r2, r3
 23fca14:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23fca18:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23fca1c:	ea43 0302 	orr.w	r3, r3, r2
 23fca20:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23fca24:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23fca28:	bf02      	ittt	eq
 23fca2a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23fca2e:	4313      	orreq	r3, r2
 23fca30:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23fca34:	6863      	ldr	r3, [r4, #4]
 23fca36:	f8d8 0000 	ldr.w	r0, [r8]
 23fca3a:	1c5a      	adds	r2, r3, #1
 23fca3c:	3302      	adds	r3, #2
 23fca3e:	6062      	str	r2, [r4, #4]
 23fca40:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23fca44:	f000 f80e 	bl	23fca64 <__retarget_lock_release_recursive>
 23fca48:	2000      	movs	r0, #0
 23fca4a:	e7c4      	b.n	23fc9d6 <__register_exitproc+0x3e>
 23fca4c:	1007afe0 	.word	0x1007afe0
 23fca50:	1007af54 	.word	0x1007af54
 23fca54:	00000000 	.word	0x00000000
 23fca58:	023fb9dd 	.word	0x023fb9dd
 23fca5c:	1007add0 	.word	0x1007add0

023fca60 <__retarget_lock_acquire_recursive>:
 23fca60:	4770      	bx	lr

023fca62 <__retarget_lock_release>:
 23fca62:	4770      	bx	lr

023fca64 <__retarget_lock_release_recursive>:
 23fca64:	4770      	bx	lr
	...

023fca68 <dynalib_user>:
 23fca68:	9241 023f 9269 023f 926d 023f 0000 0000     A.?.i.?.m.?.....
 23fca78:	6143 6c6c 6f20 206e 7570 6572 7620 7269     Call on pure vir
 23fca88:	7574 6c61 5600 4100 4f00 562e 202e 4f00     tual.V.A.O.V. .O
 23fca98:	432e 202e 5300 5445 203a 6b00 0057 4650     .C. .SET: .kW.PF
 23fcaa8:	3a20 5000 2041 003a 4156 2052 003a 4341      :.PA :.VAR :.AC
 23fcab8:	3353 3837 3030 4520 6178 706d 656c 4100     S37800 Example.A
 23fcac8:	5343 3733 3038 2030 6f6e 2074 6564 6574     CS37800 not dete
 23fcad8:	7463 6465 202e 6843 6365 206b 6f63 6e6e     cted. Check conn
 23fcae8:	6365 6974 6e6f 2073 6e61 2064 3249 2043     ections and I2C 
 23fcaf8:	6461 7264 7365 2e73 4620 6572 7a65 6e69     address. Freezin
 23fcb08:	2e67 2e2e 5600 6c6f 7374 203a 2000 6d41     g....Volts: . Am
 23fcb18:	7370 203a 5000 776f 7265 203a 6341 6974     ps: .Power: Acti
 23fcb28:	6576 2820 2957 203a 2000 6552 6361 6974     ve (W): . Reacti
 23fcb38:	6576 2820 4156 2952 203a 5000 776f 7265     ve (VAR): .Power
 23fcb48:	203a 7041 6170 6572 746e 2820 4156 3a29     : Apparent (VA):
 23fcb58:	0020 5020 776f 7265 4620 6361 6f74 3a72      . Power Factor:
 23fcb68:	0020 4c20 6761 6967 676e 2000 654c 6461      . Lagging. Lead
 23fcb78:	6e69 0067 4320 6e6f 7573 656d 0064 4720     ing. Consumed. G
 23fcb88:	6e65 7265 7461 6465 0000 0000               enerated....

023fcb94 <_ZL13FreeSans9pt7b>:
 23fcb94:	d1b4 023f cbc4 023f 7e20 0016               ..?...?. ~..

023fcba0 <_ZL14FreeSans12pt7b>:
 23fcba0:	d632 023f cebc 023f 7e20 001d               2.?...?. ~..

023fcbac <_ZL17FreeSansBold9pt7b>:
 23fcbac:	e3d4 023f dde4 023f 7e20 0016               ..?...?. ~..

023fcbb8 <_ZL18FreeSansBold12pt7b>:
 23fcbb8:	e8a2 023f e0dc 023f 7e20 001d               ..?...?. ~..

023fcbc4 <_ZL19FreeSans9pt7bGlyphs>:
 23fcbc4:	0000 0000 0005 0001 0000 0d02 0206 00f4     ................
 23fcbd4:	0004 0405 0106 00f4 0007 0c0a 000a 00f5     ................
 23fcbe4:	0016 1009 010a 00f3 0028 0d10 0110 00f4     ........(.......
 23fcbf4:	0042 0d0b 010c 00f4 0054 0402 0104 00f4     B.......T.......
 23fcc04:	0055 1104 0106 00f4 005e 1104 0106 00f4     U.......^.......
 23fcc14:	0067 0505 0107 00f4 006b 0806 030b 00f9     g.......k.......
 23fcc24:	0071 0402 0205 0000 0072 0104 0106 00fc     q.......r.......
 23fcc34:	0073 0102 0105 0000 0074 0d05 0005 00f4     s.......t.......
 23fcc44:	007d 0d08 010a 00f4 008a 0d04 030a 00f4     }...............
 23fcc54:	0091 0d09 010a 00f4 00a0 0d08 010a 00f4     ................
 23fcc64:	00ad 0d07 020a 00f4 00b9 0d09 010a 00f4     ................
 23fcc74:	00c8 0d09 010a 00f4 00d7 0d08 000a 00f4     ................
 23fcc84:	00e4 0d09 010a 00f4 00f3 0d08 010a 00f4     ................
 23fcc94:	0100 0a02 0105 00f7 0103 0c03 0105 00f8     ................
 23fcca4:	0108 0909 010b 00f8 0113 0409 010b 00fb     ................
 23fccb4:	0118 0909 010b 00f8 0123 0d09 010a 00f4     ........#.......
 23fccc4:	0132 1011 0112 00f4 0154 0d0c 000c 00f4     2.......T.......
 23fccd4:	0168 0d0b 010c 00f4 017a 0d0b 010d 00f4     h.......z.......
 23fcce4:	018c 0d0b 010d 00f4 019e 0d09 010b 00f4     ................
 23fccf4:	01ad 0d08 010b 00f4 01ba 0d0c 010e 00f4     ................
 23fcd04:	01ce 0d0b 010d 00f4 01e0 0d02 0205 00f4     ................
 23fcd14:	01e4 0d07 010a 00f4 01f0 0d0b 010c 00f4     ................
 23fcd24:	0202 0d08 010a 00f4 020f 0d0d 010f 00f4     ................
 23fcd34:	0225 0d0b 010d 00f4 0237 0d0d 010e 00f4     %.......7.......
 23fcd44:	024d 0d0a 010c 00f4 025e 0e0d 010e 00f4     M.......^.......
 23fcd54:	0275 0d0c 010d 00f4 0289 0d0a 010c 00f4     u...............
 23fcd64:	029a 0d09 010b 00f4 02a9 0d0b 010d 00f4     ................
 23fcd74:	02bb 0d0b 000c 00f4 02cd 0d11 0011 00f4     ................
 23fcd84:	02e9 0d0c 000c 00f4 02fd 0d0c 000c 00f4     ................
 23fcd94:	0311 0d0a 010b 00f4 0322 1103 0105 00f4     ........".......
 23fcda4:	0329 0d05 0005 00f4 0332 1103 0005 00f4     ).......2.......
 23fcdb4:	0339 0707 0108 00f4 0340 010a 000a 0003     9.......@.......
 23fcdc4:	0342 0304 0005 00f4 0344 0a09 010a 00f7     B.......D.......
 23fcdd4:	0350 0d09 010a 00f4 035f 0a08 0109 00f7     P......._.......
 23fcde4:	0369 0d08 010a 00f4 0376 0a08 010a 00f7     i.......v.......
 23fcdf4:	0380 0d04 0105 00f4 0387 0e08 010a 00f7     ................
 23fce04:	0395 0d08 010a 00f4 03a2 0d02 0104 00f4     ................
 23fce14:	03a6 1104 0004 00f4 03af 0d09 0109 00f4     ................
 23fce24:	03be 0d02 0104 00f4 03c2 0a0d 010f 00f7     ................
 23fce34:	03d3 0a08 010a 00f7 03dd 0a08 010a 00f7     ................
 23fce44:	03e7 0d09 010a 00f7 03f6 0d08 010a 00f7     ................
 23fce54:	0403 0a05 0106 00f7 040a 0a08 0109 00f7     ................
 23fce64:	0414 0c04 0105 00f5 041a 0a08 010a 00f7     ................
 23fce74:	0424 0a09 0009 00f7 0430 0a0d 000d 00f7     $.......0.......
 23fce84:	0441 0a08 0009 00f7 044b 0e09 0009 00f7     A.......K.......
 23fce94:	045b 0a07 0109 00f7 0464 1104 0106 00f4     [.......d.......
 23fcea4:	046d 1102 0204 00f4 0472 1104 0106 00f4     m.......r.......
 23fceb4:	047b 0307 0109 00f9                         {.......

023fcebc <_ZL20FreeSans12pt7bGlyphs>:
 23fcebc:	0000 0000 0006 0001 0000 1202 0308 00ef     ................
 23fcecc:	0005 0606 0108 00f0 000a 100d 000d 00f1     ................
 23fcedc:	0024 140b 010d 00ef 0040 1114 0115 00f0     $.......@.......
 23fceec:	006b 110e 0110 00f0 0089 0602 0105 00f0     k...............
 23fcefc:	008b 1705 0208 00ef 009a 1705 0108 00ef     ................
 23fcf0c:	00a9 0707 0109 00ef 00b0 0b0a 020e 00f6     ................
 23fcf1c:	00be 0602 0207 00ff 00c0 0206 0108 00f9     ................
 23fcf2c:	00c2 0202 0206 00ff 00c3 1207 0007 00ef     ................
 23fcf3c:	00d3 110b 010d 00f0 00eb 1105 030d 00f0     ................
 23fcf4c:	00f6 110b 010d 00f0 010e 110b 010d 00f0     ................
 23fcf5c:	0126 110b 010d 00f0 013e 110b 010d 00f0     &.......>.......
 23fcf6c:	0156 110b 010d 00f0 016e 110b 010d 00f0     V.......n.......
 23fcf7c:	0186 110b 010d 00f0 019e 110b 010d 00f0     ................
 23fcf8c:	01b6 0d02 0206 00f4 01ba 1002 0206 00f5     ................
 23fcf9c:	01be 0c0c 010e 00f5 01d0 060c 010e 00f8     ................
 23fcfac:	01d9 0c0c 010e 00f5 01eb 120a 020d 00ef     ................
 23fcfbc:	0202 1516 0118 00ef 023c 1210 0010 00ef     ........<.......
 23fcfcc:	0260 120d 0210 00ef 027e 120f 0111 00ef     `.......~.......
 23fcfdc:	02a0 120e 0211 00ef 02c0 120c 020f 00ef     ................
 23fcfec:	02db 120b 020e 00ef 02f4 1210 0112 00ef     ................
 23fcffc:	0318 120d 0211 00ef 0336 1202 0207 00ef     ........6.......
 23fd00c:	033b 1209 010d 00ef 0350 120e 0210 00ef     ;.......P.......
 23fd01c:	0370 120a 020e 00ef 0387 1210 0214 00ef     p...............
 23fd02c:	03ab 120d 0212 00ef 03c9 1211 0113 00ef     ................
 23fd03c:	03f0 120c 0210 00ef 040b 1311 0113 00ef     ................
 23fd04c:	0434 120e 0211 00ef 0454 120e 0110 00ef     4.......T.......
 23fd05c:	0474 120c 010f 00ef 048f 120d 0211 00ef     t...............
 23fd06c:	04ad 120f 000f 00ef 04cf 1216 0016 00ef     ................
 23fd07c:	0501 120f 0010 00ef 0523 1210 0010 00ef     ........#.......
 23fd08c:	0547 120d 010f 00ef 0565 1704 0207 00ef     G.......e.......
 23fd09c:	0571 1207 0007 00ef 0581 1704 0107 00ef     q...............
 23fd0ac:	058d 0909 010b 00f0 0598 010f ff0d 0004     ................
 23fd0bc:	059a 0405 0106 00ef 059d 0d0c 010d 00f4     ................
 23fd0cc:	05b1 120c 010d 00ef 05cc 0d0a 010c 00f4     ................
 23fd0dc:	05dd 120b 010d 00ef 05f6 0d0b 010d 00f4     ................
 23fd0ec:	0608 1205 0107 00ef 0614 120b 010d 00f4     ................
 23fd0fc:	062d 120a 010d 00ef 0644 1202 0205 00ef     -.......D.......
 23fd10c:	0649 1704 0006 00ef 0655 120b 010c 00ef     I.......U.......
 23fd11c:	066e 1202 0105 00ef 0673 0d11 0113 00f4     n.......s.......
 23fd12c:	068f 0d0a 010d 00f4 06a0 0d0b 010d 00f4     ................
 23fd13c:	06b2 110c 010d 00f4 06cc 110b 010d 00f4     ................
 23fd14c:	06e4 0d06 0108 00f4 06ee 0d0a 010c 00f4     ................
 23fd15c:	06ff 1005 0107 00f1 0709 0d0a 010d 00f4     ................
 23fd16c:	071a 0d0c 000c 00f4 072e 0d11 0011 00f4     ................
 23fd17c:	074a 0d0b 000b 00f4 075c 120b 000b 00f4     J.......\.......
 23fd18c:	0775 0d0a 010c 00f4 0786 1705 0108 00ef     u...............
 23fd19c:	0795 1702 0206 00ef 079b 1705 0208 00ef     ................
 23fd1ac:	07aa 050a 010c 00f6                         ........

023fd1b4 <_ZL20FreeSans9pt7bBitmaps>:
 23fd1b4:	ffff c0f8 f7de 0920 4186 ff91 0413 20c3     ...... ..A..... 
 23fd1c4:	ffc8 8289 9061 1f10 da14 1e3d 4083 1778     ....a.....=..@x.
 23fd1d4:	f408 357a f033 2040 1038 20ec 20c6 40c6     ..z53.@ 8.. . .@
 23fd1e4:	40c6 806c 0039 3c01 7702 6302 6304 7704     .@l.9..<.w.c.c.w
 23fd1f4:	3c08 060e cc60 8119 18e0 030f c236 73d8     .<..`.......6..s
 23fd204:	3106 c4e3 13fe 6c26 cccc 66c4 1023 468c     .1....&l...f#..F
 23fd214:	3363 3233 4c66 2580 a57e 3000 3fc3 c330     c332fL.%~..0.?0.
 23fd224:	d60c c0f0 4408 1021 4284 0811 3c00 4266     .....D!..B...<fB
 23fd234:	c3c3 c3c3 c3c3 42c3 3c66 3f11 3333 3333     .......Bf<.?3333
 23fd244:	3e30 b031 3078 1c18 1c1c 1818 0810 f807     0>1.x0..........
 23fd254:	663c c3c3 0603 071c c303 66c3 0c3c 7118     <f.........f<..q
 23fd264:	c962 46a3 18fe 6030 7fc0 1020 0808 f307     b..F..0`.. .....
 23fd274:	038c 8001 6cf0 e063 311e 7898 060c 8df3     .....lc..1.x....
 23fd284:	c183 d0e0 636c ffe0 0203 0406 080c 1818     ....lc..........
 23fd294:	1018 3030 313e 78b0 1b3c f818 c1c6 f0e0     ..00>1.x<.......
 23fd2a4:	636c 3ce0 c266 c3c3 67c3 033b c203 3c66     lc.<f....g;...f<
 23fd2b4:	00c0 c030 0000 a064 8100 8ec7 070c 7080     ..0...d........p
 23fd2c4:	010e ff80 0080 f01f 7000 010e 18c0 7138     .........p....8q
 23fd2d4:	80c0 3e00 b031 3078 1818 1838 0c18 0000     ...>1.x0..8.....
 23fd2e4:	8001 f003 0e06 0106 0086 1d66 31bb 18cf     ..........f..1..
 23fd2f4:	98c7 cc63 e631 b311 cc99 86f7 0100 0080     ..c.1...........
 23fd304:	4070 e00f 0006 0ff0 9000 8119 1098 0c83     p@..............
 23fd314:	c23f 6004 0666 30c0 18ff 0333 6c60 830d     ?..`f..0..3.`l..
 23fd324:	c63f c006 0f78 e001 f86f 861f 8119 3ca0     ?...x...o......<
 23fd334:	8001 0630 c000 0d68 1883 f061 18ff 0333     ..0...h...a...3.
 23fd344:	3c60 8007 1ef0 c003 0f78 6003 f0cf e0ff     `<......x..`....
 23fd354:	1830 060c fd03 c080 3060 0f18 fff8 c0c0     0.......`0......
 23fd364:	c0c0 fec0 c0c0 c0c0 c0c0 830f 600e 0366     .............`f.
 23fd374:	0cc0 c100 03fc 36c0 6003 0f73 100f 78c0     .......6.`s....x
 23fd384:	010f 3ce0 8007 feff c003 0f78 e001 063c     ...<......x...<.
 23fd394:	ffff c0ff 0c06 3018 c160 0783 1e8f 8027     .......0`.....'.
 23fd3a4:	d8c0 0c33 0c63 b8c1 073f c330 6318 6006     ..3.c...?.0..c.`
 23fd3b4:	0c6c c0c0 c0c0 c0c0 c0c0 c0c0 c0c0 e0ff     l...............
 23fd3c4:	013f 1ffc fde0 ec05 636f 1379 9ecd f16c     ?.......ocy...l.
 23fd3d4:	8e47 713c e080 0f7c e8c1 873d f198 331e     G.<q..|...=....3
 23fd3e4:	78c3 076f 7ce0 0f0e 8381 0c18 6cc0 e001     .xo..|.......l..
 23fd3f4:	000f 0378 1bc0 9801 600c f8c0 ff00 6c30     ..x......`....0l
 23fd404:	030f f0c0 f36f c000 0c30 0003 00c0 810f     ....o...0.......
 23fd414:	1883 c00c 016c 0fe0 7800 c003 011b 6c98     ....l....x.....l
 23fd424:	c060 00fb ff08 0e8c 6cc0 c006 0c6c 8cff     `........l..l...
 23fd434:	c00e 066c 6cc0 c006 3f70 6c18 030f 1ec0     ..l..l..p?.l....
 23fd444:	f001 000e 3cf0 860d 003f 86ff 0103 c080     .....<..?.......
 23fd454:	3060 0c18 0306 8001 c0c0 0f78 e001 073c     `0........x...<.
 23fd464:	f080 031e 78c0 010f 61b0 c0f0 0d6c 1081     .....x...a..l...
 23fd474:	0c63 0461 cc60 0119 3c60 0007 c160 3081     c.a.`...`<..`..0
 23fd484:	98e1 cc70 6628 2126 3013 98c8 4c6c 3414     ..p.(f&!.0..lL.4
 23fd494:	1a0a 0707 0303 8180 6080 0c63 c130 0f98     .........`c.0...
 23fd4a4:	e000 0006 19f0 9801 c630 600e c060 0636     ........0..``.6.
 23fd4b4:	c330 190c d881 000f 0660 6000 0006 0660     0.......`..`..`.
 23fd4c4:	ff00 60c0 0c30 0306 c001 3060 0618 0003     ...`0.....`0....
 23fd4d4:	c0ff 6dfb dbb6 b66d 84e0 8410 8410 8410     ...m..m.........
 23fd4e4:	8010 b6ed 6ddb dbb6 30e0 a260 d844 80a1     .....m...0`.D...
 23fd4f4:	c0ff 30c6 717e c0b0 f360 0ddb c786 c03d     ...0~q..`.....=.
 23fd504:	60c0 1b30 36ce 070f c183 f0e0 6d7c 3ce0     .`0..6......|m.<
 23fd514:	c366 c0c0 c0c0 66c3 033c 0303 673b c3c3     f......f<...;g..
 23fd524:	c3c3 c3c3 3b67 663c c3c3 c0ff c3c0 3c66     ....g;<f......f<
 23fd534:	6f36 6666 6666 3b60 c367 c3c3 c3c3 67c3     6offff`;g......g
 23fd544:	033b c603 c07c c0c0 e3de c3c3 c3c3 c3c3     ;...|...........
 23fd554:	c3c3 ffc3 c0ff 0330 3333 3333 3333 c0e0     ......0.333333..
 23fd564:	3060 4c18 6346 f061 62ec 9831 306c ffff     `0.LFca..b1.l0..
 23fd574:	c0ff f7de f01c 86c7 313c 8fe1 780c c363     ........<1...xc.
 23fd584:	181e dec0 c3e3 c3c3 c3c3 c3c3 3cc3 c366     .............<f.
 23fd594:	c3c3 c3c3 66c3 de3c b071 3c78 0f1e 8307     .....f<.q.x<....
 23fd5a4:	6fe3 1830 000c 673b c3c3 c3c3 c3c3 3b67     .o0...;g......g;
 23fd5b4:	0303 df03 8c31 1863 00c6 e33e c0c0 3ce0     ....1.c...>....<
 23fd5c4:	c307 7ee3 f666 6666 6766 c3c3 c3c3 c3c3     ...~f.fffg......
 23fd5d4:	c3c3 7bc7 a0c1 cc98 2142 d0b0 1c28 000c     ...{....B!..(...
 23fd5e4:	1ec6 9138 cac4 d366 d016 87a6 381c c6c0     ..8...f......8..
 23fd5f4:	4300 3662 181c 3c1c 6226 c143 9821 42cc     .Cb6...<&bC.!..B
 23fd604:	b061 38d0 0c1c 0306 0301 fe00 300c 86c1     a..8.........0..
 23fd614:	2018 fcc1 6636 6e66 66ce 6666 ff30 ffff     . ..6ffn.fff0...
 23fd624:	c0ff 66c6 6766 6637 6666 61c0 3824          ...ffg7fff.a$8

023fd632 <_ZL21FreeSans12pt7bBitmaps>:
 23fd632:	ffff f0ff cff0 f33c 208a 3006 0331 1818     ......<.. .01...
 23fd642:	ffc7 fcbf 0331 1818 ffc7 fcbf 0131 1818     ....1.......1...
 23fd652:	c6c0 3006 0304 ffe1 6c72 8847 07f1 7e20     ...0....rlG... ~
 23fd662:	f003 0217 473c f188 261b c37f 10e0 0002     ....<G...&......
 23fd672:	0600 c003 7e40 0e0c 8070 18c3 310c e700     ....@~..p....1..
 23fd682:	0730 00e6 403c 0c00 007c e08f c719 1801     0...<@..|.......
 23fd692:	3130 0283 701c fe40 0704 0fc0 7e00 9c03     01...p@......~..
 23fd6a2:	300c c030 01e7 03f8 3e80 cc01 196e 7cb0     .00......>..n..|
 23fd6b2:	f3c0 ce03 9f1f 1ee6 ff1c 08a0 668c 9831     .............f1.
 23fd6c2:	31c6 638c 6308 6108 200c 1882 18c3 18c3     .1.c.c.a. ......
 23fd6d2:	31c6 628c 8831 62c4 1000 5b23 8de3 0091     .1.b1..b..#[....
 23fd6e2:	030c c000 ff30 f0ff 30c0 030c c000 60f5     ....0....0.....`
 23fd6f2:	f0ff 02f0 100c c120 0c02 2010 02c1 100c     ...... .... ....
 23fd702:	c120 1f00 f107 30c7 0f6e f080 031e 78c0      ......0n......x
 23fd712:	010f 3ce0 c10e 719c 1ffc 0800 ffcf 638c     ...<...q.......c
 23fd722:	c618 8c31 1863 0f1f 87f9 7c60 0006 18c0     ..1.c.....`|....
 23fd732:	0107 f0c0 1c78 0006 3080 ff07 e0ff 0f3f     ....x....0....?.
 23fd742:	87f3 6c60 010c 7080 0f7c 1880 8001 073c     ..`l...p|.....<.
 23fd752:	d880 fc73 001f 8001 0e70 c003 1bd8 6106     ..s.....p......a
 23fd762:	218c 338c 7f06 feff 0003 0c60 8001 cf3f     .!.3......`...?.
 23fd772:	80f9 0630 de00 e71f 000e 0ce0 8001 0730     ..0...........0.
 23fd782:	f881 fc73 001f 070f c3f9 7430 8001 c733     ..s.......0t..3.
 23fd792:	f0fe 1fdc e001 063c dcc1 fc71 001f ffff     ......<...q.....
 23fd7a2:	01fc 6000 0218 c000 0630 8001 0430 8001     ...`....0...0...
 23fd7b2:	0630 8001 0030 071f c7f1 6630 c10c 618c     0...0.....0f...a
 23fd7c2:	3ffc 3b8e e001 073c d880 fc31 001f 071f     .?.;..<...1.....
 23fd7d2:	c7f1 6c70 8007 1ef0 6107 fcef 8079 0530     ..pl.....a..y.0.
 23fd7e2:	9881 fc73 001e 00f0 c003 00f0 560f 0000     ..s..........V..
 23fd7f2:	0107 f8e0 0f3c e000 c007 000f 003c 01f0     ....<.......<...
 23fd802:	ffff 00ff 0000 ffff 00ff 000e 0178 07f0     ............x...
 23fd812:	0fc0 7000 0f1e c003 08f0 1f00 ee1f 031b     ...p............
 23fd822:	c0c0 0c30 0306 c081 30e0 030c 0000 0c00     ..0......0......
 23fd832:	0003 fe00 0f00 00fe 3ef0 0007 383c 3000     .........>..<8.0
 23fd842:	e0c1 0f66 d8d9 c361 07c3 1c0f 3c1c 6060     ..f...a......<``
 23fd852:	81f1 c683 1b06 3818 71ee 18e7 f8fd e771     .......8.q....q.
 23fd862:	e0c0 0100 00e0 ff01 01c0 00fc c003 c003     ................
 23fd872:	c003 e007 6006 6006 700e 300c 300c 381c     .....`.`.p.0.0.8
 23fd882:	1818 f81f fc3f 1c30 0c30 0e70 0660 0660     ....?.0.0.p.`.`.
 23fd892:	c7ff 30ff 8019 036c 1b60 d800 ff0c ffc7     ...0..l.`.......
 23fd8a2:	0d30 3c80 e001 000f 0678 f7ff 00fe e007     0..<....x.......
 23fd8b2:	f03f 73e0 6680 6c00 3000 6000 c000 8001     ?..s.f.l.0.`....
 23fd8c2:	0003 0006 0006 006c 03dc 0e1e f81f c00f     ......l.........
 23fd8d2:	83ff 8cff 3007 c00e 001b 007c 03f0 0fc0     .....0....|.....
 23fd8e2:	3c00 f000 c003 001f 036c 1cb0 e3ff 00ff     .<......l.......
 23fd8f2:	ffff c0ff 000c 0cc0 c000 000c efff c0fe     ................
 23fd902:	000c 0cc0 c000 000c ffff ffff ffff 6000     ...............`
 23fd912:	010c 3080 0006 dfff 00fb 0c60 8001 0630     ...0......`...0.
 23fd922:	c000 0018 f007 fc1f 1e3c 0670 0360 00e0     ........<.p.`...
 23fd932:	00c0 00c0 7fc0 7fc0 03c0 03c0 0360 0760     ............`.`.
 23fd942:	0f30 1f3c fb1f e107 1ec0 f000 8007 013c     0.<...........<.
 23fd952:	0fe0 7800 ff03 ffff 07f0 3c80 e001 000f     ...x.......<....
 23fd962:	0378 1ec0 c000 ffff ffff 01f0 c080 3060     x.............`0
 23fd972:	0c18 0306 8001 60c0 1e3c 070f 7fc7 001f     .......`<.......
 23fd982:	3bc0 cc01 300e c370 1c83 e00c 8033 03de     .;...0p.....3...
 23fd992:	0edc 3038 c160 03c3 068c 1c30 3bc0 6000     ..80`.....0..;.`
 23fd9a2:	30c0 030c c000 0c30 0003 30c0 030c c000     .0....0....0....
 23fd9b2:	0c30 0003 ffff e0f0 e007 f007 f00f d00f     0...............
 23fd9c2:	d80f d81b d81b cc1b cc33 cc33 c633 c663     ........3.3.3.c.
 23fd9d2:	c663 c363 c3c3 c3c3 c1c3 e083 001f 07fc     c.c.............
 23fd9e2:	3de0 ee81 300f c379 1ec6 f018 83e7 1d3c     .=...0y.......<.
 23fd9f2:	6fe0 f801 c00f 013e 03c0 0fe0 0ffc 8607     .o....>.........
 23fda02:	c600 3300 1b00 0700 0380 01c0 00e0 00f0     ...3............
 23fda12:	0078 0036 0033 c018 7818 1f3c 03fc 00f8     x.6.3....x<.....
 23fda22:	8fff c0fe 036c 3cc0 c003 073c efff c0fc     ....l..<..<.....
 23fda32:	000c 0cc0 c000 000c 0cc0 0300 0fe0 0ffc     ................
 23fda42:	8607 c600 3300 1b00 0700 0380 01c0 00e0     .....3..........
 23fda52:	00f0 0078 0036 0133 c098 78fc 1f3c 03ff     ..x.6.3....x<...
 23fda62:	80f9 4000 c3ff ccff b003 c006 001b 016c     ...@..........l.
 23fda72:	0cb0 e3ff ccff b003 c006 001b 016c 06b0     ............l...
 23fda82:	1bc0 7000 e00f c37f 9c83 6007 800d 0006     ...p.......`....
 23fda92:	001e 803f c03f 800f c007 000f 003e 0ede     ..?.?.......>...
 23fdaa2:	f03f 803f ffff 06ff 6000 0006 0660 6000     ?.?......`..`..`
 23fdab2:	0006 0660 6000 0006 0660 6000 0006 c060     ..`..`..`..`..`.
 23fdac2:	001e 07f0 3c80 e001 000f 0378 1ec0 f000     .....<....x.....
 23fdad2:	8007 013c 0fe0 ee80 3f0e 7ce0 6000 c006     ..<......?.|.`..
 23fdae2:	c01d 8031 0163 03c7 0606 1c0c 301c 6018     ..1.c........0.`
 23fdaf2:	c031 0073 0066 01dc 01f0 03e0 07c0 e000     1.s.f...........
 23fdb02:	1d30 e080 0776 d881 061e 7c70 c118 e3b0     0...v.....p|....
 23fdb12:	c30c 338c 380c 30c6 1867 98c1 0667 d861     ...3.8.0g...g.a.
 23fdb22:	831d 3c60 800d 3ef0 c003 0f70 c001 0718     ..`<...>..p.....
 23fdb32:	7000 600e e038 e160 c3c0 cc01 f801 e001     .p.`8.`.........
 23fdb42:	8003 8007 001f 0033 03e7 0686 1c0e 700e     ......3........p
 23fdb52:	c00c 601c 7006 300e 381c 1c18 0c38 0e30     ...`.p.0.8..8.0.
 23fdb62:	0670 0360 03c0 01c0 0180 0180 0180 0180     p.`.............
 23fdb72:	0180 0180 0180 ff80 ffff 0ec0 e000 000e     ................
 23fdb82:	0760 7000 0007 0330 3880 8003 0118 1cc0     `..p..0..8......
 23fdb92:	ff00 ffff ffc0 cccc cccc cccc cccc cfcc     ................
 23fdba2:	81f0 0281 0406 1808 2010 4060 8181 0602     ......... `@....
 23fdbb2:	ff04 3333 3333 3333 3333 3f33 0cf0 050e     ..333333333?....
 23fdbc2:	c386 1921 838c 80c1 feff 8ce3 3f30 f807     ..!.........0?..
 23fdbd2:	cce1 000c 1cc0 cf3f c08c 0ccc c7e3 3cef     ......?........<
 23fdbe2:	c070 000c 0cc0 c000 f80c cfdf e00e 037c     p.............|.
 23fdbf2:	3cc0 c003 033c 6fe0 df0e f8cc 0f1f 1be7     .<..<..o........
 23fdc02:	c083 0c30 0003 38c0 1c37 1ffe 0000 0c60     ..0....87.....`.
 23fdc12:	8001 0630 cf3c 8ffb f8e0 010f 3ce0 8007     ..0.<........<..
 23fdc22:	3bf8 3f8f cc63 071f c7f1 3c70 ff07 feff     .;.?c.....p<....
 23fdc32:	c000 0d1c 1fc3 f0e1 d83b 7fc6 63ec c618     ........;....c..
 23fdc42:	8c31 0063 671e c7fd 7cf0 8007 1ef0 c003     1.c..g...|......
 23fdc52:	1d7c 9fc7 e6b1 c000 0e3e c77f c0e0 0c30     |.......>.....0.
 23fdc62:	0003 33c0 fbcd e0c7 3cf0 030f f0c0 0f3c     ...3.....<....<.
 23fdc72:	c003 30f0 3ff0 ffff 33f0 0300 3333 3333     ...0.?...3..3333
 23fdc82:	3333 3f33 c0e0 0318 6000 010c 3083 30c6     333?.....`...0.0
 23fdc92:	1bcc f083 0c77 8e61 e630 c10c 18d8 ffff     ....w.a.0.......
 23fdca2:	ffff cff0 6f1f fcdf fc78 3c18 1e0c 0f06     .....o..x..<....
 23fdcb2:	0703 8381 c1c0 60e0 30f0 1878 0c3c cf18     .......`.0x.<...
 23fdcc2:	ef37 831f f0c0 0f3c c003 3cf0 030f c0c0     7.....<....<....
 23fdcd2:	071f c7f1 7c70 8007 1ef0 c003 1d7c 1fc7     ....p|......|...
 23fdce2:	f0c1 8dcf f0fc 06ee 3cc0 c003 033c 3ec0     .........<..<..>
 23fdcf2:	f007 fcef 8ccf c000 000c 00c0 671e c7fd     .............g..
 23fdd02:	7cf0 8007 1ef0 c003 1d7c 9fc7 e6f1 c000     .|......|.......
 23fdd12:	0318 6000 7fcf c338 300c 0cc3 c030 1f3e     ...`..8..0..0.>.
 23fdd22:	1bee c000 073c 3ef0 f001 1d3e 3efe 6300     ....<..>..>..>.c
 23fdd32:	ff19 8cb1 1863 31c6 c0e7 3cf0 030f f0c0     ....c..1...<....
 23fdd42:	0f3c c003 7ef0 fb3d c03c 66e0 6006 0c67     <....~=.<..f.`g.
 23fdd52:	c330 390c 9881 8119 0ff0 e000 000e c1c1     0..9............
 23fdd62:	e1b0 70d8 2ccc 3666 9b31 cd18 6498 166c     ...p.,f61....dl.
 23fdd72:	0f36 071a 038f 8083 c0c1 ee60 c618 c10c     6.........`.....
 23fdd82:	1cf0 8001 1b78 3003 30c7 0666 6ce0 830d     ....x..0.0f..l..
 23fdd92:	6338 630c 600e 1bcc 6003 073c e000 0318     8c.c.`...`<.....
 23fdda2:	e000 0e78 ff00 f0ff 0c18 0307 c081 3060     ..x...........`0
 23fddb2:	0e18 ff03 c0ff cc19 1863 31c6 8699 c618     ........c..1....
 23fddc2:	8c31 1c63 ff60 ffff ffff c7fc c618 8c31     1.c.`.........1.
 23fddd2:	0c63 3133 638c c618 0073 3e70 e409 031f     c.31.c..s.p>....
 23fdde2:	0080                                        ..

023fdde4 <_ZL23FreeSansBold9pt7bGlyphs>:
 23fdde4:	0000 0000 0005 0001 0000 0d03 0206 00f4     ................
 23fddf4:	0005 0507 0109 00f4 000a 0c0a 000a 00f5     ................
 23fde04:	0019 0f09 010a 00f3 002a 0d10 0010 00f4     ........*.......
 23fde14:	0044 0d0c 010d 00f4 0058 0503 0105 00f4     D.......X.......
 23fde24:	005a 1106 0106 00f4 0067 1106 0006 00f4     Z.......g.......
 23fde34:	0074 0605 0107 00f4 0078 0807 020b 00f9     t.......x.......
 23fde44:	007f 0503 0104 00ff 0081 0205 0006 00fb     ................
 23fde54:	0083 0203 0104 00ff 0084 0d05 0005 00f4     ................
 23fde64:	008d 0d09 010a 00f4 009c 0d05 020a 00f4     ................
 23fde74:	00a5 0d09 010a 00f4 00b4 0d08 010a 00f4     ................
 23fde84:	00c1 0d08 020a 00f4 00ce 0d09 010a 00f4     ................
 23fde94:	00dd 0d09 010a 00f4 00ec 0d09 000a 00f4     ................
 23fdea4:	00fb 0d0a 000a 00f4 010c 0d09 010a 00f4     ................
 23fdeb4:	011b 0903 0104 00f8 011f 0c03 0104 00f8     ................
 23fdec4:	0124 0909 010b 00f8 012f 0609 010b 00fa     $......./.......
 23fded4:	0136 0909 010b 00f8 0141 0d09 010b 00f4     6.......A.......
 23fdee4:	0150 0f10 0012 00f4 016e 0d0c 000d 00f4     P.......n.......
 23fdef4:	0182 0d0b 010d 00f4 0194 0d0c 010d 00f4     ................
 23fdf04:	01a8 0d0c 010d 00f4 01bc 0d09 010c 00f4     ................
 23fdf14:	01cb 0d09 010b 00f4 01da 0d0b 010e 00f4     ................
 23fdf24:	01ec 0d0b 010d 00f4 01fe 0d03 0106 00f4     ................
 23fdf34:	0203 0d08 010a 00f4 0210 0d0c 010d 00f4     ................
 23fdf44:	0224 0d08 010b 00f4 0231 0d0e 0110 00f4     $.......1.......
 23fdf54:	0248 0d0b 010e 00f4 025a 0d0d 010e 00f4     H.......Z.......
 23fdf64:	0270 0d0b 010c 00f4 0282 0e0d 010e 00f4     p...............
 23fdf74:	0299 0d0c 010d 00f4 02ad 0d0b 010c 00f4     ................
 23fdf84:	02bf 0d09 020c 00f4 02ce 0d0b 010d 00f4     ................
 23fdf94:	02e0 0d0c 000c 00f4 02f4 0d11 0011 00f4     ................
 23fdfa4:	0310 0d0c 000c 00f4 0324 0d0b 010c 00f4     ........$.......
 23fdfb4:	0336 0d09 010b 00f4 0345 1104 0106 00f4     6.......E.......
 23fdfc4:	034e 0d05 0005 00f4 0357 1104 0006 00f4     N.......W.......
 23fdfd4:	0360 0808 010b 00f4 0368 010a 000a 0004     `.......h.......
 23fdfe4:	036a 0203 0005 00f4 036b 0a0a 010a 00f7     j.......k.......
 23fdff4:	0378 0d0a 010b 00f4 0389 0a09 010a 00f7     x...............
 23fe004:	0395 0d09 010b 00f4 03a4 0a09 010a 00f7     ................
 23fe014:	03b0 0d05 0106 00f4 03b9 0e09 010b 00f7     ................
 23fe024:	03c9 0d09 010b 00f4 03d8 0d03 0105 00f4     ................
 23fe034:	03dd 1104 0005 00f4 03e6 0d09 010a 00f4     ................
 23fe044:	03f5 0d03 0105 00f4 03fa 0a0e 0110 00f7     ................
 23fe054:	040c 0a09 010b 00f7 0418 0a0a 010b 00f7     ................
 23fe064:	0425 0e0a 010b 00f7 0437 0e09 010b 00f7     %.......7.......
 23fe074:	0447 0a06 0107 00f7 044f 0a09 010a 00f7     G.......O.......
 23fe084:	045b 0c05 0106 00f5 0463 0a09 010b 00f7     [.......c.......
 23fe094:	046f 0a0a 000a 00f7 047c 0a0e 000e 00f7     o.......|.......
 23fe0a4:	048e 0a0a 000a 00f7 049b 0e0a 000a 00f7     ................
 23fe0b4:	04ad 0a08 0109 00f7 04b7 1104 0107 00f4     ................
 23fe0c4:	04c0 1101 0205 00f4 04c3 1104 0207 00f4     ................
 23fe0d4:	04cc 0208 0009 00fc                         ........

023fe0dc <_ZL24FreeSansBold12pt7bGlyphs>:
 23fe0dc:	0000 0000 0007 0001 0000 1104 0308 00f0     ................
 23fe0ec:	0009 060a 010b 00ef 0011 100d 000d 00f1     ................
 23fe0fc:	002b 140d 000d 00ef 004c 1113 0115 00f0     +.......L.......
 23fe10c:	0075 1110 0111 00f0 0097 0604 0106 00ef     u...............
 23fe11c:	009a 1606 0108 00ef 00ab 1606 0108 00ef     ................
 23fe12c:	00bc 0807 0109 00ef 00c3 0b0b 020e 00f6     ................
 23fe13c:	00d3 0704 0106 00fe 00d7 0306 0108 00f9     ................
 23fe14c:	00da 0304 0106 00fe 00dc 1106 0007 00f0     ................
 23fe15c:	00e9 110c 010d 00f0 0103 1107 030e 00f0     ................
 23fe16c:	0112 110c 010d 00f0 012c 110c 010d 00f0     ........,.......
 23fe17c:	0146 110b 010d 00f0 015e 110c 010d 00f0     F.......^.......
 23fe18c:	0178 110c 010d 00f0 0192 110b 010d 00f0     x...............
 23fe19c:	01aa 110c 010d 00f0 01c4 110c 010d 00f0     ................
 23fe1ac:	01de 0c04 0106 00f5 01e4 1004 0106 00f5     ................
 23fe1bc:	01ec 0c0c 010e 00f5 01fe 090c 010e 00f7     ................
 23fe1cc:	020c 0c0c 010e 00f5 021e 120c 020f 00ef     ................
 23fe1dc:	0239 1515 0117 00ef 0271 1210 0011 00ef     9.......q.......
 23fe1ec:	0295 120e 0211 00ef 02b5 1210 0111 00ef     ................
 23fe1fc:	02d9 120f 0211 00ef 02fb 120d 0210 00ef     ................
 23fe20c:	0319 120c 020f 00ef 0334 1210 0112 00ef     ........4.......
 23fe21c:	0358 120e 0212 00ef 0378 1204 0207 00ef     X.......x.......
 23fe22c:	0381 120b 010e 00ef 039a 1210 0211 00ef     ................
 23fe23c:	03be 120b 020f 00ef 03d7 1211 0215 00ef     ................
 23fe24c:	03fe 120f 0212 00ef 0420 1211 0113 00ef     ........ .......
 23fe25c:	0447 120e 0210 00ef 0467 1311 0113 00ef     G.......g.......
 23fe26c:	0490 1210 0211 00ef 04b4 120f 0110 00ef     ................
 23fe27c:	04d6 120c 020f 00ef 04f1 120e 0212 00ef     ................
 23fe28c:	0511 120f 0010 00ef 0533 1217 0017 00ef     ........3.......
 23fe29c:	0567 120f 0110 00ef 0589 1210 000f 00ef     g...............
 23fe2ac:	05ad 120d 010f 00ef 05cb 1706 0208 00ef     ................
 23fe2bc:	05dd 1107 0007 00f0 05ec 1706 0008 00ef     ................
 23fe2cc:	05fe 0b0c 010e 00f0 060f 020f ff0d 0004     ................
 23fe2dc:	0613 0304 0006 00ef 0615 0d0d 010e 00f4     ................
 23fe2ec:	062b 120d 020f 00ef 0649 0d0c 010d 00f4     +.......I.......
 23fe2fc:	065d 120d 010f 00ef 067b 0d0d 010e 00f4     ].......{.......
 23fe30c:	0691 1207 0108 00ef 06a1 120d 010f 00f4     ................
 23fe31c:	06bf 120c 020e 00ef 06da 1204 0207 00ef     ................
 23fe32c:	06e3 1706 0007 00ef 06f5 120c 020e 00ef     ................
 23fe33c:	0710 1204 0206 00ef 0719 0d13 0215 00f4     ................
 23fe34c:	0738 0d0c 020f 00f4 074c 0d0d 010f 00f4     8.......L.......
 23fe35c:	0762 120d 020f 00f4 0780 120d 010f 00f4     b...............
 23fe36c:	079e 0d08 0209 00f4 07ab 0d0c 010d 00f4     ................
 23fe37c:	07bf 0f06 0108 00f2 07cb 0d0c 020f 00f4     ................
 23fe38c:	07df 0d0d 000d 00f4 07f5 0d12 0013 00f4     ................
 23fe39c:	0813 0d0d 000d 00f4 0829 120d 000d 00f4     ........).......
 23fe3ac:	0847 0d0a 010c 00f4 0858 1706 0109 00ef     G.......X.......
 23fe3bc:	086a 1602 0207 00ef 0870 1706 0309 00ef     j.......p.......
 23fe3cc:	0882 050c 000c 00f9                         ........

023fe3d4 <_ZL24FreeSansBold9pt7bBitmaps>:
 23fe3d4:	ffff 48fe ef7e bfdf 4074 8619 fd67 33ff     ...H~...t@..g..3
 23fe3e4:	c30c fe33 99ff 6186 1090 1f1f ffde 833f     ..3....a......?.
 23fe3f4:	fcc0 091f fefc f1f7 40e0 1038 307c 20c6     .........@8.|0. 
 23fe404:	40c6 40c6 807c 9c39 3e01 6303 6302 6304     .@.@|.9..>.c.c.c
 23fe414:	3e0c 1c08 010e 3bf8 b883 013f 3ee0 7667     .>.....;..?..>gv
 23fe424:	eee3 f31c fec7 703f f4ff 6318 731c 388e     ......?p...c.s.8
 23fe434:	8ee3 7018 06c3 6108 0e83 7138 1cc7 c671     ...p...a..8q..q.
 23fe444:	e338 4018 3e21 2845 7038 ffe7 0ee7 fc1c     8..@!>E(8p......
 23fe454:	ff9c fcc0 c408 1023 6284 8811 3e00 9d3f     ......#..b...>?.
 23fe464:	7edc 1f3f c78f f1e3 cfdd e0e3 ff08 9cf3     .~?.............
 23fe474:	39e7 73ce 3e80 b83f 70fc 1c38 1c1c 1c1c     .9.s.>?..p8.....
 23fe484:	0f1c f8f7 7f3c e7e7 0c07 070e e707 7ee7     ....<..........~
 23fe494:	0e3c 1e1e 2e2e 4e4e ff8e 0eff 0e0e 3f7f     <.....NN.......?
 23fe4a4:	1890 e70d 9efb 0307 f181 e7ff 3ec0 9c3f     .............>?.
 23fe4b4:	0efc fbe7 c7df f1e3 efdd e0e3 ffff e0c0     ................
 23fe4c4:	60e0 3070 1c38 0e0c 0307 3f80 ee1f 873f     .`p08......?..?.
 23fe4d4:	cfe3 fbc7 e1cf 7ff8 fe3d 003f 3f3e dcbd     ........=.?.>?..
 23fe4e4:	3f7e de1f 3bff f981 e3cf fcc0 0700 fce0     ~?...;..........
 23fe4f4:	0700 e0e5 8300 dfc7 070c f880 011f ff80     ................
 23fe504:	c0ff 0f00 fcff 7000 033f 38e0 f17d 80e0     .......p?..8}...
 23fe514:	3e00 b83f 70fc 1c38 1c1c 0e1c 0300 c081     .>?..p8.........
 23fe524:	f003 fc0f 0e1e 0238 e970 1963 19c2 11c6     ......8.p.c.....
 23fe534:	33c6 32c6 fe63 dc73 003c f81f f007 0007     .3.2c.s.<.......
 23fe544:	0ff0 f880 811d 199c 8cc3 e73f 70fe 0766     ..........?..pf.
 23fe554:	70e0 9fff 83fb 7ef0 ff0f f73f e006 1ffc     .p.....~..?.....
 23fe564:	ff83 f8ef 831f 78fe 07e7 0ee0 e000 000e     .......x........
 23fe574:	07e0 7807 fef3 801f 8fff e0fc 0eee 7ee0     ...x...........~
 23fe584:	e007 077e 7ee0 e00e fcef 80ff ffff 1cf8     ..~..~..........
 23fe594:	070e fdfb e0c0 3870 ff1f fff8 f8ff 0e1c     ......p8........
 23fe5a4:	fb07 c0fd 70e0 1c38 000e 870f e3f9 3eb8     .....p8........>
 23fe5b4:	c001 ff38 e01f 0d6e 9fe3 f2d0 fce0 831f     ..8...n.........
 23fe5c4:	7ef0 ff0f ffff e007 1ffc f083 0e7e ffff     .~..........~...
 23fe5d4:	ffff 07fe 0707 0707 0707 e707 e7e7 3c7e     ..............~<
 23fe5e4:	eee0 e31c 708e 0fee fec0 700f 0ee7 e138     .....p.....p..8.
 23fe5f4:	0ece e0e0 e0e0 e0e0 e0e0 e0e0 e0e0 ffe0     ................
 23fe604:	f8ff e17f 87ff 1ffe 7fec 7eb3 fbcd ec37     ...........~..7.
 23fe614:	9edf 797e e7f9 9ce7 fee0 c31f 7ffc d9cf     ..~y............
 23fe624:	bffb e737 7ffc f087 0efe 810f 1eff e03c     ..7...........<.
 23fe634:	03ee 1ff0 fc80 e007 833b 3c9e c07f 00f8     ........;..<....
 23fe644:	9fff 87fb 7ef0 c30f f7ff e0fc 031c 7080     .....~.........p
 23fe654:	000e 810f 1eff e03c 03ee 1ff0 fc80 e107     ......<.........
 23fe664:	8fbb 3c9e e07f 80fb ff08 fc8f eee0 e00e     ...<............
 23fe674:	0eee cfff e0fc 0eee eee0 e00e 3ff0 fb0f     .............?..
 23fe684:	f0c7 017e 1ffc 3ff0 fc00 c71d e1bf fff8     ..~....?........
 23fe694:	c7ff 8103 e0c0 3870 0e1c 0307 c081 fce0     ......p8........
 23fe6a4:	831f 7ef0 c10f 3ff8 e007 1ffc bfc7 f0e1     ...~...?........
 23fe6b4:	6760 700e 0ce3 c330 199c 9881 801f 0ff0     `g.p..0.........
 23fe6c4:	f000 0006 c361 e1b8 709c 3cce 36e3 9b71     ....a....p.<.6q.
 23fe6d4:	ed30 3698 1b7c 0f3c 071e 018f 80c3 80e1     0..6|.<.........
 23fe6e4:	e770 398e f8c1 801f 07f0 f000 811f 399c     p..9...........9
 23fe6f4:	0ec7 e070 fce0 c739 c318 36b8 c007 0e70     ..p...9....6..p.
 23fe704:	c001 0738 e000 ffff e0c0 f0e0 7070 7870     ..8.........pppx
 23fe714:	3838 ff1f fff8 eeee eeee eeee f0ef 1086     88..............
 23fe724:	1086 3084 3084 ff80 7777 7777 7777 f07f     ...0.0..wwwwww..
 23fe734:	1c18 3e3c 6636 c363 c0ff 3fcc ee1f 0e38     ..<>6fc....?..8.
 23fe744:	9e3f 3bee ff9e e09e 38e0 030e ffbc eebc     ?..;.....8......
 23fe754:	871f f8e1 3b7f effe 1f00 dc3f 0e7c 0307     .....;....?.|...
 23fe764:	e380 8f7f 0300 c081 77e7 bffb c78f f1e3     .........w......
 23fe774:	effd b8f3 3f3e dc9c ff3f 81ff 7fc3 008f     ....>?..?.......
 23fe784:	dd3b b9ff 73ce e79c 3b00 ddbf 7efc 1f3f     ;....s...;...~?.
 23fe794:	ef8f 9d7f fcc0 f177 e0f0 3870 ef1d 9fff     ......w...p8....
 23fe7a4:	c78f f1e3 fcf8 387e 7ffc ffff 77fe 7707     ......~8.....w.w
 23fe7b4:	7777 7777 e07f 70e0 1c38 777e f173 fef8     wwww...p8.~ws...
 23fe7c4:	3977 6edc ff38 ffff feff 7bef feff f839     w9.n8......{..9.
 23fe7d4:	e3e7 8e9f 397e e7f8 9fe3 708e 7fef fcf8     ....~9.....p....
 23fe7e4:	3f7e 8f1f e3c7 c0f1 1f1e 3be7 e187 7ef8     ~?.........;...~
 23fe7f4:	ce1d 877f ef80 ef3f 873b f8e1 1f7e ffce     ......?.;...~...
 23fe804:	cebb 8003 38e0 3b00 fdbf 7efc 1f3f ef8f     .....8.;...~?...
 23fe814:	9d7f e0c0 3870 ef1c 38ff 8ee3 e338 3e80     ....p8...8..8..>
 23fe824:	b83f 0ffc fcc3 c73f 1fff 7300 f7bf ce39     ?.....?....s..9.
 23fe834:	9e73 e370 f8f1 7efc 1f3f c78f bdff e1c0     s.p....~?.......
 23fe844:	6798 cc39 0d33 e0c3 1e78 0007 1de3 669e     .g9.3...x......f
 23fe854:	9979 77e6 d2b8 cfc3 3c0f f03c 8073 9c73     y..w.....<<.s.s.
 23fe864:	f0e3 1e78 8107 fce0 9c73 e1e0 67d8 ce39     ..x.....s....g9.
 23fe874:	0e33 e0c3 1e78 0003 70c0 0e38 fe00 0efe     3...x....p8.....
 23fe884:	381c 7038 ffe0 37ff 6666 e66e 6666 3067     .88p...7ffn.ffg0
 23fe894:	ffff ce80 6666 7667 6666 c06e 8e71          ....ffgvffn.q.

023fe8a2 <_ZL25FreeSansBold12pt7bBitmaps>:
 23fe8a2:	ffff ffff 6676 ff60 f3f0 fffc cf3f 9861     ....vf`.....?.a.
 23fe8b2:	0e60 7370 1883 f7ff bfff 73fc 1883 c718     `.ps.......s....
 23fe8c2:	bfff fffd 18e3 c139 0ece 0270 7e00 f80f     ......9...p..~..
 23fe8d2:	e77f b9af c83d 400f 003f 00ff 05fc 27ff     ....=..@?......'
 23fe8e2:	3ff9 efeb 3ffe 7ce0 8000 0004 063c c10f     .?...?.|....<...
 23fe8f2:	fc81 7330 0c8c 8131 60ce cc1f f303 3c00     ..0s..1..`.....<
 23fe902:	8067 f819 7f02 ce80 1170 0686 c139 f887     g.......p...9...
 23fe912:	7e30 070c 0780 1f80 3fc0 3ce0 3ce0 3ee0     0~.......?.<.<.>
 23fe922:	0fe0 07c0 3f00 7f8c f1cc f0fc f0f8 f878     .....?........x.
 23fe932:	7ff8 3ffc 1fde ff8e 66ff 730c 718e 38c7     ...?.....f.s.q.8
 23fe942:	8ee3 e338 1c8e c371 188e c370 1c87 e338     ..8...q...p...8.
 23fe952:	1c87 c771 711c 38ce 1ce7 8063 2310 f35f     ..q..q.8..c..#_.
 23fe962:	1b87 0e14 c001 0738 ff0f ffff 70f8 010e     ......8......p..
 23fe972:	38c0 ff00 36f3 ffc0 c0ff f0ff 300c 1886     .8...6.......0..
 23fe982:	0c61 c230 6118 3084 1fc0 fc83 e77f f09e     a.0..a.0........
 23fe992:	0fff fff0 f00f 0fff fff0 f00f 9ef7 e37f     ................
 23fe9a2:	0ffc 0600 7f1c e3ff 8fc7 3c1e f178 c7e3     ...........<x...
 23fe9b2:	1e8f 831f 7ffc 9fef fff0 000f 0ff0 e001     ................
 23fe9c2:	0f3c e081 033c 7f80 fff7 f07f 071f fffc     <...<...........
 23fe9d2:	1eef e0f1 031e 78c0 c007 001e 0ff0 fff0     .......x........
 23fe9e2:	7f1f fce7 801f c003 1ff8 e107 27bc f38c     .............'..
 23fe9f2:	631e 7bd8 ffff feff 8007 1ef0 c003 e73f     .c.{..........?.
 23fea02:	7ffe 00e7 0660 7ff8 fecf f0f1 000f 0ff0     ....`...........
 23fea12:	fe00 ff1e fce7 003f 830f 7ffc 9fe7 0ff0     ......?.........
 23fea22:	ff78 fecf fff9 f00f 0fff f7f0 7f9f fce3     x...............
 23fea32:	800f ffff ffff e080 071c e001 0f38 c001     ............8...
 23fea42:	0f78 e001 0f38 e001 003c 030f 7ffc 9ec7     x...8...<.......
 23fea52:	e770 390e f8c1 c73f f09e 0fff fff0 7f9f     p..9..?.........
 23fea62:	fce3 801f 031f 7ffc 9eef eff0 f00f 0fff     ................
 23fea72:	f7f9 3fff eff1 ef00 7f1e fce7 001f f0ff     ...?............
 23fea82:	0000 ff0f f0ff 0000 ff0f 6c11 1000 0307     ...........l....
 23fea92:	fcf1 0f7e e080 c00f 803f 007f 03f0 ffff     ..~.....?.......
 23feaa2:	ffff 00f0 0000 ff00 ffff f0ff 0e00 fc00     ................
 23feab2:	f007 e00f 001f 7ff0 8f1f f0e0 0008 071f     ................
 23feac2:	7ffc 9fef fff0 000f 0ff0 e001 073c f080     ............<...
 23fead2:	000e 00e0 f000 000f 00f0 00fe fc1f c003     ................
 23feae2:	38f0 c301 0780 3d18 8799 6cec c371 06c3     .8.....=...lq...
 23feaf2:	181e f130 8781 188c 607c 63c3 3b8e df8f     ..0.....|`.c.;..
 23feb02:	3c8c 70f0 0100 00c0 8007 1f80 00fe c01f     .<.p............
 23feb12:	0300 03e0 03e0 07e0 07f0 07f0 0f70 0e78     ............p.x.
 23feb22:	0e78 1e38 1c3c 3f3c 3ffc 3ffe 78fe 780e     x.8.<.<?.?.?.x.x
 23feb32:	700f f00f ff07 ffc3 ffcf 3e3c 7bf0 efc1     .p........<>.{..
 23feb42:	bf0f fffc ffe3 07cf 0fbc 3ff0 ffc0 ff07     ...........?....
 23feb52:	fffe fffb 0780 1fe0 3ff8 7cfc 783e f81f     .........?.|>x..
 23feb62:	f00f f000 f000 f000 f000 f000 f800 780f     ...............x
 23feb72:	7c1f 3f3e 1ffe 07fc fff0 ffe1 ffe3 83e7     .|>?............
 23feb82:	03ef 07de 07fc 0ff8 1ff0 3fe0 7fc0 ff80     ...........?....
 23feb92:	fe03 bc07 7f1f fffc fff1 ff80 fff7 fdbf     ................
 23feba2:	0fe0 7800 c003 fc1f e7ff 3cff e001 000f     ...x.......<....
 23febb2:	0378 1fc0 ffff ffff ffc0 ffff ffff f000     x...............
 23febc2:	000f 0ff0 fffe feef 0ff0 f000 000f 0ff0     ................
 23febd2:	f000 000f f003 fc0f fe3f 1f3e 0778 0078     ........?.>.x.x.
 23febe2:	00f0 00f0 7ff0 7ff0 7ff0 07f0 0778 0f7c     ............x.|.
 23febf2:	1f3e fb3f fb0f e303 3ff0 ffc0 fc03 f00f     >.?......?......
 23fec02:	c03f 03ff ffff ffff ffff fc03 f00f c03f     ?.............?.
 23fec12:	03ff 0ffc 3ff0 f0c0 ffff ffff ffff ffff     .....?..........
 23fec22:	01ff 3ce0 8007 1ef0 c003 0f78 e001 073c     ...<......x...<.
 23fec32:	fff8 e31f 7bfc 7ffe e0c3 3ef0 3cf0 78f0     .....{.....>.<.x
 23fec42:	f0f0 e0f1 c0f3 80f7 00ff 80ff 80ff c0fb     ................
 23fec52:	e0f1 f0f0 f0f0 78f0 3cf0 3ef0 1ef0 1ef0     .......x.<.>....
 23fec62:	c003 0f78 e001 073c f080 031e 78c0 010f     ..x...<......x..
 23fec72:	3ce0 ff07 ffff f8fc fe1f ff0f ff0f ff87     .<..............
 23fec82:	ffc3 ffe1 fff9 effc 77fe 3bfb ddfd fcfe     .........w.;....
 23fec92:	7eff 9f7f cf3f e79f f38f f8c7 c0e3 1ff0     .~..?...........
 23feca2:	3ff0 7ff0 ffe0 ffe1 fdc3 fbc7 f38f e79f     .?..............
 23fecb2:	c73f 8f7f 0fff 1ffe 1ffc 1ff8 3ff0 3ce0     ?............?.<
 23fecc2:	e003 fc0f ff0f c787 80c7 c0f3 c07b e01f     ............{...
 23fecd2:	f00f f807 fc03 fe01 f700 f380 78c0 f8f0     .............x..
 23fece2:	fc7f fc1f f803 ff00 ffe3 ffef 1fbc 3ff0     ...............?
 23fecf2:	ffc0 fc03 ff1f fffb fecf 003c 03f0 0fc0     ..........<.....
 23fed02:	3c00 f000 c003 0300 0fe0 0ffc 87ff c7c7     .<..............
 23fed12:	f380 7bc0 1fc0 0fe0 07f0 03f8 01fc 04fe     ...{............
 23fed22:	87f7 c3f3 f0f8 7ff8 1ffc 83ff 80f1 0000     ................
 23fed32:	f8ff fcff fcff 3ef0 1ef0 1ef0 1ef0 3cf0     .......>.......<
 23fed42:	f8ff f0ff f8ff 3cf0 3cf0 3cf0 3cf0 3cf0     .......<.<.<.<.<
 23fed52:	3cf0 1ff0 c00f e17f e7ff efc3 de03 3c00     .<.............<
 23fed62:	7f00 7f00 3ff0 0ff8 01f8 01f0 03fe 0fde     .....?..........
 23fed72:	febf f83f c01f ffff ffff f0f0 000f 0ff0     ..?.............
 23fed82:	f000 000f 0ff0 f000 000f 0ff0 f000 000f     ................
 23fed92:	f0f0 c03f 03ff 0ffc 3ff0 ffc0 fc03 f00f     ..?......?......
 23feda2:	c03f 03ff 0ffc 3ff0 f7c0 9f87 3ffe 3ff0     ?......?.....?.?
 23fedb2:	7000 f00e e03d c079 81e3 87c7 0e87 1c0e     .p..=.y.........
 23fedc2:	781e e01c c039 8073 007e 01fc 01f8 03e0     .x..9.s.~.......
 23fedd2:	07c0 7080 1c38 f0e0 e179 f3f0 e1c3 87e3     ...p8...y.......
 23fede2:	87c3 870f 3b0e 1e9e 3877 ee1c 3970 e0cc     .....;..w8..p9..
 23fedf2:	9973 6ec0 003f 7efc f801 03fc f8f0 e103     s..n?..~........
 23fee02:	07e0 c083 070f f080 f03c e1f9 e7e1 cf83     ........<.......
 23fee12:	fc03 f003 e007 8007 000f 003f 01ff 07fe     ..........?.....
 23fee22:	0f9e 3c1e f83c e03d f078 781e 781e 3c3c     ...<<.=.x..x.x<<
 23fee32:	3c3c 1e78 0e78 0f70 07f0 07e0 03e0 03c0     <<x.x.p.........
 23fee42:	03c0 03c0 03c0 03c0 03c0 03c0 ffc0 ffff     ................
 23fee52:	feff f001 000f 0ff0 f800 8007 0778 7c80     ............x..|
 23fee62:	c003 033c 1fc0 ffff ffff ffc0 fcff cff3     ..<.............
 23fee72:	f33c 3ccf cff3 f33c 3ccf ffff c1c0 0381     <..<..<..<......
 23fee82:	0406 180c 3010 4060 81c1 0603 ffff 3ccf     .....0`@.......<
 23fee92:	cff3 f33c 3ccf cff3 f33c ffcf c0ff 000f     ..<..<..<.......
 23feea2:	0ff0 f801 831b 399c 0cc3 e770 e00e ff70     .......9..p...p.
 23feeb2:	ffff e6fc 1f30 ff83 fd1f e0e1 030f fff9     ....0...........
 23feec2:	1edf f7f0 bf8f fffc cfe3 f080 8007 013c     ..............<.
 23feed2:	0fe0 7b00 ffc3 fe9f f7f8 fc83 e01f 07ff     ...{............
 23feee2:	3ff8 dfe3 fffe bee7 0f00 fe83 f77f f08f     .?..............
 23feef2:	007f 0ff0 f000 8f77 f37f 0ffe 0080 0378     ......w.......x.
 23fef02:	1ec0 f000 8f07 ffbc ffef ff78 fc83 e01f     ..........x.....
 23fef12:	07ff 3df8 efe3 3fff fbf8 1fc0 fe81 f91f     ...=...?........
 23fef22:	cff1 7f07 fffb 00de 03f0 9fc3 7ffc f8c0     ................
 23fef32:	3e00 fbfd 9fc7 3cbf f178 c7e3 1e8f 783c     .>.....<x.....<x
 23fef42:	1ef0 fb79 fedf fff1 f807 c13f 0ffe 7ff0     ..y.......?.....
 23fef52:	dfc7 7ffe f7f1 3c80 ff01 7f1e fef0 f000     .......<........
 23fef62:	000f 0ff0 f000 7c0f efff f9ff 0fff fff0     .......|........
 23fef72:	f00f 0fff fff0 f00f 0fff f0ff ff0f ffff     ................
 23fef82:	ffff 3cff c0f3 f300 3ccf cff3 f33c 3ccf     ...<.....<..<..<
 23fef92:	cff3 ffff f080 000f 0ff0 f000 0f0f eff1     ................
 23fefa2:	f73c f08f 0fff fff8 3c8f cff1 f01e 0fef     <........<......
 23fefb2:	ffff ffff ffff ffff f7ff 9f8f fbfb ffff     ................
 23fefc2:	f8fc 1eff e31f fcc3 7f78 0f8f e1f1 3cfe     ........x......<
 23fefd2:	c73f f887 fff0 1e1e cff7 fffe 9fff fff0     ?...............
 23fefe2:	f00f 0fff fff0 f00f 0fff f0f0 810f 1fff     ................
 23feff2:	f1fc 07ef 3ff8 fec1 f00f c77b fc9f c07f     .....?....{.....
 23ff002:	00f8 c7f7 3fff f1fd 07ef 3ff8 fec1 f00f     .....?.....?....
 23ff012:	c77f fdbf cfff 7878 c003 001e 07f0 0080     ......xx........
 23ff022:	790f dfff f1fe 07ff 3ff8 fec1 f00f c77b     .y.......?....{.
 23ff032:	fedf f17f 80f7 013c 0fe0 7800 c003 f7f3     ......<....x....
 23ff042:	f8ff f0f0 f0f0 f0f0 f0f0 1ff0 fc87 efff     ................
 23ff052:	f80f f00f e07f 01ff 0fff e7ff 1ffe 7980     ...............y
 23ff062:	bfe7 e7fd 799e 9ee7 f37d f0c0 0fff fff0     .....y..}.......
 23ff072:	f00f 0fff fff0 f00f 1fff f7ff 3eff f0f0     .............>..
 23ff082:	837b 1c9e e3f1 1c8e 7770 b883 c01d 037e     {.......pw....~.
 23ff092:	1fe0 7000 f000 dce1 7778 3d1f cfe7 b379     ...p....xw.=..y.
 23ff0a2:	6c8e bbe3 ee38 1ffc 073f c1c7 f0f1 787c     .l..8...?.....|x
 23ff0b2:	1e0e 7800 c7f3 788f 813b 07fc 1ec0 f001     ...x...x;.......
 23ff0c2:	c01f 0fef f178 87e7 f000 837b 1c9e e371     ....x.....{...q.
 23ff0d2:	1e8e 7370 b883 c01f 037e 0fe0 7000 8003     ..ps....~....p..
 23ff0e2:	073c 3ec0 e001 ff00 ffff 0ffc 8307 e0c1     <..>............
 23ff0f2:	78f0 0f3c ffff c0ff f31c 38ce 8ee3 e338     .x<........8..8.
 23ff102:	f0bc 8ee3 e338 3c8e c0f1 ffff ffff f0ff     ....8..<........
 23ff112:	8fe3 711c 1cc7 c771 3d0f 1cc7 c771 f31c     ...q..q..=..q...
 23ff122:	00ce 0f78 cfe0 7f30 e001 6572 6461 6552     ..x...0...readRe
 23ff132:	6967 7473 7265 203a 6e65 5464 6172 736e     gister: endTrans
 23ff142:	696d 7373 6f69 206e 6572 7574 6e72 6465     mission returned
 23ff152:	203a 7200 6165 5264 6765 7369 6574 3a72     : .readRegister:
 23ff162:	7220 7165 6575 7473 7246 6d6f 7220 7465      requestFrom ret
 23ff172:	7275 656e 3a64 0020 7277 7469 5265 6765     urned: .writeReg
 23ff182:	7369 6574 3a72 6520 646e 7254 6e61 6d73     ister: endTransm
 23ff192:	7369 6973 6e6f 7220 7465 7275 656e 3a64     ission returned:
 23ff1a2:	0020 6573 4274 7079 7361 4e73 6e65 6261      .setBypassNenab
 23ff1b2:	656c 203a 7277 7469 5265 6765 7369 6574     le: writeRegiste
 23ff1c2:	2072 3228 2946 7220 7465 7275 656e 3a64     r (2F) returned:
 23ff1d2:	0020 6573 4274 7079 7361 4e73 6e65 6261      .setBypassNenab
 23ff1e2:	656c 203a 6572 6461 6552 6967 7473 7265     le: readRegister
 23ff1f2:	2820 4631 2029 6572 7574 6e72 6465 203a      (1F) returned: 
 23ff202:	7300 7465 7942 6170 7373 654e 616e 6c62     .setBypassNenabl
 23ff212:	3a65 6220 7079 7361 5f73 5f6e 6e65 6920     e: bypass_n_en i
 23ff222:	2073 7563 7272 6e65 6c74 3a79 0020 6573     s currently: .se
 23ff232:	4274 7079 7361 4e73 6e65 6261 656c 203a     tBypassNenable: 
 23ff242:	7277 7469 5265 6765 7369 6574 2072 3128     writeRegister (1
 23ff252:	2946 7220 7465 7275 656e 3a64 0020 6573     F) returned: .se
 23ff262:	4274 7079 7361 4e73 6e65 6261 656c 203a     tBypassNenable: 
 23ff272:	6572 6461 6552 6967 7473 7265 2820 4630     readRegister (0F
 23ff282:	2029 6572 7574 6e72 6465 203a 7300 7465     ) returned: .set
 23ff292:	7942 6170 7373 654e 616e 6c62 3a65 6520     BypassNenable: e
 23ff2a2:	7065 6f72 206d 7962 6170 7373 6e5f 655f     eprom bypass_n_e
 23ff2b2:	206e 7369 6320 7275 6572 746e 796c 203a     n is currently: 
 23ff2c2:	7300 7465 7942 6170 7373 654e 616e 6c62     .setBypassNenabl
 23ff2d2:	3a65 7720 6972 6574 6552 6967 7473 7265     e: writeRegister
 23ff2e2:	2820 4630 2029 6572 7574 6e72 6465 203a      (0F) returned: 
 23ff2f2:	6700 7465 7543 7272 6e65 4374 616f 7372     .getCurrentCoars
 23ff302:	4765 6961 3a6e 7220 6165 5264 6765 7369     eGain: readRegis
 23ff312:	6574 2072 3128 2942 7220 7465 7275 656e     ter (1B) returne
 23ff322:	3a64 0020 6567 4374 7275 6572 746e 6f43     d: .getCurrentCo
 23ff332:	7261 6573 6147 6e69 203a 6873 6461 776f     arseGain: shadow
 23ff342:	6720 6961 206e 6573 7474 6e69 2067 7369      gain setting is
 23ff352:	6320 7275 6572 746e 796c 203a 4100 5343      currently: .ACS
 23ff362:	3733 3038 3a30 623a 6765 6e69 203a 6166     37800::begin: fa
 23ff372:	6c69 6465 2021 6567 4374 7275 6572 746e     iled! getCurrent
 23ff382:	6f43 7261 6573 6147 6e69 7220 7465 7275     CoarseGain retur
 23ff392:	656e 3a64 0020 4341 3353 3837 3030 3a3a     ned: .ACS37800::
 23ff3a2:	6562 6967 3a6e 7320 6375 6563 7373 2021     begin: success! 
 23ff3b2:	635f 7275 6572 746e 6f43 7261 6573 6147     _currentCoarseGa
 23ff3c2:	6e69 6920 3a73 0020 6572 6461 4d52 3a53     in is: .readRMS:
 23ff3d2:	7220 6165 5264 6765 7369 6574 2072 3228      readRegister (2
 23ff3e2:	2930 7220 7465 7275 656e 3a64 0020 6572     0) returned: .re
 23ff3f2:	6461 4d52 3a53 7620 6d72 3a73 3020 0078     adRMS: vrms: 0x.
 23ff402:	6572 6461 4d52 3a53 7620 6c6f 7374 2820     readRMS: volts (
 23ff412:	534c 2c42 6220 6665 726f 2065 6f63 7272     LSB, before corr
 23ff422:	6365 6974 6e6f 2029 7369 0020 6572 6461     ection) is .read
 23ff432:	4d52 3a53 7620 6c6f 7374 2820 2c56 6120     RMS: volts (V, a
 23ff442:	7466 7265 6320 726f 6572 7463 6f69 296e     fter correction)
 23ff452:	6920 2073 7200 6165 5264 534d 203a 7269      is .readRMS: ir
 23ff462:	736d 203a 7830 7200 6165 5264 534d 203a     ms: 0x.readRMS: 
 23ff472:	6d61 7370 2820 534c 2c42 6220 6665 726f     amps (LSB, befor
 23ff482:	2065 6f63 7272 6365 6974 6e6f 2029 7369     e correction) is
 23ff492:	0020 6572 6461 4d52 3a53 6120 706d 2073      .readRMS: amps 
 23ff4a2:	4128 202c 6661 6574 2072 6f63 7272 6365     (A, after correc
 23ff4b2:	6974 6e6f 2029 7369 0020 6572 6461 6f50     tion) is .readPo
 23ff4c2:	6577 4172 7463 7669 5265 6165 7463 7669     werActiveReactiv
 23ff4d2:	3a65 7220 6165 5264 6765 7369 6574 2072     e: readRegister 
 23ff4e2:	3228 2931 7220 7465 7275 656e 3a64 0020     (21) returned: .
 23ff4f2:	6572 6461 6f50 6577 4172 7463 7669 5265     readPowerActiveR
 23ff502:	6165 7463 7669 3a65 7020 6361 6974 6576     eactive: pactive
 23ff512:	203a 7830 7200 6165 5064 776f 7265 6341     : 0x.readPowerAc
 23ff522:	6974 6576 6552 6361 6974 6576 203a 6170     tiveReactive: pa
 23ff532:	7463 7669 2065 4c28 4253 202c 6562 6f66     ctive (LSB, befo
 23ff542:	6572 6320 726f 6572 7463 6f69 296e 6920     re correction) i
 23ff552:	2073 7200 6165 5064 776f 7265 6341 6974     s .readPowerActi
 23ff562:	6576 6552 6361 6974 6576 203a 6170 7463     veReactive: pact
 23ff572:	7669 2065 5728 202c 6661 6574 2072 6f63     ive (W, after co
 23ff582:	7272 6365 6974 6e6f 2029 7369 0020 6572     rrection) is .re
 23ff592:	6461 6f50 6577 4172 7463 7669 5265 6165     adPowerActiveRea
 23ff5a2:	7463 7669 3a65 7020 6d69 6761 203a 7830     ctive: pimag: 0x
 23ff5b2:	7200 6165 5064 776f 7265 6341 6974 6576     .readPowerActive
 23ff5c2:	6552 6361 6974 6576 203a 6970 616d 2067     Reactive: pimag 
 23ff5d2:	4c28 4253 202c 6562 6f66 6572 6320 726f     (LSB, before cor
 23ff5e2:	6572 7463 6f69 296e 6920 2073 7200 6165     rection) is .rea
 23ff5f2:	5064 776f 7265 6341 6974 6576 6552 6361     dPowerActiveReac
 23ff602:	6974 6576 203a 6970 616d 2067 5628 5241     tive: pimag (VAR
 23ff612:	202c 6661 6574 2072 6f63 7272 6365 6974     , after correcti
 23ff622:	6e6f 2029 7369 0020 6572 6461 6f50 6577     on) is .readPowe
 23ff632:	4672 6361 6f74 3a72 7220 6165 5264 6765     rFactor: readReg
 23ff642:	7369 6574 2072 3228 2932 7220 7465 7275     ister (22) retur
 23ff652:	656e 3a64 0020 6572 6461 6f50 6577 4672     ned: .readPowerF
 23ff662:	6361 6f74 3a72 7020 7061 6170 6572 746e     actor: papparent
 23ff672:	203a 7830 7200 6165 5064 776f 7265 6146     : 0x.readPowerFa
 23ff682:	7463 726f 203a 6170 7070 7261 6e65 2074     ctor: papparent 
 23ff692:	4c28 4253 202c 6562 6f66 6572 6320 726f     (LSB, before cor
 23ff6a2:	6572 7463 6f69 296e 6920 2073 7200 6165     rection) is .rea
 23ff6b2:	5064 776f 7265 6146 7463 726f 203a 6170     dPowerFactor: pa
 23ff6c2:	7070 7261 6e65 2074 5628 2c41 6120 7466     pparent (VA, aft
 23ff6d2:	7265 6320 726f 6572 7463 6f69 296e 6920     er correction) i
 23ff6e2:	2073 7200 6165 5064 776f 7265 6146 7463     s .readPowerFact
 23ff6f2:	726f 203a 6670 6361 6f74 3a72 3020 0078     or: pfactor: 0x.
 23ff702:	6572 6461 6f50 6577 4672 6361 6f74 3a72     readPowerFactor:
 23ff712:	7020 6166 7463 726f 6920 2073 0000           pfactor is ..

023ff720 <_ZL22ACS37800_CRS_SNS_GAINS>:
 23ff720:	0000 3f80 0000 4000 0000 4040 0000 4060     ...?...@..@@..`@
 23ff730:	0000 4080 0000 4090 0000 40b0 0000 4100     ...@...@...@...A

023ff740 <_ZL4font>:
 23ff740:	0000 0000 3e00 4f5b 3e5b 6b3e 6b4f 1c3e     .....>[O[>>kOk>.
 23ff750:	7c3e 1c3e 3c18 3c7e 1c18 7d57 1c57 5e1c     >|>..<~<..W}W..^
 23ff760:	5e7f 001c 3c18 0018 e7ff e7c3 00ff 2418     .^...<.........$
 23ff770:	0018 e7ff e7db 30ff 3a48 0e06 2926 2979     .......0H:..&)y)
 23ff780:	4026 057f 0705 7f40 2505 5a3f e73c 5a3c     &@....@..%?Z<.<Z
 23ff790:	3e7f 1c1c 0808 1c1c 7f3e 2214 227f 5f14     .>......>.."."._
 23ff7a0:	005f 5f5f 0906 017f 007f 8966 6a95 6060     _.__......f..j``
 23ff7b0:	6060 9460 ffa2 94a2 0408 047e 1008 7e20     ```.......~... ~
 23ff7c0:	1020 0808 1c2a 0808 2a1c 0808 101e 1010      ...*....*......
 23ff7d0:	0c10 0c1e 0c1e 3830 383e 0630 3e0e 060e     ......08>80..>..
 23ff7e0:	0000 0000 0000 5f00 0000 0700 0700 1400     ......._........
 23ff7f0:	147f 147f 2a24 2a7f 2312 0813 6264 4936     ....$*.*.#..db6I
 23ff800:	2056 0050 0708 0003 1c00 4122 0000 2241     V P......."A..A"
 23ff810:	001c 1c2a 1c7f 082a 3e08 0808 8000 3070     ..*...*..>....p0
 23ff820:	0800 0808 0808 0000 6060 2000 0810 0204     ........``. ....
 23ff830:	513e 4549 003e 7f42 0040 4972 4949 2146     >QIE>.B.@.rIIIF!
 23ff840:	4941 334d 1418 7f12 2710 4545 3945 4a3c     AIM3.....'EEE9<J
 23ff850:	4949 4131 1121 0709 4936 4949 4636 4949     II1A!...6III6FII
 23ff860:	1e29 0000 0014 0000 3440 0000 0800 2214     ).......@4....."
 23ff870:	1441 1414 1414 4100 1422 0208 5901 0609     A......A"....Y..
 23ff880:	413e 595d 7c4e 1112 7c12 497f 4949 3e36     >A]YN|...|.III6>
 23ff890:	4141 2241 417f 4141 7f3e 4949 4149 097f     AAA".AAA>.IIIA..
 23ff8a0:	0909 3e01 4141 7351 087f 0808 007f 7f41     ...>AAQs......A.
 23ff8b0:	0041 4020 3f41 7f01 1408 4122 407f 4040     A. @A?...."A.@@@
 23ff8c0:	7f40 1c02 7f02 047f 1008 3e7f 4141 3e41     @..........>AAA>
 23ff8d0:	097f 0909 3e06 5141 5e21 097f 2919 2646     .....>AQ!^...)F&
 23ff8e0:	4949 3249 0103 017f 3f03 4040 3f40 201f     III2.....?@@@?. 
 23ff8f0:	2040 3f1f 3840 3f40 1463 1408 0363 7804     @ .?@8@?c...c..x
 23ff900:	0304 5961 4d49 0043 417f 4141 0402 1008     ..aYIMC..AAA....
 23ff910:	0020 4141 7f41 0204 0201 4004 4040 4040      .AAA......@@@@@
 23ff920:	0300 0807 2000 5454 4078 287f 4444 3838     ..... TTx@.(DD88
 23ff930:	4444 2844 4438 2844 387f 5454 1854 0800     DDD(8DD(.8TTT...
 23ff940:	097e 1802 a4a4 789c 087f 0404 0078 7d44     ~......x....x.D}
 23ff950:	0040 4020 3d40 7f00 2810 0044 4100 407f     @. @@=...(D..A.@
 23ff960:	7c00 7804 7804 087c 0404 3878 4444 3844     .|.x.x|...x8DDD8
 23ff970:	18fc 2424 1818 2424 fc18 087c 0404 4808     ..$$..$$..|....H
 23ff980:	5454 2454 0404 443f 3c24 4040 7c20 201c     TTT$..?D$<@@ |. 
 23ff990:	2040 3c1c 3040 3c40 2844 2810 4c44 9090     @ .<@0@<D(.(DL..
 23ff9a0:	7c90 6444 4c54 0044 3608 0041 0000 0077     .|DdTLD..6A...w.
 23ff9b0:	0000 3641 0008 0102 0402 3c02 2326 3c26     ..A6.......<&#&<
 23ff9c0:	a11e 61a1 3a12 4040 7a20 5438 5554 2159     ...a.:@@ z8TTUY!
 23ff9d0:	5555 4179 5422 7854 2142 5455 4078 5420     UUyA"TTxB!UTx@ T
 23ff9e0:	7955 0c40 521e 1272 5539 5555 3959 5454     Uy@..Rr.9UUUY9TT
 23ff9f0:	5954 5539 5454 0058 4500 417c 0200 7d45     TY9UTTX..E|A..E}
 23ffa00:	0042 4501 407c 127d 1211 f07d 2528 f028     B..E|@}...}.(%(.
 23ffa10:	547c 4555 2000 5454 547c 0a7c 7f09 3249     |TUE. TT|T|...I2
 23ffa20:	4949 3249 443a 4444 323a 484a 3048 413a     III2:DDD:2JHH0:A
 23ffa30:	2141 3a7a 4042 7820 9d00 a0a0 3d7d 4242     A!z:B@ x....}=BB
 23ffa40:	3d42 403d 4040 3c3d ff24 2424 7e48 4349     B==@@@=<$.$$H~IC
 23ffa50:	2b66 fc2f 2b2f 09ff f629 c020 7e88 0309     f+/./+..). ..~..
 23ffa60:	5420 7954 0041 4400 417d 4830 4a48 3832      TTyA..D}A0HHJ28
 23ffa70:	4040 7a22 7a00 0a0a 7d72 190d 7d31 2926     @@"z.z..r}..1}&)
 23ffa80:	2f29 2628 2929 2629 4830 404d 3820 0808     )/(&)))&0HM@ 8..
 23ffa90:	0808 0808 0808 2f38 c810 baac 102f 3428     ......8/..../.(4
 23ffaa0:	00fa 7b00 0000 1408 142a 2222 2a14 0814     ...{....*."".*..
 23ffab0:	0055 0055 aa55 aa55 aa55 55ff 55ff 00ff     U.U.U.U.U..U.U..
 23ffac0:	0000 00ff 1010 ff10 1400 1414 00ff 1010     ................
 23ffad0:	00ff 10ff f010 f010 1414 fc14 1400 f714     ................
 23ffae0:	ff00 0000 00ff 14ff f414 fc04 1414 1017     ................
 23ffaf0:	101f 1f10 1f10 1414 1f14 1000 1010 00f0     ................
 23ffb00:	0000 1f00 1010 1010 101f 1010 f010 0010     ................
 23ffb10:	0000 10ff 1010 1010 1010 1010 10ff 0000     ................
 23ffb20:	ff00 0014 ff00 ff00 0000 101f 0017 fc00     ................
 23ffb30:	f404 1414 1017 1417 f414 f404 0000 00ff     ................
 23ffb40:	14f7 1414 1414 1414 00f7 14f7 1414 1417     ................
 23ffb50:	1010 101f 141f 1414 14f4 1010 10f0 00f0     ................
 23ffb60:	1f00 1f10 0000 1f00 0014 0000 14fc 0000     ................
 23ffb70:	10f0 10f0 ff10 ff10 1414 ff14 1014 1010     ................
 23ffb80:	001f 0000 f000 ff10 ffff ffff f0f0 f0f0     ................
 23ffb90:	fff0 ffff 0000 0000 ff00 0fff 0f0f 0f0f     ................
 23ffba0:	4438 3844 fc44 4a4a 344a 027e 0602 0206     8DD8D.JJJ4~.....
 23ffbb0:	027e 027e 5563 4149 3863 4444 043c 7e40     ~.~.cUIAc8DD<.@~
 23ffbc0:	1e20 0620 7e02 0202 a599 a5e7 1c99 492a      . ..~........*I
 23ffbd0:	1c2a 724c 7201 304c 4d4a 304d 4830 4878     *.Lr.rL0JMM00HxH
 23ffbe0:	bc30 5a62 3d46 493e 4949 7e00 0101 7e01     0.bZF=>III.~...~
 23ffbf0:	2a2a 2a2a 442a 5f44 4444 5140 444a 4040     *****DD_DD@QJD@@
 23ffc00:	4a44 4051 0000 01ff e003 ff80 0000 0808     DJQ@............
 23ffc10:	6b6b 3608 3612 3624 0f06 0f09 0006 1800     kk.6.6$6........
 23ffc20:	0018 0000 1010 3000 ff40 0101 1f00 0101     .......0@.......
 23ffc30:	001e 1d19 1217 3c00 3c3c 003c 0000 0000     .......<<<<.....

023ffc40 <_ZTV12Adafruit_GFX>:
	...
 23ffc50:	a72d 023f be55 023f 9285 023f a1dd 023f     -.?.U.?...?...?.
 23ffc60:	a1df 023f a211 023f a1ed 023f a1ff 023f     ..?...?...?...?.
 23ffc70:	a11f 023f a1dd 023f a407 023f a405 023f     ..?...?...?...?.
 23ffc80:	a229 023f a267 023f a2a1 023f a2e7 023f     ).?.g.?...?...?.
 23ffc90:	a303 023f a385 023f                         ..?...?.

023ffc98 <_ZTV15Adafruit_SPITFT>:
	...
 23ffca8:	a72d 023f be55 023f afd1 023f aa67 023f     -.?.U.?...?.g.?.
 23ffcb8:	af93 023f ab87 023f ae3f 023f ade7 023f     ..?...?.?.?...?.
 23ffcc8:	a11f 023f aa93 023f a407 023f af0d 023f     ..?...?...?...?.
 23ffcd8:	ad6b 023f aceb 023f ac27 023f a2e7 023f     k.?...?.'.?...?.
 23ffce8:	a303 023f a385 023f 9285 023f 9285 023f     ..?...?...?...?.

023ffcf8 <_ZL11cmd_240x240>:
 23ffcf8:	0109 9680 8011 3aff 5581 360a 0801 042a     .......:.U.6..*.
 23ffd08:	0000 f000 042b 0000 f000 8021 130a 0a80     ....+.....!.....
 23ffd18:	8029 00ff                                   )...

023ffd1c <_ZTV15Adafruit_ST7789>:
	...
 23ffd24:	b097 023f b0ff 023f a72d 023f be55 023f     ..?...?.-.?.U.?.
 23ffd34:	afd1 023f aa67 023f af93 023f ab87 023f     ..?.g.?...?...?.
 23ffd44:	ae3f 023f ade7 023f a11f 023f aa93 023f     ?.?...?...?...?.
 23ffd54:	b099 023f af0d 023f ad6b 023f aceb 023f     ..?...?.k.?...?.
 23ffd64:	ac27 023f a2e7 023f a303 023f a385 023f     '.?...?...?...?.
 23ffd74:	b1c9 023f b1e9 023f                         ..?...?.

023ffd7c <_ZTV15Adafruit_ST77xx>:
	...
 23ffd84:	b155 023f b23b 023f a72d 023f be55 023f     U.?.;.?.-.?.U.?.
 23ffd94:	afd1 023f aa67 023f af93 023f ab87 023f     ..?.g.?...?...?.
 23ffda4:	ae3f 023f ade7 023f a11f 023f aa93 023f     ?.?...?...?...?.
 23ffdb4:	b157 023f af0d 023f ad6b 023f aceb 023f     W.?...?.k.?...?.
 23ffdc4:	ac27 023f a2e7 023f a303 023f a385 023f     '.?...?...?...?.
 23ffdd4:	b1c9 023f b1e9 023f                         ..?...?.

023ffddc <_ZTVN5spark13EthernetClassE>:
	...
 23ffde4:	bac3 023f bab9 023f baaf 023f baa5 023f     ..?...?...?...?.
 23ffdf4:	ba99 023f ba8d 023f bd31 023f bd39 023f     ..?...?.1.?.9.?.
 23ffe04:	ba81 023f ba79 023f ba6f 023f ba65 023f     ..?.y.?.o.?.e.?.
 23ffe14:	bd69 023f                                   i.?.

023ffe18 <_ZTV7TwoWire>:
	...
 23ffe20:	bae1 023f bb2b 023f bb03 023f bae3 023f     ..?.+.?...?...?.
 23ffe30:	bb0b 023f bb13 023f bb1b 023f bb23 023f     ..?...?...?.#.?.

023ffe40 <_ZTV9IPAddress>:
	...
 23ffe48:	bbff 023f bbef 023f bbf1 023f 7061 0070     ..?...?...?.app.

023ffe58 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe60:	bcf1 023f bcfb 023f bd05 023f bd0f 023f     ..?...?...?...?.
 23ffe70:	bd19 023f bd25 023f bd31 023f bd39 023f     ..?.%.?.1.?.9.?.
 23ffe80:	bd41 023f bd4d 023f bd55 023f bd5f 023f     A.?.M.?.U.?._.?.
 23ffe90:	bd69 023f 616e 006e 6e69 0066 766f 0066     i.?.nan.inf.ovf.

023ffea0 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
 23ffea0:	0800 1810 2820 3830 5925 252d 2d6d 6425     .... (08%Y-%m-%d
 23ffeb0:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 23ffec0:	6d69 0065                                   ime.

023ffec4 <_ZTV11USARTSerial>:
	...
 23ffecc:	c2b5 023f c321 023f c2f9 023f be55 023f     ..?.!.?...?.U.?.
 23ffedc:	c2c9 023f c2e5 023f c2d7 023f c2f3 023f     ..?...?...?...?.
 23ffeec:	c2b7 023f c2bb 023f                         ..?...?.

023ffef4 <_ZTV9USBSerial>:
	...
 23ffefc:	c365 023f c3cd 023f c3a3 023f be55 023f     e.?...?...?.U.?.
 23fff0c:	c395 023f c367 023f c377 023f c3c7 023f     ..?.g.?.w.?...?.
 23fff1c:	c387 023f c35f 023f                         ..?._.?.

023fff24 <_ZTVN5spark9WiFiClassE>:
	...
 23fff2c:	c4c3 023f c4b9 023f c4af 023f c465 023f     ..?...?...?.e.?.
 23fff3c:	c4a3 023f c497 023f bd31 023f bd39 023f     ..?...?.1.?.9.?.
 23fff4c:	c48b 023f c483 023f c479 023f c46f 023f     ..?...?.y.?.o.?.
 23fff5c:	bd69 023f                                   i.?.

023fff60 <_ZSt7nothrow>:
 23fff60:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff70:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff80:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff90:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fffa0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffb0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffc0:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffd1 <link_const_data_end>:
 23fffd1:	00          	.byte	0x00
	...

023fffd4 <link_constructors_location>:
 23fffd4:	023f9921 	.word	0x023f9921
 23fffd8:	023fba55 	.word	0x023fba55
 23fffdc:	023fbacd 	.word	0x023fbacd
 23fffe0:	023fbce1 	.word	0x023fbce1
 23fffe4:	023fbe41 	.word	0x023fbe41
 23fffe8:	023fc10d 	.word	0x023fc10d
 23fffec:	023fc27d 	.word	0x023fc27d
 23ffff0:	023fc2a1 	.word	0x023fc2a1
 23ffff4:	023fc4cd 	.word	0x023fc4cd

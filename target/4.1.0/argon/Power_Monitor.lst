
/Users/friedl/Desktop/Projects/Power_Monitor/target/4.1.0/argon/Power_Monitor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002d20  000b4020  000b4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b6d40  000b6d40  00006d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000b6d64  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  2003e63c  000b6d68  0001e63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000148  2003e6a8  2003e6a8  0002e6a8  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000b6dd4  000b6dd4  00026dd4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000b6dfc  000b6dfc  00026dfc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   000e63dc  00000000  00000000  00026e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 0000e985  00000000  00000000  0010d1dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_loc    0002ff99  00000000  00000000  0011bb61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000022c8  00000000  00000000  0014bafa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00008aa8  00000000  00000000  0014ddc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034147  00000000  00000000  0015686a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032a5d  00000000  00000000  0018a9b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0012f505  00000000  00000000  001bd40e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000062f8  00000000  00000000  002ec914  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4020:	4809      	ldr	r0, [pc, #36]	; (b4048 <module_user_pre_init+0x28>)
   b4022:	490a      	ldr	r1, [pc, #40]	; (b404c <module_user_pre_init+0x2c>)
   b4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4028:	d005      	beq.n	b4036 <module_user_pre_init+0x16>
   b402a:	4a09      	ldr	r2, [pc, #36]	; (b4050 <module_user_pre_init+0x30>)
   b402c:	4282      	cmp	r2, r0
   b402e:	d002      	beq.n	b4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b4030:	1a12      	subs	r2, r2, r0
   b4032:	f002 f943 	bl	b62bc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4036:	4807      	ldr	r0, [pc, #28]	; (b4054 <module_user_pre_init+0x34>)
   b4038:	4a07      	ldr	r2, [pc, #28]	; (b4058 <module_user_pre_init+0x38>)
   b403a:	2100      	movs	r1, #0
   b403c:	1a12      	subs	r2, r2, r0
   b403e:	f002 f94b 	bl	b62d8 <memset>
    return &link_global_data_start;
}
   b4042:	4801      	ldr	r0, [pc, #4]	; (b4048 <module_user_pre_init+0x28>)
   b4044:	bd08      	pop	{r3, pc}
   b4046:	bf00      	nop
   b4048:	2003e63c 	.word	0x2003e63c
   b404c:	000b6d68 	.word	0x000b6d68
   b4050:	2003e6a8 	.word	0x2003e6a8
   b4054:	2003e6a8 	.word	0x2003e6a8
   b4058:	2003e7ed 	.word	0x2003e7ed

000b405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405e:	4e07      	ldr	r6, [pc, #28]	; (b407c <module_user_init+0x20>)
   b4060:	4c07      	ldr	r4, [pc, #28]	; (b4080 <module_user_init+0x24>)
    module_user_init_hook();
   b4062:	f001 fb6d 	bl	b5740 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4066:	1ba4      	subs	r4, r4, r6
   b4068:	08a4      	lsrs	r4, r4, #2
   b406a:	2500      	movs	r5, #0
   b406c:	42ac      	cmp	r4, r5
   b406e:	d100      	bne.n	b4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b4072:	f856 3b04 	ldr.w	r3, [r6], #4
   b4076:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4078:	3501      	adds	r5, #1
   b407a:	e7f7      	b.n	b406c <module_user_init+0x10>
   b407c:	000b6d14 	.word	0x000b6d14
   b4080:	000b6d38 	.word	0x000b6d38

000b4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4084:	f000 b814 	b.w	b40b0 <setup>

000b4088 <module_user_loop>:
}

void module_user_loop() {
   b4088:	b508      	push	{r3, lr}
    loop();
   b408a:	f000 f843 	bl	b4114 <loop>
    _post_loop();
}
   b408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b4092:	f001 bb0d 	b.w	b56b0 <_post_loop>

000b4096 <_Znaj>:
   b4096:	f000 be37 	b.w	b4d08 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 be3d 	b.w	b4d18 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:
#include <Wire.h>

ACS37800 mySensor; //Create an object of the ACS37800 class

void setup()
{
   b40b0:	b508      	push	{r3, lr}
  Serial.begin(115200);
   b40b2:	f001 fa77 	bl	b55a4 <_Z16_fetch_usbserialv>
   b40b6:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   b40ba:	f001 fa67 	bl	b558c <_ZN9USBSerial5beginEl>
  Serial.println(F("ACS37800 Example"));
   b40be:	f001 fa71 	bl	b55a4 <_Z16_fetch_usbserialv>
   b40c2:	4910      	ldr	r1, [pc, #64]	; (b4104 <setup+0x54>)
   b40c4:	f001 f889 	bl	b51da <_ZN5Print7printlnEPK19__FlashStringHelper>

  Wire.begin();
   b40c8:	f001 fb88 	bl	b57dc <_Z19__fetch_global_Wirev>
   b40cc:	f000 fed0 	bl	b4e70 <_ZN7TwoWire5beginEv>

  //mySensor.enableDebugging(); // Uncomment this line to print useful debug messages to Serial

  //Initialize sensor using default I2C address
  if (mySensor.begin() == false)
   b40d0:	f001 fb84 	bl	b57dc <_Z19__fetch_global_Wirev>
   b40d4:	2160      	movs	r1, #96	; 0x60
   b40d6:	4602      	mov	r2, r0
   b40d8:	480b      	ldr	r0, [pc, #44]	; (b4108 <setup+0x58>)
   b40da:	f000 fa4f 	bl	b457c <_ZN8ACS378005beginEhR7TwoWire>
   b40de:	b928      	cbnz	r0, b40ec <setup+0x3c>
  {
    Serial.print(F("ACS37800 not detected. Check connections and I2C address. Freezing..."));
   b40e0:	f001 fa60 	bl	b55a4 <_Z16_fetch_usbserialv>
   b40e4:	4909      	ldr	r1, [pc, #36]	; (b410c <setup+0x5c>)
   b40e6:	f001 f85e 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    while (1)
   b40ea:	e7fe      	b.n	b40ea <setup+0x3a>

  // From the ACS37800 datasheet:
  // CONFIGURING THE DEVICE FOR AC APPLICATIONS : DYNAMIC CALCULATION OF N
  // Set bypass_n_en = 0 (default). This setting enables the device to
  // dynamically calculate N based off the voltage zero crossings.
  mySensor.setBypassNenable(false, true); // Disable bypass_n in shadow memory and eeprom
   b40ec:	4806      	ldr	r0, [pc, #24]	; (b4108 <setup+0x58>)
   b40ee:	2201      	movs	r2, #1
   b40f0:	2100      	movs	r1, #0
   b40f2:	f000 f979 	bl	b43e8 <_ZN8ACS3780016setBypassNenableEbb>

  // We need to connect the LO pin to the 'low' side of the AC source.
  // So we need to set the divider resistance to 4M Ohms (instead of 2M).
  mySensor.setDividerRes(4000000); // Comment this line if you are using GND to measure the 'low' side of the AC voltage
}
   b40f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mySensor.setDividerRes(4000000); // Comment this line if you are using GND to measure the 'low' side of the AC voltage
   b40fa:	ed9f 0a05 	vldr	s0, [pc, #20]	; b4110 <setup+0x60>
   b40fe:	4802      	ldr	r0, [pc, #8]	; (b4108 <setup+0x58>)
   b4100:	f000 bc82 	b.w	b4a08 <_ZN8ACS3780013setDividerResEf>
   b4104:	000b6434 	.word	0x000b6434
   b4108:	2003e6a8 	.word	0x2003e6a8
   b410c:	000b6445 	.word	0x000b6445
   b4110:	4a742400 	.word	0x4a742400

000b4114 <loop>:

void loop()
{
   b4114:	b510      	push	{r4, lr}
   b4116:	b08a      	sub	sp, #40	; 0x28
  float volts = 0.0;
  float amps = 0.0;

  mySensor.readRMS(&volts, &amps); // Read the RMS voltage and current
   b4118:	aa05      	add	r2, sp, #20
  float volts = 0.0;
   b411a:	2400      	movs	r4, #0
  mySensor.readRMS(&volts, &amps); // Read the RMS voltage and current
   b411c:	a904      	add	r1, sp, #16
   b411e:	4841      	ldr	r0, [pc, #260]	; (b4224 <loop+0x110>)
  float volts = 0.0;
   b4120:	9404      	str	r4, [sp, #16]
  float amps = 0.0;
   b4122:	9405      	str	r4, [sp, #20]
  mySensor.readRMS(&volts, &amps); // Read the RMS voltage and current
   b4124:	f000 fa52 	bl	b45cc <_ZN8ACS378007readRMSEPfS0_>
  Serial.print(F("Volts: "));
   b4128:	f001 fa3c 	bl	b55a4 <_Z16_fetch_usbserialv>
   b412c:	493e      	ldr	r1, [pc, #248]	; (b4228 <loop+0x114>)
   b412e:	f001 f83a 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(volts, 2);
   b4132:	f001 fa37 	bl	b55a4 <_Z16_fetch_usbserialv>
   b4136:	ed9d 0a04 	vldr	s0, [sp, #16]
   b413a:	2102      	movs	r1, #2
   b413c:	f001 f936 	bl	b53ac <_ZN5Print5printEfi>
  Serial.print(F(" Amps: "));
   b4140:	f001 fa30 	bl	b55a4 <_Z16_fetch_usbserialv>
   b4144:	4939      	ldr	r1, [pc, #228]	; (b422c <loop+0x118>)
   b4146:	f001 f82e 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(amps, 2);
   b414a:	f001 fa2b 	bl	b55a4 <_Z16_fetch_usbserialv>
   b414e:	ed9d 0a05 	vldr	s0, [sp, #20]
   b4152:	2102      	movs	r1, #2
   b4154:	f001 f944 	bl	b53e0 <_ZN5Print7printlnEfi>

  float pactive = 0.0;
  float preactive = 0.0;
  
  mySensor.readPowerActiveReactive(&pactive, &preactive); // Read the active and reactive power
   b4158:	aa07      	add	r2, sp, #28
   b415a:	a906      	add	r1, sp, #24
   b415c:	4831      	ldr	r0, [pc, #196]	; (b4224 <loop+0x110>)
  float pactive = 0.0;
   b415e:	9406      	str	r4, [sp, #24]
  float preactive = 0.0;
   b4160:	9407      	str	r4, [sp, #28]
  mySensor.readPowerActiveReactive(&pactive, &preactive); // Read the active and reactive power
   b4162:	f000 fad5 	bl	b4710 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_>
  Serial.print(F("Power: Active (W): "));
   b4166:	f001 fa1d 	bl	b55a4 <_Z16_fetch_usbserialv>
   b416a:	4931      	ldr	r1, [pc, #196]	; (b4230 <loop+0x11c>)
   b416c:	f001 f81b 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(pactive, 2);
   b4170:	f001 fa18 	bl	b55a4 <_Z16_fetch_usbserialv>
   b4174:	ed9d 0a06 	vldr	s0, [sp, #24]
   b4178:	2102      	movs	r1, #2
   b417a:	f001 f917 	bl	b53ac <_ZN5Print5printEfi>
  Serial.print(F(" Reactive (VAR): "));
   b417e:	f001 fa11 	bl	b55a4 <_Z16_fetch_usbserialv>
   b4182:	492c      	ldr	r1, [pc, #176]	; (b4234 <loop+0x120>)
   b4184:	f001 f80f 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.println(preactive, 2);
   b4188:	f001 fa0c 	bl	b55a4 <_Z16_fetch_usbserialv>
   b418c:	ed9d 0a07 	vldr	s0, [sp, #28]
   b4190:	2102      	movs	r1, #2
   b4192:	f001 f925 	bl	b53e0 <_ZN5Print7printlnEfi>
  
  float papparent = 0.0;
  float pfactor = 0.0;
  bool posangle = 0;
   b4196:	2300      	movs	r3, #0
   b4198:	f88d 300e 	strb.w	r3, [sp, #14]
  bool pospf = 0;
   b419c:	f88d 300f 	strb.w	r3, [sp, #15]
  
  mySensor.readPowerFactor(&papparent, &pfactor, &posangle, &pospf); // Read the apparent power and the power factor
   b41a0:	f10d 030f 	add.w	r3, sp, #15
   b41a4:	aa09      	add	r2, sp, #36	; 0x24
   b41a6:	a908      	add	r1, sp, #32
   b41a8:	9300      	str	r3, [sp, #0]
   b41aa:	481e      	ldr	r0, [pc, #120]	; (b4224 <loop+0x110>)
  float papparent = 0.0;
   b41ac:	9408      	str	r4, [sp, #32]
  mySensor.readPowerFactor(&papparent, &pfactor, &posangle, &pospf); // Read the apparent power and the power factor
   b41ae:	f10d 030e 	add.w	r3, sp, #14
  float pfactor = 0.0;
   b41b2:	9409      	str	r4, [sp, #36]	; 0x24
  mySensor.readPowerFactor(&papparent, &pfactor, &posangle, &pospf); // Read the apparent power and the power factor
   b41b4:	f000 fb7c 	bl	b48b0 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_>
  Serial.print(F("Power: Apparent (VA): "));
   b41b8:	f001 f9f4 	bl	b55a4 <_Z16_fetch_usbserialv>
   b41bc:	491e      	ldr	r1, [pc, #120]	; (b4238 <loop+0x124>)
   b41be:	f000 fff2 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(papparent, 2);
   b41c2:	f001 f9ef 	bl	b55a4 <_Z16_fetch_usbserialv>
   b41c6:	ed9d 0a08 	vldr	s0, [sp, #32]
   b41ca:	2102      	movs	r1, #2
   b41cc:	f001 f8ee 	bl	b53ac <_ZN5Print5printEfi>
  Serial.print(F(" Power Factor: "));
   b41d0:	f001 f9e8 	bl	b55a4 <_Z16_fetch_usbserialv>
   b41d4:	4919      	ldr	r1, [pc, #100]	; (b423c <loop+0x128>)
   b41d6:	f000 ffe6 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
  Serial.print(pfactor, 2);
   b41da:	f001 f9e3 	bl	b55a4 <_Z16_fetch_usbserialv>
   b41de:	ed9d 0a09 	vldr	s0, [sp, #36]	; 0x24
   b41e2:	2102      	movs	r1, #2
   b41e4:	f001 f8e2 	bl	b53ac <_ZN5Print5printEfi>
  if (posangle)
   b41e8:	f89d 300e 	ldrb.w	r3, [sp, #14]
   b41ec:	b18b      	cbz	r3, b4212 <loop+0xfe>
    Serial.print(F(" Lagging"));
   b41ee:	f001 f9d9 	bl	b55a4 <_Z16_fetch_usbserialv>
   b41f2:	4913      	ldr	r1, [pc, #76]	; (b4240 <loop+0x12c>)
  else
    Serial.print(F(" Leading"));
   b41f4:	f000 ffd7 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
  if (pospf)
   b41f8:	f89d 300f 	ldrb.w	r3, [sp, #15]
   b41fc:	b16b      	cbz	r3, b421a <loop+0x106>
    Serial.println(F(" Consumed"));
   b41fe:	f001 f9d1 	bl	b55a4 <_Z16_fetch_usbserialv>
   b4202:	4910      	ldr	r1, [pc, #64]	; (b4244 <loop+0x130>)
  else
    Serial.println(F(" Generated"));
   b4204:	f000 ffe9 	bl	b51da <_ZN5Print7printlnEPK19__FlashStringHelper>
  
  delay(250);
   b4208:	20fa      	movs	r0, #250	; 0xfa
   b420a:	f000 fd9d 	bl	b4d48 <delay>
}
   b420e:	b00a      	add	sp, #40	; 0x28
   b4210:	bd10      	pop	{r4, pc}
    Serial.print(F(" Leading"));
   b4212:	f001 f9c7 	bl	b55a4 <_Z16_fetch_usbserialv>
   b4216:	490c      	ldr	r1, [pc, #48]	; (b4248 <loop+0x134>)
   b4218:	e7ec      	b.n	b41f4 <loop+0xe0>
    Serial.println(F(" Generated"));
   b421a:	f001 f9c3 	bl	b55a4 <_Z16_fetch_usbserialv>
   b421e:	490b      	ldr	r1, [pc, #44]	; (b424c <loop+0x138>)
   b4220:	e7f0      	b.n	b4204 <loop+0xf0>
   b4222:	bf00      	nop
   b4224:	2003e6a8 	.word	0x2003e6a8
   b4228:	000b648b 	.word	0x000b648b
   b422c:	000b6493 	.word	0x000b6493
   b4230:	000b649b 	.word	0x000b649b
   b4234:	000b64af 	.word	0x000b64af
   b4238:	000b64c1 	.word	0x000b64c1
   b423c:	000b64d8 	.word	0x000b64d8
   b4240:	000b64e8 	.word	0x000b64e8
   b4244:	000b64fa 	.word	0x000b64fa
   b4248:	000b64f1 	.word	0x000b64f1
   b424c:	000b6504 	.word	0x000b6504

000b4250 <_GLOBAL__sub_I_mySensor>:
ACS37800 mySensor; //Create an object of the ACS37800 class
   b4250:	4801      	ldr	r0, [pc, #4]	; (b4258 <_GLOBAL__sub_I_mySensor+0x8>)
   b4252:	f000 b827 	b.w	b42a4 <_ZN8ACS37800C1Ev>
   b4256:	bf00      	nop
   b4258:	2003e6a8 	.word	0x2003e6a8

000b425c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   b425c:	b510      	push	{r4, lr}
   b425e:	4604      	mov	r4, r0

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   b4260:	b942      	cbnz	r2, b4274 <_ZN5Print7printlnImLi0EEEjT_i.isra.0+0x18>
        return write(n);
   b4262:	6802      	ldr	r2, [r0, #0]
   b4264:	b2c9      	uxtb	r1, r1
   b4266:	6892      	ldr	r2, [r2, #8]
   b4268:	4790      	blx	r2
        n += println();
   b426a:	4620      	mov	r0, r4
    }
   b426c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b4270:	f000 bf9d 	b.w	b51ae <_ZN5Print7printlnEv>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4274:	b2d2      	uxtb	r2, r2
   b4276:	f000 ffb2 	bl	b51de <_ZN5Print11printNumberEmh>
   b427a:	e7f6      	b.n	b426a <_ZN5Print7printlnImLi0EEEjT_i.isra.0+0xe>

000b427c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>:
    size_t println(T b, int base = DEC) {
   b427c:	b510      	push	{r4, lr}
   b427e:	4604      	mov	r4, r0
    if (base == 0) {
   b4280:	b93a      	cbnz	r2, b4292 <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0+0x16>
        return write(n);
   b4282:	6803      	ldr	r3, [r0, #0]
   b4284:	689b      	ldr	r3, [r3, #8]
   b4286:	4798      	blx	r3
        n += println();
   b4288:	4620      	mov	r0, r4
    }
   b428a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        n += println();
   b428e:	f000 bf8e 	b.w	b51ae <_ZN5Print7printlnEv>
        return printNumber(val, base) + t;
   b4292:	b2d2      	uxtb	r2, r2
   b4294:	f000 ffa3 	bl	b51de <_ZN5Print11printNumberEmh>
   b4298:	e7f6      	b.n	b4288 <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0+0xc>

000b429a <_ZN7TwoWire5writeEm.isra.0>:
  void onRequest(void (*)(void));

  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
   b429a:	6803      	ldr	r3, [r0, #0]
   b429c:	b2c9      	uxtb	r1, r1
   b429e:	689b      	ldr	r3, [r3, #8]
   b42a0:	4718      	bx	r3
	...

000b42a4 <_ZN8ACS37800C1Ev>:
*/

#include "SparkFun_ACS37800_Arduino_Library.h"

//Constructor
ACS37800::ACS37800()
   b42a4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
   b42a8:	8102      	strh	r2, [r0, #8]
   b42aa:	4a03      	ldr	r2, [pc, #12]	; (b42b8 <_ZN8ACS37800C1Ev+0x14>)
   b42ac:	60c2      	str	r2, [r0, #12]
   b42ae:	4a03      	ldr	r2, [pc, #12]	; (b42bc <_ZN8ACS37800C1Ev+0x18>)
   b42b0:	6102      	str	r2, [r0, #16]
   b42b2:	4a03      	ldr	r2, [pc, #12]	; (b42c0 <_ZN8ACS37800C1Ev+0x1c>)
   b42b4:	6142      	str	r2, [r0, #20]
{
}
   b42b6:	4770      	bx	lr
   b42b8:	46002000 	.word	0x46002000
   b42bc:	49f42400 	.word	0x49f42400
   b42c0:	41f00000 	.word	0x41f00000

000b42c4 <_ZN8ACS3780012readRegisterEPmh>:
	_printDebug = true;
}

//Read a register's contents. Contents are returned in data.
ACS37800ERR ACS37800::readRegister(uint32_t *data, uint8_t address)
{
   b42c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b42c8:	4604      	mov	r4, r0
   b42ca:	460f      	mov	r7, r1
  _i2cPort->beginTransmission(_ACS37800Address);
   b42cc:	7a41      	ldrb	r1, [r0, #9]
   b42ce:	6800      	ldr	r0, [r0, #0]
{
   b42d0:	4615      	mov	r5, r2
  _i2cPort->beginTransmission(_ACS37800Address);
   b42d2:	f000 fdff 	bl	b4ed4 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(address); //Write the register address
   b42d6:	6820      	ldr	r0, [r4, #0]
   b42d8:	6803      	ldr	r3, [r0, #0]
   b42da:	4629      	mov	r1, r5
   b42dc:	689b      	ldr	r3, [r3, #8]
   b42de:	4798      	blx	r3
  uint8_t i2cResult = _i2cPort->endTransmission(false); //Send restart. Don't release the bus.
   b42e0:	6820      	ldr	r0, [r4, #0]
   b42e2:	2100      	movs	r1, #0
   b42e4:	f000 fdfa 	bl	b4edc <_ZN7TwoWire15endTransmissionEh>

  if (i2cResult != 0)
   b42e8:	4606      	mov	r6, r0
   b42ea:	b198      	cbz	r0, b4314 <_ZN8ACS3780012readRegisterEPmh+0x50>
  {
    if (_printDebug == true)
   b42ec:	7a23      	ldrb	r3, [r4, #8]
   b42ee:	b91b      	cbnz	r3, b42f8 <_ZN8ACS3780012readRegisterEPmh+0x34>
    {
      _debugPort->print(F("readRegister: endTransmission returned: "));
      _debugPort->println(i2cResult);
    }
    return (ACS37800_ERR_I2C_ERROR); // Bail
   b42f0:	2601      	movs	r6, #1
  readData |= ((uint32_t)_i2cPort->read()) << 16;
  readData |= ((uint32_t)_i2cPort->read()) << 24; //store MSB

  *data = readData; //Return the data
  return (ACS37800_SUCCESS);
}
   b42f2:	4630      	mov	r0, r6
   b42f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      _debugPort->print(F("readRegister: endTransmission returned: "));
   b42f8:	491d      	ldr	r1, [pc, #116]	; (b4370 <_ZN8ACS3780012readRegisterEPmh+0xac>)
   b42fa:	6860      	ldr	r0, [r4, #4]
   b42fc:	f000 ff53 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(i2cResult);
   b4300:	6864      	ldr	r4, [r4, #4]
   b4302:	220a      	movs	r2, #10
   b4304:	4631      	mov	r1, r6
   b4306:	4620      	mov	r0, r4
   b4308:	f000 ff69 	bl	b51de <_ZN5Print11printNumberEmh>
        n += println();
   b430c:	4620      	mov	r0, r4
   b430e:	f000 ff4e 	bl	b51ae <_ZN5Print7printlnEv>
   b4312:	e7ed      	b.n	b42f0 <_ZN8ACS3780012readRegisterEPmh+0x2c>
  uint8_t toRead = _i2cPort->requestFrom(_ACS37800Address, (uint8_t)4);
   b4314:	7a61      	ldrb	r1, [r4, #9]
   b4316:	6820      	ldr	r0, [r4, #0]
   b4318:	2204      	movs	r2, #4
   b431a:	f000 fdd8 	bl	b4ece <_ZN7TwoWire11requestFromEhj>
  if (toRead != 4)
   b431e:	b2c5      	uxtb	r5, r0
   b4320:	2d04      	cmp	r5, #4
   b4322:	d00a      	beq.n	b433a <_ZN8ACS3780012readRegisterEPmh+0x76>
    if (_printDebug == true)
   b4324:	7a23      	ldrb	r3, [r4, #8]
   b4326:	2b00      	cmp	r3, #0
   b4328:	d0e2      	beq.n	b42f0 <_ZN8ACS3780012readRegisterEPmh+0x2c>
      _debugPort->print(F("readRegister: requestFrom returned: "));
   b432a:	4912      	ldr	r1, [pc, #72]	; (b4374 <_ZN8ACS3780012readRegisterEPmh+0xb0>)
   b432c:	6860      	ldr	r0, [r4, #4]
   b432e:	f000 ff3a 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(toRead);
   b4332:	6864      	ldr	r4, [r4, #4]
        return printNumber(val, base) + t;
   b4334:	220a      	movs	r2, #10
   b4336:	4629      	mov	r1, r5
   b4338:	e7e5      	b.n	b4306 <_ZN8ACS3780012readRegisterEPmh+0x42>
  uint32_t readData = _i2cPort->read(); //store LSB
   b433a:	6820      	ldr	r0, [r4, #0]
   b433c:	6803      	ldr	r3, [r0, #0]
   b433e:	695b      	ldr	r3, [r3, #20]
   b4340:	4798      	blx	r3
   b4342:	4680      	mov	r8, r0
  readData |= ((uint32_t)_i2cPort->read()) << 8;
   b4344:	6820      	ldr	r0, [r4, #0]
   b4346:	6803      	ldr	r3, [r0, #0]
   b4348:	695b      	ldr	r3, [r3, #20]
   b434a:	4798      	blx	r3
   b434c:	4605      	mov	r5, r0
  readData |= ((uint32_t)_i2cPort->read()) << 16;
   b434e:	6820      	ldr	r0, [r4, #0]
   b4350:	6803      	ldr	r3, [r0, #0]
   b4352:	695b      	ldr	r3, [r3, #20]
   b4354:	4798      	blx	r3
   b4356:	0402      	lsls	r2, r0, #16
  readData |= ((uint32_t)_i2cPort->read()) << 24; //store MSB
   b4358:	6820      	ldr	r0, [r4, #0]
  readData |= ((uint32_t)_i2cPort->read()) << 16;
   b435a:	ea42 2305 	orr.w	r3, r2, r5, lsl #8
   b435e:	ea43 0508 	orr.w	r5, r3, r8
  readData |= ((uint32_t)_i2cPort->read()) << 24; //store MSB
   b4362:	6803      	ldr	r3, [r0, #0]
   b4364:	695b      	ldr	r3, [r3, #20]
   b4366:	4798      	blx	r3
   b4368:	ea45 6500 	orr.w	r5, r5, r0, lsl #24
  *data = readData; //Return the data
   b436c:	603d      	str	r5, [r7, #0]
  return (ACS37800_SUCCESS);
   b436e:	e7c0      	b.n	b42f2 <_ZN8ACS3780012readRegisterEPmh+0x2e>
   b4370:	000b650f 	.word	0x000b650f
   b4374:	000b6538 	.word	0x000b6538

000b4378 <_ZN8ACS3780013writeRegisterEmh>:

//Write data to the selected register
ACS37800ERR ACS37800::writeRegister(uint32_t data, uint8_t address)
{
   b4378:	b570      	push	{r4, r5, r6, lr}
   b437a:	4604      	mov	r4, r0
   b437c:	460d      	mov	r5, r1
  //   _debugPort->print(data, HEX);
  //   _debugPort->print(F(" to address 0x"));
  //   _debugPort->println(address, HEX);
  // }

  _i2cPort->beginTransmission(_ACS37800Address);
   b437e:	7a41      	ldrb	r1, [r0, #9]
   b4380:	6800      	ldr	r0, [r0, #0]
{
   b4382:	4616      	mov	r6, r2
  _i2cPort->beginTransmission(_ACS37800Address);
   b4384:	f000 fda6 	bl	b4ed4 <_ZN7TwoWire17beginTransmissionEh>
  _i2cPort->write(address); //Write the register address
   b4388:	6820      	ldr	r0, [r4, #0]
   b438a:	6803      	ldr	r3, [r0, #0]
   b438c:	4631      	mov	r1, r6
   b438e:	689b      	ldr	r3, [r3, #8]
   b4390:	4798      	blx	r3
  _i2cPort->write(data & 0xFF); //Write the data LSB first (little endian)
   b4392:	b2e9      	uxtb	r1, r5
   b4394:	6820      	ldr	r0, [r4, #0]
   b4396:	f7ff ff80 	bl	b429a <_ZN7TwoWire5writeEm.isra.0>
  _i2cPort->write((data >> 8) & 0xFF);
   b439a:	f3c5 2107 	ubfx	r1, r5, #8, #8
   b439e:	6820      	ldr	r0, [r4, #0]
   b43a0:	f7ff ff7b 	bl	b429a <_ZN7TwoWire5writeEm.isra.0>
  _i2cPort->write((data >> 16) & 0xFF);
   b43a4:	f3c5 4107 	ubfx	r1, r5, #16, #8
   b43a8:	6820      	ldr	r0, [r4, #0]
   b43aa:	f7ff ff76 	bl	b429a <_ZN7TwoWire5writeEm.isra.0>
  _i2cPort->write((data >> 24) & 0xFF);
   b43ae:	0e29      	lsrs	r1, r5, #24
   b43b0:	6820      	ldr	r0, [r4, #0]
   b43b2:	f7ff ff72 	bl	b429a <_ZN7TwoWire5writeEm.isra.0>
  uint8_t i2cResult = _i2cPort->endTransmission(); //Release the bus.
   b43b6:	6820      	ldr	r0, [r4, #0]
   b43b8:	f000 fd94 	bl	b4ee4 <_ZN7TwoWire15endTransmissionEv>

  if (i2cResult != 0)
   b43bc:	4605      	mov	r5, r0
   b43be:	b178      	cbz	r0, b43e0 <_ZN8ACS3780013writeRegisterEmh+0x68>
  {
    if (_printDebug == true)
   b43c0:	7a23      	ldrb	r3, [r4, #8]
   b43c2:	b163      	cbz	r3, b43de <_ZN8ACS3780013writeRegisterEmh+0x66>
    {
      _debugPort->print(F("writeRegister: endTransmission returned: "));
   b43c4:	4907      	ldr	r1, [pc, #28]	; (b43e4 <_ZN8ACS3780013writeRegisterEmh+0x6c>)
   b43c6:	6860      	ldr	r0, [r4, #4]
   b43c8:	f000 feed 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(i2cResult);
   b43cc:	6864      	ldr	r4, [r4, #4]
   b43ce:	220a      	movs	r2, #10
   b43d0:	4629      	mov	r1, r5
   b43d2:	4620      	mov	r0, r4
   b43d4:	f000 ff03 	bl	b51de <_ZN5Print11printNumberEmh>
        n += println();
   b43d8:	4620      	mov	r0, r4
   b43da:	f000 fee8 	bl	b51ae <_ZN5Print7printlnEv>
    }
    return (ACS37800_ERR_I2C_ERROR); // Bail
   b43de:	2501      	movs	r5, #1
  }

  return (ACS37800_SUCCESS);
}
   b43e0:	4628      	mov	r0, r5
   b43e2:	bd70      	pop	{r4, r5, r6, pc}
   b43e4:	000b655d 	.word	0x000b655d

000b43e8 <_ZN8ACS3780016setBypassNenableEbb>:
  return (error);
}

//Set/Clear the Bypass_N_Enable flag
ACS37800ERR ACS37800::setBypassNenable(bool bypass, bool _eeprom)
{
   b43e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b43ea:	460e      	mov	r6, r1
   b43ec:	4617      	mov	r7, r2
  ACS37800ERR error = writeRegister(ACS37800_CUSTOMER_ACCESS_CODE, ACS37800_REGISTER_VOLATILE_2F); // Set the customer access code
   b43ee:	493e      	ldr	r1, [pc, #248]	; (b44e8 <_ZN8ACS3780016setBypassNenableEbb+0x100>)
   b43f0:	222f      	movs	r2, #47	; 0x2f
{
   b43f2:	4604      	mov	r4, r0
  ACS37800ERR error = writeRegister(ACS37800_CUSTOMER_ACCESS_CODE, ACS37800_REGISTER_VOLATILE_2F); // Set the customer access code
   b43f4:	f7ff ffc0 	bl	b4378 <_ZN8ACS3780013writeRegisterEmh>

  if (error != ACS37800_SUCCESS)
   b43f8:	4605      	mov	r5, r0
   b43fa:	b118      	cbz	r0, b4404 <_ZN8ACS3780016setBypassNenableEbb+0x1c>

  error = writeRegister(0, ACS37800_REGISTER_VOLATILE_2F); // Clear the customer access code

  if (error != ACS37800_SUCCESS)
  {
    if (_printDebug == true)
   b43fc:	7a23      	ldrb	r3, [r4, #8]
   b43fe:	b19b      	cbz	r3, b4428 <_ZN8ACS3780016setBypassNenableEbb+0x40>
    {
      _debugPort->print(F("setBypassNenable: writeRegister (2F) returned: "));
   b4400:	493a      	ldr	r1, [pc, #232]	; (b44ec <_ZN8ACS3780016setBypassNenableEbb+0x104>)
   b4402:	e009      	b.n	b4418 <_ZN8ACS3780016setBypassNenableEbb+0x30>
  error = readRegister(&store.data.all, ACS37800_REGISTER_SHADOW_1F); // Read register 1F
   b4404:	221f      	movs	r2, #31
   b4406:	a901      	add	r1, sp, #4
   b4408:	4620      	mov	r0, r4
   b440a:	f7ff ff5b 	bl	b42c4 <_ZN8ACS3780012readRegisterEPmh>
  if (error != ACS37800_SUCCESS)
   b440e:	7a23      	ldrb	r3, [r4, #8]
   b4410:	4605      	mov	r5, r0
   b4412:	b160      	cbz	r0, b442e <_ZN8ACS3780016setBypassNenableEbb+0x46>
    if (_printDebug == true)
   b4414:	b143      	cbz	r3, b4428 <_ZN8ACS3780016setBypassNenableEbb+0x40>
      _debugPort->print(F("setBypassNenable: readRegister (1F) returned: "));
   b4416:	4936      	ldr	r1, [pc, #216]	; (b44f0 <_ZN8ACS3780016setBypassNenableEbb+0x108>)
   b4418:	6860      	ldr	r0, [r4, #4]
   b441a:	f000 fec4 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
   b441e:	6860      	ldr	r0, [r4, #4]
   b4420:	220a      	movs	r2, #10
   b4422:	4629      	mov	r1, r5
   b4424:	f7ff ff2a 	bl	b427c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
  }

  delay(100); // Allow time for the shadow/eeprom memory to be updated - otherwise the next readRegister will return zero...

  return (error);
}
   b4428:	4628      	mov	r0, r5
   b442a:	b003      	add	sp, #12
   b442c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (_printDebug == true)
   b442e:	b15b      	cbz	r3, b4448 <_ZN8ACS3780016setBypassNenableEbb+0x60>
    _debugPort->print(F("setBypassNenable: bypass_n_en is currently: "));
   b4430:	4930      	ldr	r1, [pc, #192]	; (b44f4 <_ZN8ACS3780016setBypassNenableEbb+0x10c>)
   b4432:	6860      	ldr	r0, [r4, #4]
   b4434:	f000 feb7 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.bypass_n_en);
   b4438:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b443c:	6860      	ldr	r0, [r4, #4]
   b443e:	220a      	movs	r2, #10
   b4440:	f001 0101 	and.w	r1, r1, #1
   b4444:	f7ff ff0a 	bl	b425c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
  if (bypass) //Adjust bypass_n_en
   b4448:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b444c:	f366 0300 	bfi	r3, r6, #0, #1
   b4450:	f88d 3007 	strb.w	r3, [sp, #7]
  error = writeRegister(store.data.all, ACS37800_REGISTER_SHADOW_1F); // Write register 1F
   b4454:	9901      	ldr	r1, [sp, #4]
   b4456:	221f      	movs	r2, #31
   b4458:	4620      	mov	r0, r4
   b445a:	f7ff ff8d 	bl	b4378 <_ZN8ACS3780013writeRegisterEmh>
  if (error != ACS37800_SUCCESS)
   b445e:	4605      	mov	r5, r0
   b4460:	b120      	cbz	r0, b446c <_ZN8ACS3780016setBypassNenableEbb+0x84>
    if (_printDebug == true)
   b4462:	7a23      	ldrb	r3, [r4, #8]
   b4464:	2b00      	cmp	r3, #0
   b4466:	d0df      	beq.n	b4428 <_ZN8ACS3780016setBypassNenableEbb+0x40>
      _debugPort->print(F("setBypassNenable: writeRegister (1F) returned: "));
   b4468:	4923      	ldr	r1, [pc, #140]	; (b44f8 <_ZN8ACS3780016setBypassNenableEbb+0x110>)
   b446a:	e7d5      	b.n	b4418 <_ZN8ACS3780016setBypassNenableEbb+0x30>
  if (_eeprom) // Check if user wants to set eeprom too
   b446c:	b387      	cbz	r7, b44d0 <_ZN8ACS3780016setBypassNenableEbb+0xe8>
    error = readRegister(&store.data.all, ACS37800_REGISTER_EEPROM_0F); // Read register 0F
   b446e:	220f      	movs	r2, #15
   b4470:	a901      	add	r1, sp, #4
   b4472:	4620      	mov	r0, r4
   b4474:	f7ff ff26 	bl	b42c4 <_ZN8ACS3780012readRegisterEPmh>
    if (error != ACS37800_SUCCESS)
   b4478:	7a23      	ldrb	r3, [r4, #8]
   b447a:	4605      	mov	r5, r0
   b447c:	b118      	cbz	r0, b4486 <_ZN8ACS3780016setBypassNenableEbb+0x9e>
      if (_printDebug == true)
   b447e:	2b00      	cmp	r3, #0
   b4480:	d0d2      	beq.n	b4428 <_ZN8ACS3780016setBypassNenableEbb+0x40>
        _debugPort->print(F("setBypassNenable: readRegister (0F) returned: "));
   b4482:	491e      	ldr	r1, [pc, #120]	; (b44fc <_ZN8ACS3780016setBypassNenableEbb+0x114>)
   b4484:	e7c8      	b.n	b4418 <_ZN8ACS3780016setBypassNenableEbb+0x30>
    if (_printDebug == true)
   b4486:	b15b      	cbz	r3, b44a0 <_ZN8ACS3780016setBypassNenableEbb+0xb8>
      _debugPort->print(F("setBypassNenable: eeprom bypass_n_en is currently: "));
   b4488:	491d      	ldr	r1, [pc, #116]	; (b4500 <_ZN8ACS3780016setBypassNenableEbb+0x118>)
   b448a:	6860      	ldr	r0, [r4, #4]
   b448c:	f000 fe8b 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(store.data.bits.bypass_n_en);
   b4490:	f89d 1007 	ldrb.w	r1, [sp, #7]
   b4494:	6860      	ldr	r0, [r4, #4]
   b4496:	220a      	movs	r2, #10
   b4498:	f001 0101 	and.w	r1, r1, #1
   b449c:	f7ff fede 	bl	b425c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    if (bypass) //Adjust bypass_n_en
   b44a0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   b44a4:	f366 0300 	bfi	r3, r6, #0, #1
   b44a8:	f88d 3007 	strb.w	r3, [sp, #7]
    error = writeRegister(store.data.all, ACS37800_REGISTER_EEPROM_0F); // Write register 0F
   b44ac:	9901      	ldr	r1, [sp, #4]
   b44ae:	220f      	movs	r2, #15
   b44b0:	4620      	mov	r0, r4
   b44b2:	f7ff ff61 	bl	b4378 <_ZN8ACS3780013writeRegisterEmh>
    if (error != ACS37800_SUCCESS)
   b44b6:	4605      	mov	r5, r0
   b44b8:	b150      	cbz	r0, b44d0 <_ZN8ACS3780016setBypassNenableEbb+0xe8>
      if (_printDebug == true)
   b44ba:	7a23      	ldrb	r3, [r4, #8]
   b44bc:	b143      	cbz	r3, b44d0 <_ZN8ACS3780016setBypassNenableEbb+0xe8>
        _debugPort->print(F("setBypassNenable: writeRegister (0F) returned: "));
   b44be:	4911      	ldr	r1, [pc, #68]	; (b4504 <_ZN8ACS3780016setBypassNenableEbb+0x11c>)
   b44c0:	6860      	ldr	r0, [r4, #4]
   b44c2:	f000 fe70 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
        _debugPort->println(error);
   b44c6:	6860      	ldr	r0, [r4, #4]
   b44c8:	220a      	movs	r2, #10
   b44ca:	4629      	mov	r1, r5
   b44cc:	f7ff fed6 	bl	b427c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
  error = writeRegister(0, ACS37800_REGISTER_VOLATILE_2F); // Clear the customer access code
   b44d0:	222f      	movs	r2, #47	; 0x2f
   b44d2:	2100      	movs	r1, #0
   b44d4:	4620      	mov	r0, r4
   b44d6:	f7ff ff4f 	bl	b4378 <_ZN8ACS3780013writeRegisterEmh>
  if (error != ACS37800_SUCCESS)
   b44da:	4605      	mov	r5, r0
   b44dc:	2800      	cmp	r0, #0
   b44de:	d18d      	bne.n	b43fc <_ZN8ACS3780016setBypassNenableEbb+0x14>
  delay(100); // Allow time for the shadow/eeprom memory to be updated - otherwise the next readRegister will return zero...
   b44e0:	2064      	movs	r0, #100	; 0x64
   b44e2:	f000 fc31 	bl	b4d48 <delay>
  return (error);
   b44e6:	e79f      	b.n	b4428 <_ZN8ACS3780016setBypassNenableEbb+0x40>
   b44e8:	4f70656e 	.word	0x4f70656e
   b44ec:	000b6587 	.word	0x000b6587
   b44f0:	000b65b7 	.word	0x000b65b7
   b44f4:	000b65e6 	.word	0x000b65e6
   b44f8:	000b6613 	.word	0x000b6613
   b44fc:	000b6643 	.word	0x000b6643
   b4500:	000b6672 	.word	0x000b6672
   b4504:	000b66a6 	.word	0x000b66a6

000b4508 <_ZN8ACS3780020getCurrentCoarseGainEPf>:
  return (error);
}

//Get the coarse current gain from shadow memory
ACS37800ERR ACS37800::getCurrentCoarseGain(float *currentCoarseGain)
{
   b4508:	b570      	push	{r4, r5, r6, lr}
   b450a:	ed2d 8b02 	vpush	{d8}
   b450e:	b082      	sub	sp, #8
   b4510:	460e      	mov	r6, r1
  ACS37800_REGISTER_0B_t store;
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_SHADOW_1B); // Read register 1B
   b4512:	221b      	movs	r2, #27
   b4514:	a901      	add	r1, sp, #4
{
   b4516:	4604      	mov	r4, r0
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_SHADOW_1B); // Read register 1B
   b4518:	f7ff fed4 	bl	b42c4 <_ZN8ACS3780012readRegisterEPmh>

  if (error != ACS37800_SUCCESS)
   b451c:	7a21      	ldrb	r1, [r4, #8]
   b451e:	4605      	mov	r5, r0
   b4520:	b170      	cbz	r0, b4540 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x38>
  {
    if (_printDebug == true)
   b4522:	b141      	cbz	r1, b4536 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x2e>
    {
      _debugPort->print(F("getCurrentCoarseGain: readRegister (1B) returned: "));
   b4524:	4912      	ldr	r1, [pc, #72]	; (b4570 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x68>)
   b4526:	6860      	ldr	r0, [r4, #4]
   b4528:	f000 fe3d 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
   b452c:	6860      	ldr	r0, [r4, #4]
   b452e:	220a      	movs	r2, #10
   b4530:	4629      	mov	r1, r5
   b4532:	f7ff fea3 	bl	b427c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
  }

  *currentCoarseGain = gain; //Return the gain

  return (error);
}
   b4536:	4628      	mov	r0, r5
   b4538:	b002      	add	sp, #8
   b453a:	ecbd 8b02 	vpop	{d8}
   b453e:	bd70      	pop	{r4, r5, r6, pc}
  float gain = ACS37800_CRS_SNS_GAINS[store.data.bits.crs_sns];
   b4540:	f89d 3006 	ldrb.w	r3, [sp, #6]
   b4544:	f3c3 02c2 	ubfx	r2, r3, #3, #3
   b4548:	4b0a      	ldr	r3, [pc, #40]	; (b4574 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x6c>)
   b454a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   b454e:	ed93 8a00 	vldr	s16, [r3]
  if (_printDebug == true)
   b4552:	b149      	cbz	r1, b4568 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x60>
    _debugPort->print(F("getCurrentCoarseGain: shadow gain setting is currently: "));
   b4554:	4908      	ldr	r1, [pc, #32]	; (b4578 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x70>)
   b4556:	6860      	ldr	r0, [r4, #4]
   b4558:	f000 fe25 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(gain, 1);
   b455c:	6860      	ldr	r0, [r4, #4]
   b455e:	2101      	movs	r1, #1
   b4560:	eeb0 0a48 	vmov.f32	s0, s16
   b4564:	f000 ff3c 	bl	b53e0 <_ZN5Print7printlnEfi>
  *currentCoarseGain = gain; //Return the gain
   b4568:	ed86 8a00 	vstr	s16, [r6]
  return (error);
   b456c:	e7e3      	b.n	b4536 <_ZN8ACS3780020getCurrentCoarseGainEPf+0x2e>
   b456e:	bf00      	nop
   b4570:	000b66d6 	.word	0x000b66d6
   b4574:	000b6b04 	.word	0x000b6b04
   b4578:	000b6709 	.word	0x000b6709

000b457c <_ZN8ACS378005beginEhR7TwoWire>:
{
   b457c:	b538      	push	{r3, r4, r5, lr}
  _ACS37800Address = address; //Grab which i2c address the user wants us to use
   b457e:	7241      	strb	r1, [r0, #9]
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b4580:	4601      	mov	r1, r0
{
   b4582:	4604      	mov	r4, r0
  _i2cPort = &wirePort; //Grab which port the user wants us to use
   b4584:	f841 2b18 	str.w	r2, [r1], #24
  ACS37800ERR error = getCurrentCoarseGain(&_currentCoarseGain); // Get the current gain from shadow memory
   b4588:	f7ff ffbe 	bl	b4508 <_ZN8ACS3780020getCurrentCoarseGainEPf>
  if (_printDebug == true)
   b458c:	7a23      	ldrb	r3, [r4, #8]
  ACS37800ERR error = getCurrentCoarseGain(&_currentCoarseGain); // Get the current gain from shadow memory
   b458e:	4605      	mov	r5, r0
  if (_printDebug == true)
   b4590:	b14b      	cbz	r3, b45a6 <_ZN8ACS378005beginEhR7TwoWire+0x2a>
      _debugPort->print(F("ACS37800::begin: failed! getCurrentCoarseGain returned: "));
   b4592:	6860      	ldr	r0, [r4, #4]
    if  (error != ACS37800_SUCCESS)
   b4594:	b15d      	cbz	r5, b45ae <_ZN8ACS378005beginEhR7TwoWire+0x32>
      _debugPort->print(F("ACS37800::begin: failed! getCurrentCoarseGain returned: "));
   b4596:	490b      	ldr	r1, [pc, #44]	; (b45c4 <_ZN8ACS378005beginEhR7TwoWire+0x48>)
   b4598:	f000 fe05 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
   b459c:	6860      	ldr	r0, [r4, #4]
   b459e:	220a      	movs	r2, #10
   b45a0:	4629      	mov	r1, r5
   b45a2:	f7ff fe6b 	bl	b427c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
}
   b45a6:	fab5 f085 	clz	r0, r5
   b45aa:	0940      	lsrs	r0, r0, #5
   b45ac:	bd38      	pop	{r3, r4, r5, pc}
      _debugPort->print(F("ACS37800::begin: success! _currentCoarseGain is: "));
   b45ae:	4906      	ldr	r1, [pc, #24]	; (b45c8 <_ZN8ACS378005beginEhR7TwoWire+0x4c>)
   b45b0:	f000 fdf9 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(_currentCoarseGain, 1);
   b45b4:	ed94 0a06 	vldr	s0, [r4, #24]
   b45b8:	6860      	ldr	r0, [r4, #4]
   b45ba:	2101      	movs	r1, #1
   b45bc:	f000 ff10 	bl	b53e0 <_ZN5Print7printlnEfi>
   b45c0:	e7f1      	b.n	b45a6 <_ZN8ACS378005beginEhR7TwoWire+0x2a>
   b45c2:	bf00      	nop
   b45c4:	000b6742 	.word	0x000b6742
   b45c8:	000b677b 	.word	0x000b677b

000b45cc <_ZN8ACS378007readRMSEPfS0_>:

// Read volatile register 0x20. Return the vInst (Volts) and iInst (Amps).
ACS37800ERR ACS37800::readRMS(float *vRMS, float *iRMS)
{
   b45cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b45ce:	ed2d 8b04 	vpush	{d8-d9}
   b45d2:	b083      	sub	sp, #12
   b45d4:	460f      	mov	r7, r1
   b45d6:	4616      	mov	r6, r2
  ACS37800_REGISTER_20_t store;
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_20); // Read register 20
   b45d8:	a901      	add	r1, sp, #4
   b45da:	2220      	movs	r2, #32
{
   b45dc:	4604      	mov	r4, r0
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_20); // Read register 20
   b45de:	f7ff fe71 	bl	b42c4 <_ZN8ACS3780012readRegisterEPmh>

  if (error != ACS37800_SUCCESS)
   b45e2:	7a23      	ldrb	r3, [r4, #8]
   b45e4:	4605      	mov	r5, r0
   b45e6:	b170      	cbz	r0, b4606 <_ZN8ACS378007readRMSEPfS0_+0x3a>
  {
    if (_printDebug == true)
   b45e8:	b143      	cbz	r3, b45fc <_ZN8ACS378007readRMSEPfS0_+0x30>
    {
      _debugPort->print(F("readRMS: readRegister (20) returned: "));
   b45ea:	493f      	ldr	r1, [pc, #252]	; (b46e8 <_ZN8ACS378007readRMSEPfS0_+0x11c>)
   b45ec:	6860      	ldr	r0, [r4, #4]
   b45ee:	f000 fdda 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
   b45f2:	6860      	ldr	r0, [r4, #4]
   b45f4:	220a      	movs	r2, #10
   b45f6:	4629      	mov	r1, r5
   b45f8:	f7ff fe40 	bl	b427c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
    _debugPort->println(amps);
  }
  *iRMS = amps;

  return (error);
}
   b45fc:	4628      	mov	r0, r5
   b45fe:	b003      	add	sp, #12
   b4600:	ecbd 8b04 	vpop	{d8-d9}
   b4604:	bdf0      	pop	{r4, r5, r6, r7, pc}
  float volts = (float)store.data.bits.vrms;
   b4606:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   b460a:	ee08 2a10 	vmov	s16, r2
   b460e:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  if (_printDebug == true)
   b4612:	b19b      	cbz	r3, b463c <_ZN8ACS378007readRMSEPfS0_+0x70>
    _debugPort->print(F("readRMS: vrms: 0x"));
   b4614:	4935      	ldr	r1, [pc, #212]	; (b46ec <_ZN8ACS378007readRMSEPfS0_+0x120>)
   b4616:	6860      	ldr	r0, [r4, #4]
   b4618:	f000 fdc5 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.vrms, HEX);
   b461c:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   b4620:	6860      	ldr	r0, [r4, #4]
   b4622:	2210      	movs	r2, #16
   b4624:	f7ff fe1a 	bl	b425c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readRMS: volts (LSB, before correction) is "));
   b4628:	4931      	ldr	r1, [pc, #196]	; (b46f0 <_ZN8ACS378007readRMSEPfS0_+0x124>)
   b462a:	6860      	ldr	r0, [r4, #4]
   b462c:	f000 fdbb 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(volts);
   b4630:	6860      	ldr	r0, [r4, #4]
   b4632:	2102      	movs	r1, #2
   b4634:	eeb0 0a48 	vmov.f32	s0, s16
   b4638:	f000 fed2 	bl	b53e0 <_ZN5Print7printlnEfi>
  volts /= 55000.0; //Convert from codes to the fraction of ADC Full Scale (16-bit)
   b463c:	ed9f 9a2d 	vldr	s18, [pc, #180]	; b46f4 <_ZN8ACS378007readRMSEPfS0_+0x128>
  volts *= 250; //Convert to mV (Differential Input Range is +/- 250mV)
   b4640:	ed9f 7a2d 	vldr	s14, [pc, #180]	; b46f8 <_ZN8ACS378007readRMSEPfS0_+0x12c>
  if (_printDebug == true)
   b4644:	7a23      	ldrb	r3, [r4, #8]
  volts /= 55000.0; //Convert from codes to the fraction of ADC Full Scale (16-bit)
   b4646:	eec8 7a09 	vdiv.f32	s15, s16, s18
  volts *= 250; //Convert to mV (Differential Input Range is +/- 250mV)
   b464a:	ee67 7a87 	vmul.f32	s15, s15, s14
  volts /= 1000; //Convert to Volts
   b464e:	ed9f 7a2b 	vldr	s14, [pc, #172]	; b46fc <_ZN8ACS378007readRMSEPfS0_+0x130>
   b4652:	ee87 0a87 	vdiv.f32	s0, s15, s14
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
   b4656:	ed94 7a03 	vldr	s14, [r4, #12]
   b465a:	edd4 7a04 	vldr	s15, [r4, #16]
   b465e:	ee77 7a27 	vadd.f32	s15, s14, s15
   b4662:	ee87 8a87 	vdiv.f32	s16, s15, s14
  volts *= resistorMultiplier;
   b4666:	ee28 8a00 	vmul.f32	s16, s16, s0
  if (_printDebug == true)
   b466a:	b14b      	cbz	r3, b4680 <_ZN8ACS378007readRMSEPfS0_+0xb4>
    _debugPort->print(F("readRMS: volts (V, after correction) is "));
   b466c:	4924      	ldr	r1, [pc, #144]	; (b4700 <_ZN8ACS378007readRMSEPfS0_+0x134>)
   b466e:	6860      	ldr	r0, [r4, #4]
   b4670:	f000 fd99 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(volts);
   b4674:	6860      	ldr	r0, [r4, #4]
   b4676:	2102      	movs	r1, #2
   b4678:	eeb0 0a48 	vmov.f32	s0, s16
   b467c:	f000 feb0 	bl	b53e0 <_ZN5Print7printlnEfi>
  float amps = (float)signedUnsigned.Signed;
   b4680:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
  *vRMS = volts;
   b4684:	ed87 8a00 	vstr	s16, [r7]
  float amps = (float)signedUnsigned.Signed;
   b4688:	ee08 3a90 	vmov	s17, r3
  if (_printDebug == true)
   b468c:	7a23      	ldrb	r3, [r4, #8]
  float amps = (float)signedUnsigned.Signed;
   b468e:	eef8 8ae8 	vcvt.f32.s32	s17, s17
  if (_printDebug == true)
   b4692:	b19b      	cbz	r3, b46bc <_ZN8ACS378007readRMSEPfS0_+0xf0>
    _debugPort->print(F("readRMS: irms: 0x"));
   b4694:	491b      	ldr	r1, [pc, #108]	; (b4704 <_ZN8ACS378007readRMSEPfS0_+0x138>)
   b4696:	6860      	ldr	r0, [r4, #4]
   b4698:	f000 fd85 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.irms, HEX);
   b469c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   b46a0:	6860      	ldr	r0, [r4, #4]
   b46a2:	2210      	movs	r2, #16
   b46a4:	f7ff fdda 	bl	b425c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readRMS: amps (LSB, before correction) is "));
   b46a8:	4917      	ldr	r1, [pc, #92]	; (b4708 <_ZN8ACS378007readRMSEPfS0_+0x13c>)
   b46aa:	6860      	ldr	r0, [r4, #4]
   b46ac:	f000 fd7b 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(amps);
   b46b0:	6860      	ldr	r0, [r4, #4]
   b46b2:	2102      	movs	r1, #2
   b46b4:	eeb0 0a68 	vmov.f32	s0, s17
   b46b8:	f000 fe92 	bl	b53e0 <_ZN5Print7printlnEfi>
  amps /= 55000.0; //Convert from codes to the fraction of ADC Full Scale (16-bit)
   b46bc:	ee88 8a89 	vdiv.f32	s16, s17, s18
  if (_printDebug == true)
   b46c0:	7a23      	ldrb	r3, [r4, #8]
  amps *= _currentSensingRange; //Convert to Amps
   b46c2:	ed94 0a05 	vldr	s0, [r4, #20]
   b46c6:	ee28 8a00 	vmul.f32	s16, s16, s0
  if (_printDebug == true)
   b46ca:	b14b      	cbz	r3, b46e0 <_ZN8ACS378007readRMSEPfS0_+0x114>
    _debugPort->print(F("readRMS: amps (A, after correction) is "));
   b46cc:	490f      	ldr	r1, [pc, #60]	; (b470c <_ZN8ACS378007readRMSEPfS0_+0x140>)
   b46ce:	6860      	ldr	r0, [r4, #4]
   b46d0:	f000 fd69 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(amps);
   b46d4:	6860      	ldr	r0, [r4, #4]
   b46d6:	2102      	movs	r1, #2
   b46d8:	eeb0 0a48 	vmov.f32	s0, s16
   b46dc:	f000 fe80 	bl	b53e0 <_ZN5Print7printlnEfi>
  *iRMS = amps;
   b46e0:	ed86 8a00 	vstr	s16, [r6]
  return (error);
   b46e4:	e78a      	b.n	b45fc <_ZN8ACS378007readRMSEPfS0_+0x30>
   b46e6:	bf00      	nop
   b46e8:	000b67ad 	.word	0x000b67ad
   b46ec:	000b67d3 	.word	0x000b67d3
   b46f0:	000b67e5 	.word	0x000b67e5
   b46f4:	4756d800 	.word	0x4756d800
   b46f8:	437a0000 	.word	0x437a0000
   b46fc:	447a0000 	.word	0x447a0000
   b4700:	000b6811 	.word	0x000b6811
   b4704:	000b683a 	.word	0x000b683a
   b4708:	000b684c 	.word	0x000b684c
   b470c:	000b6877 	.word	0x000b6877

000b4710 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_>:

// Read volatile register 0x21. Return the pactive and pimag.
ACS37800ERR ACS37800::readPowerActiveReactive(float *pActive, float *pReactive)
{
   b4710:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b4714:	ed2d 8b04 	vpush	{d8-d9}
   b4718:	b083      	sub	sp, #12
   b471a:	460f      	mov	r7, r1
   b471c:	4616      	mov	r6, r2
  ACS37800_REGISTER_21_t store;
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_21); // Read register 21
   b471e:	a901      	add	r1, sp, #4
   b4720:	2221      	movs	r2, #33	; 0x21
{
   b4722:	4604      	mov	r4, r0
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_21); // Read register 21
   b4724:	f7ff fdce 	bl	b42c4 <_ZN8ACS3780012readRegisterEPmh>

  if (error != ACS37800_SUCCESS)
   b4728:	7a23      	ldrb	r3, [r4, #8]
   b472a:	4605      	mov	r5, r0
   b472c:	b178      	cbz	r0, b474e <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x3e>
  {
    if (_printDebug == true)
   b472e:	b143      	cbz	r3, b4742 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x32>
    {
      _debugPort->print(F("readPowerActiveReactive: readRegister (21) returned: "));
   b4730:	4955      	ldr	r1, [pc, #340]	; (b4888 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x178>)
   b4732:	6860      	ldr	r0, [r4, #4]
   b4734:	f000 fd37 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
   b4738:	6860      	ldr	r0, [r4, #4]
   b473a:	220a      	movs	r2, #10
   b473c:	4629      	mov	r1, r5
   b473e:	f7ff fd9d 	bl	b427c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
    _debugPort->println(power);
  }
  *pReactive = power;

  return (error);
}
   b4742:	4628      	mov	r0, r5
   b4744:	b003      	add	sp, #12
   b4746:	ecbd 8b04 	vpop	{d8-d9}
   b474a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  float power = (float)signedUnsigned.Signed;
   b474e:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
  signedUnsigned.unSigned = store.data.bits.pactive;
   b4752:	f8bd 9004 	ldrh.w	r9, [sp, #4]
  float power = (float)signedUnsigned.Signed;
   b4756:	ee08 2a10 	vmov	s16, r2
   b475a:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
  if (_printDebug == true)
   b475e:	b1bb      	cbz	r3, b4790 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x80>
    _debugPort->print(F("readPowerActiveReactive: pactive: 0x"));
   b4760:	494a      	ldr	r1, [pc, #296]	; (b488c <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x17c>)
   b4762:	6860      	ldr	r0, [r4, #4]
   b4764:	f000 fd1f 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(signedUnsigned.unSigned, HEX);
   b4768:	f8d4 8004 	ldr.w	r8, [r4, #4]
        return printNumber(val, base) + t;
   b476c:	2210      	movs	r2, #16
   b476e:	4649      	mov	r1, r9
   b4770:	4640      	mov	r0, r8
   b4772:	f000 fd34 	bl	b51de <_ZN5Print11printNumberEmh>
        n += println();
   b4776:	4640      	mov	r0, r8
   b4778:	f000 fd19 	bl	b51ae <_ZN5Print7printlnEv>
    _debugPort->print(F("readPowerActiveReactive: pactive (LSB, before correction) is "));
   b477c:	4944      	ldr	r1, [pc, #272]	; (b4890 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x180>)
   b477e:	6860      	ldr	r0, [r4, #4]
   b4780:	f000 fd11 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
   b4784:	6860      	ldr	r0, [r4, #4]
   b4786:	2102      	movs	r1, #2
   b4788:	eeb0 0a48 	vmov.f32	s0, s16
   b478c:	f000 fe28 	bl	b53e0 <_ZN5Print7printlnEfi>
  LSBpermW *= 30.0 / _currentSensingRange; // Correct for sensor version
   b4790:	6960      	ldr	r0, [r4, #20]
  power /= 1000; // Convert from mW to W
   b4792:	ed9f 9a40 	vldr	s18, [pc, #256]	; b4894 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x184>
  LSBpermW *= 30.0 / _currentSensingRange; // Correct for sensor version
   b4796:	f001 f9eb 	bl	b5b70 <__aeabi_f2d>
   b479a:	4602      	mov	r2, r0
   b479c:	460b      	mov	r3, r1
   b479e:	2000      	movs	r0, #0
   b47a0:	493d      	ldr	r1, [pc, #244]	; (b4898 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x188>)
   b47a2:	f001 fb67 	bl	b5e74 <__aeabi_ddiv>
   b47a6:	a334      	add	r3, pc, #208	; (adr r3, b4878 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x168>)
   b47a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   b47ac:	f001 fa38 	bl	b5c20 <__aeabi_dmul>
   b47b0:	f001 fd2e 	bl	b6210 <__aeabi_d2f>
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
   b47b4:	edd4 6a03 	vldr	s13, [r4, #12]
   b47b8:	ed94 7a04 	vldr	s14, [r4, #16]
  if (_printDebug == true)
   b47bc:	7a23      	ldrb	r3, [r4, #8]
  power /= LSBpermW; //Convert from codes to mW
   b47be:	ee07 0a90 	vmov	s15, r0
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
   b47c2:	ee36 7a87 	vadd.f32	s14, s13, s14
  power /= LSBpermW; //Convert from codes to mW
   b47c6:	eec8 7a27 	vdiv.f32	s15, s16, s15
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
   b47ca:	ee87 8a26 	vdiv.f32	s16, s14, s13
  power *= resistorMultiplier;
   b47ce:	ee67 7a88 	vmul.f32	s15, s15, s16
  power /= 1000; // Convert from mW to W
   b47d2:	eec7 8a89 	vdiv.f32	s17, s15, s18
  if (_printDebug == true)
   b47d6:	b14b      	cbz	r3, b47ec <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0xdc>
    _debugPort->print(F("readPowerActiveReactive: pactive (W, after correction) is "));
   b47d8:	4930      	ldr	r1, [pc, #192]	; (b489c <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x18c>)
   b47da:	6860      	ldr	r0, [r4, #4]
   b47dc:	f000 fce3 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
   b47e0:	6860      	ldr	r0, [r4, #4]
   b47e2:	2102      	movs	r1, #2
   b47e4:	eeb0 0a68 	vmov.f32	s0, s17
   b47e8:	f000 fdfa 	bl	b53e0 <_ZN5Print7printlnEfi>
  power = (float)store.data.bits.pimag;
   b47ec:	f8bd 3006 	ldrh.w	r3, [sp, #6]
  *pActive = power;
   b47f0:	edc7 8a00 	vstr	s17, [r7]
  power = (float)store.data.bits.pimag;
   b47f4:	ee08 3a90 	vmov	s17, r3
  if (_printDebug == true)
   b47f8:	7a23      	ldrb	r3, [r4, #8]
  power = (float)store.data.bits.pimag;
   b47fa:	eef8 8a68 	vcvt.f32.u32	s17, s17
  if (_printDebug == true)
   b47fe:	b19b      	cbz	r3, b4828 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x118>
    _debugPort->print(F("readPowerActiveReactive: pimag: 0x"));
   b4800:	4927      	ldr	r1, [pc, #156]	; (b48a0 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x190>)
   b4802:	6860      	ldr	r0, [r4, #4]
   b4804:	f000 fccf 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.pimag, HEX);
   b4808:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   b480c:	6860      	ldr	r0, [r4, #4]
   b480e:	2210      	movs	r2, #16
   b4810:	f7ff fd24 	bl	b425c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readPowerActiveReactive: pimag (LSB, before correction) is "));
   b4814:	4923      	ldr	r1, [pc, #140]	; (b48a4 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x194>)
   b4816:	6860      	ldr	r0, [r4, #4]
   b4818:	f000 fcc5 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
   b481c:	6860      	ldr	r0, [r4, #4]
   b481e:	2102      	movs	r1, #2
   b4820:	eeb0 0a68 	vmov.f32	s0, s17
   b4824:	f000 fddc 	bl	b53e0 <_ZN5Print7printlnEfi>
  LSBpermVAR *= 30.0 / _currentSensingRange; // Correct for sensor version
   b4828:	6960      	ldr	r0, [r4, #20]
   b482a:	f001 f9a1 	bl	b5b70 <__aeabi_f2d>
   b482e:	4602      	mov	r2, r0
   b4830:	460b      	mov	r3, r1
   b4832:	2000      	movs	r0, #0
   b4834:	4918      	ldr	r1, [pc, #96]	; (b4898 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x188>)
   b4836:	f001 fb1d 	bl	b5e74 <__aeabi_ddiv>
   b483a:	a311      	add	r3, pc, #68	; (adr r3, b4880 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x170>)
   b483c:	e9d3 2300 	ldrd	r2, r3, [r3]
   b4840:	f001 f9ee 	bl	b5c20 <__aeabi_dmul>
   b4844:	f001 fce4 	bl	b6210 <__aeabi_d2f>
  power /= LSBpermVAR; //Convert from codes to mVAR
   b4848:	ee07 0a90 	vmov	s15, r0
   b484c:	eec8 7aa7 	vdiv.f32	s15, s17, s15
  if (_printDebug == true)
   b4850:	7a23      	ldrb	r3, [r4, #8]
  power *= resistorMultiplier;
   b4852:	ee28 8a27 	vmul.f32	s16, s16, s15
  power /= 1000; // Convert from mVAR to VAR
   b4856:	eec8 8a09 	vdiv.f32	s17, s16, s18
  if (_printDebug == true)
   b485a:	b14b      	cbz	r3, b4870 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x160>
    _debugPort->print(F("readPowerActiveReactive: pimag (VAR, after correction) is "));
   b485c:	4912      	ldr	r1, [pc, #72]	; (b48a8 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x198>)
   b485e:	6860      	ldr	r0, [r4, #4]
   b4860:	f000 fca1 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
   b4864:	6860      	ldr	r0, [r4, #4]
   b4866:	2102      	movs	r1, #2
   b4868:	eeb0 0a68 	vmov.f32	s0, s17
   b486c:	f000 fdb8 	bl	b53e0 <_ZN5Print7printlnEfi>
  *pReactive = power;
   b4870:	edc6 8a00 	vstr	s17, [r6]
  return (error);
   b4874:	e765      	b.n	b4742 <_ZN8ACS3780023readPowerActiveReactiveEPfS0_+0x32>
   b4876:	bf00      	nop
   b4878:	00000000 	.word	0x00000000
   b487c:	4008a3d7 	.word	0x4008a3d7
   b4880:	a0000000 	.word	0xa0000000
   b4884:	40189999 	.word	0x40189999
   b4888:	000b689f 	.word	0x000b689f
   b488c:	000b68d5 	.word	0x000b68d5
   b4890:	000b68fa 	.word	0x000b68fa
   b4894:	447a0000 	.word	0x447a0000
   b4898:	403e0000 	.word	0x403e0000
   b489c:	000b6938 	.word	0x000b6938
   b48a0:	000b6973 	.word	0x000b6973
   b48a4:	000b6996 	.word	0x000b6996
   b48a8:	000b69d2 	.word	0x000b69d2
   b48ac:	00000000 	.word	0x00000000

000b48b0 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_>:

// Read volatile register 0x22. Return the apparent power, power factor, leading / lagging, generated / consumed
ACS37800ERR ACS37800::readPowerFactor(float *pApparent, float *pFactor, bool *posangle, bool *pospf)
{
   b48b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b48b4:	ed2d 8b02 	vpush	{d8}
   b48b8:	b082      	sub	sp, #8
   b48ba:	460d      	mov	r5, r1
   b48bc:	4690      	mov	r8, r2
  ACS37800_REGISTER_22_t store;
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_22); // Read register 22
   b48be:	a901      	add	r1, sp, #4
   b48c0:	2222      	movs	r2, #34	; 0x22
{
   b48c2:	4604      	mov	r4, r0
   b48c4:	461f      	mov	r7, r3
  ACS37800ERR error = readRegister(&store.data.all, ACS37800_REGISTER_VOLATILE_22); // Read register 22
   b48c6:	f7ff fcfd 	bl	b42c4 <_ZN8ACS3780012readRegisterEPmh>

  if (error != ACS37800_SUCCESS)
   b48ca:	7a23      	ldrb	r3, [r4, #8]
   b48cc:	4606      	mov	r6, r0
   b48ce:	b178      	cbz	r0, b48f0 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x40>
  {
    if (_printDebug == true)
   b48d0:	b143      	cbz	r3, b48e4 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x34>
    {
      _debugPort->print(F("readPowerFactor: readRegister (22) returned: "));
   b48d2:	4945      	ldr	r1, [pc, #276]	; (b49e8 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x138>)
   b48d4:	6860      	ldr	r0, [r4, #4]
   b48d6:	f000 fc66 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
      _debugPort->println(error);
   b48da:	6860      	ldr	r0, [r4, #4]
   b48dc:	220a      	movs	r2, #10
   b48de:	4631      	mov	r1, r6
   b48e0:	f7ff fccc 	bl	b427c <_ZN5Print7printlnI11ACS37800ERRLi0EEEjT_i.isra.0>
  // Extract posangle and pospf
  *posangle = store.data.bits.posangle & 0x1;
  *pospf = store.data.bits.pospf & 0x1;

  return (error);
}
   b48e4:	4630      	mov	r0, r6
   b48e6:	b002      	add	sp, #8
   b48e8:	ecbd 8b02 	vpop	{d8}
   b48ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  float power = (float)store.data.bits.papparent;
   b48f0:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   b48f4:	ee08 2a10 	vmov	s16, r2
   b48f8:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  if (_printDebug == true)
   b48fc:	b19b      	cbz	r3, b4926 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x76>
    _debugPort->print(F("readPowerFactor: papparent: 0x"));
   b48fe:	493b      	ldr	r1, [pc, #236]	; (b49ec <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x13c>)
   b4900:	6860      	ldr	r0, [r4, #4]
   b4902:	f000 fc50 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.papparent, HEX);
   b4906:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   b490a:	6860      	ldr	r0, [r4, #4]
   b490c:	2210      	movs	r2, #16
   b490e:	f7ff fca5 	bl	b425c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readPowerFactor: papparent (LSB, before correction) is "));
   b4912:	4937      	ldr	r1, [pc, #220]	; (b49f0 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x140>)
   b4914:	6860      	ldr	r0, [r4, #4]
   b4916:	f000 fc46 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
   b491a:	6860      	ldr	r0, [r4, #4]
   b491c:	2102      	movs	r1, #2
   b491e:	eeb0 0a48 	vmov.f32	s0, s16
   b4922:	f000 fd5d 	bl	b53e0 <_ZN5Print7printlnEfi>
  LSBpermVA *= 30.0 / _currentSensingRange; // Correct for sensor version
   b4926:	6960      	ldr	r0, [r4, #20]
   b4928:	f001 f922 	bl	b5b70 <__aeabi_f2d>
   b492c:	4602      	mov	r2, r0
   b492e:	460b      	mov	r3, r1
   b4930:	2000      	movs	r0, #0
   b4932:	4930      	ldr	r1, [pc, #192]	; (b49f4 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x144>)
   b4934:	f001 fa9e 	bl	b5e74 <__aeabi_ddiv>
   b4938:	a329      	add	r3, pc, #164	; (adr r3, b49e0 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x130>)
   b493a:	e9d3 2300 	ldrd	r2, r3, [r3]
   b493e:	f001 f96f 	bl	b5c20 <__aeabi_dmul>
   b4942:	f001 fc65 	bl	b6210 <__aeabi_d2f>
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
   b4946:	edd4 6a03 	vldr	s13, [r4, #12]
   b494a:	ed94 7a04 	vldr	s14, [r4, #16]
  if (_printDebug == true)
   b494e:	7a23      	ldrb	r3, [r4, #8]
  power /= LSBpermVA; //Convert from codes to mVA
   b4950:	ee07 0a90 	vmov	s15, r0
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
   b4954:	ee36 7a87 	vadd.f32	s14, s13, s14
  power /= LSBpermVA; //Convert from codes to mVA
   b4958:	ee88 6a27 	vdiv.f32	s12, s16, s15
  float resistorMultiplier = (_dividerResistance + _senseResistance) / _senseResistance;
   b495c:	eec7 7a26 	vdiv.f32	s15, s14, s13
  power /= 1000; // Convert from mVAR to VAR
   b4960:	ed9f 7a25 	vldr	s14, [pc, #148]	; b49f8 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x148>
  power *= resistorMultiplier;
   b4964:	ee67 7a86 	vmul.f32	s15, s15, s12
  power /= 1000; // Convert from mVAR to VAR
   b4968:	ee87 8a87 	vdiv.f32	s16, s15, s14
  if (_printDebug == true)
   b496c:	b14b      	cbz	r3, b4982 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0xd2>
    _debugPort->print(F("readPowerFactor: papparent (VA, after correction) is "));
   b496e:	4923      	ldr	r1, [pc, #140]	; (b49fc <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x14c>)
   b4970:	6860      	ldr	r0, [r4, #4]
   b4972:	f000 fc18 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(power);
   b4976:	6860      	ldr	r0, [r4, #4]
   b4978:	2102      	movs	r1, #2
   b497a:	eeb0 0a48 	vmov.f32	s0, s16
   b497e:	f000 fd2f 	bl	b53e0 <_ZN5Print7printlnEfi>
  *pApparent = power;
   b4982:	ed85 8a00 	vstr	s16, [r5]
  signedUnsigned.unSigned = store.data.bits.pfactor << 5; // Move 11-bit number into 16-bits (signed)
   b4986:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   b498a:	f345 050a 	sbfx	r5, r5, #0, #11
  float pfactor = (float)signedUnsigned.Signed / 32768.0; // Convert to +/- 1
   b498e:	016b      	lsls	r3, r5, #5
   b4990:	ee08 3a10 	vmov	s16, r3
  if (_printDebug == true)
   b4994:	7a23      	ldrb	r3, [r4, #8]
  float pfactor = (float)signedUnsigned.Signed / 32768.0; // Convert to +/- 1
   b4996:	eeba 8ae8 	vcvt.f32.s32	s16, s16, #15
  if (_printDebug == true)
   b499a:	b1ab      	cbz	r3, b49c8 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x118>
    _debugPort->print(F("readPowerFactor: pfactor: 0x"));
   b499c:	4918      	ldr	r1, [pc, #96]	; (b4a00 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x150>)
   b499e:	6860      	ldr	r0, [r4, #4]
   b49a0:	f000 fc01 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(store.data.bits.pfactor, HEX);
   b49a4:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   b49a8:	6860      	ldr	r0, [r4, #4]
   b49aa:	2210      	movs	r2, #16
   b49ac:	f3c1 010a 	ubfx	r1, r1, #0, #11
   b49b0:	f7ff fc54 	bl	b425c <_ZN5Print7printlnImLi0EEEjT_i.isra.0>
    _debugPort->print(F("readPowerFactor: pfactor is "));
   b49b4:	4913      	ldr	r1, [pc, #76]	; (b4a04 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x154>)
   b49b6:	6860      	ldr	r0, [r4, #4]
   b49b8:	f000 fbf5 	bl	b51a6 <_ZN5Print5printEPK19__FlashStringHelper>
    _debugPort->println(pfactor);
   b49bc:	6860      	ldr	r0, [r4, #4]
   b49be:	2102      	movs	r1, #2
   b49c0:	eeb0 0a48 	vmov.f32	s0, s16
   b49c4:	f000 fd0c 	bl	b53e0 <_ZN5Print7printlnEfi>
  *posangle = store.data.bits.posangle & 0x1;
   b49c8:	f89d 2007 	ldrb.w	r2, [sp, #7]
  *pFactor = pfactor;
   b49cc:	ed88 8a00 	vstr	s16, [r8]
  *posangle = store.data.bits.posangle & 0x1;
   b49d0:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   b49d4:	703b      	strb	r3, [r7, #0]
  *pospf = store.data.bits.pospf & 0x1;
   b49d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   b49d8:	f3c2 1200 	ubfx	r2, r2, #4, #1
   b49dc:	701a      	strb	r2, [r3, #0]
  return (error);
   b49de:	e781      	b.n	b48e4 <_ZN8ACS3780015readPowerFactorEPfS0_PbS1_+0x34>
   b49e0:	a0000000 	.word	0xa0000000
   b49e4:	40189999 	.word	0x40189999
   b49e8:	000b6a0d 	.word	0x000b6a0d
   b49ec:	000b6a3b 	.word	0x000b6a3b
   b49f0:	000b6a5a 	.word	0x000b6a5a
   b49f4:	403e0000 	.word	0x403e0000
   b49f8:	447a0000 	.word	0x447a0000
   b49fc:	000b6a92 	.word	0x000b6a92
   b4a00:	000b6ac8 	.word	0x000b6ac8
   b4a04:	000b6ae5 	.word	0x000b6ae5

000b4a08 <_ZN8ACS3780013setDividerResEf>:
}

//Change the value of the voltage divider resistance (Ohms)
void ACS37800::setDividerRes(float newRes)
{
  _dividerResistance = newRes;
   b4a08:	ed80 0a04 	vstr	s0, [r0, #16]
}
   b4a0c:	4770      	bx	lr
	...

000b4a10 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4a10:	b508      	push	{r3, lr}
   b4a12:	4b02      	ldr	r3, [pc, #8]	; (b4a1c <os_mutex_recursive_create+0xc>)
   b4a14:	681b      	ldr	r3, [r3, #0]
   b4a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4a18:	9301      	str	r3, [sp, #4]
   b4a1a:	bd08      	pop	{r3, pc}
   b4a1c:	00030248 	.word	0x00030248

000b4a20 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4a20:	b508      	push	{r3, lr}
   b4a22:	4b02      	ldr	r3, [pc, #8]	; (b4a2c <HAL_RNG_GetRandomNumber+0xc>)
   b4a24:	681b      	ldr	r3, [r3, #0]
   b4a26:	685b      	ldr	r3, [r3, #4]
   b4a28:	9301      	str	r3, [sp, #4]
   b4a2a:	bd08      	pop	{r3, pc}
   b4a2c:	00030218 	.word	0x00030218

000b4a30 <HAL_Timer_Get_Milli_Seconds>:
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4a30:	b508      	push	{r3, lr}
   b4a32:	4b02      	ldr	r3, [pc, #8]	; (b4a3c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4a34:	681b      	ldr	r3, [r3, #0]
   b4a36:	695b      	ldr	r3, [r3, #20]
   b4a38:	9301      	str	r3, [sp, #4]
   b4a3a:	bd08      	pop	{r3, pc}
   b4a3c:	00030218 	.word	0x00030218

000b4a40 <hal_i2c_begin>:
DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4a40:	b508      	push	{r3, lr}
   b4a42:	4b02      	ldr	r3, [pc, #8]	; (b4a4c <hal_i2c_begin+0xc>)
   b4a44:	681b      	ldr	r3, [r3, #0]
   b4a46:	68db      	ldr	r3, [r3, #12]
   b4a48:	9301      	str	r3, [sp, #4]
   b4a4a:	bd08      	pop	{r3, pc}
   b4a4c:	00030228 	.word	0x00030228

000b4a50 <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4a50:	b508      	push	{r3, lr}
   b4a52:	4b02      	ldr	r3, [pc, #8]	; (b4a5c <hal_i2c_begin_transmission+0xc>)
   b4a54:	681b      	ldr	r3, [r3, #0]
   b4a56:	699b      	ldr	r3, [r3, #24]
   b4a58:	9301      	str	r3, [sp, #4]
   b4a5a:	bd08      	pop	{r3, pc}
   b4a5c:	00030228 	.word	0x00030228

000b4a60 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4a60:	b508      	push	{r3, lr}
   b4a62:	4b02      	ldr	r3, [pc, #8]	; (b4a6c <hal_i2c_end_transmission+0xc>)
   b4a64:	681b      	ldr	r3, [r3, #0]
   b4a66:	69db      	ldr	r3, [r3, #28]
   b4a68:	9301      	str	r3, [sp, #4]
   b4a6a:	bd08      	pop	{r3, pc}
   b4a6c:	00030228 	.word	0x00030228

000b4a70 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4a70:	b508      	push	{r3, lr}
   b4a72:	4b02      	ldr	r3, [pc, #8]	; (b4a7c <hal_i2c_write+0xc>)
   b4a74:	681b      	ldr	r3, [r3, #0]
   b4a76:	6a1b      	ldr	r3, [r3, #32]
   b4a78:	9301      	str	r3, [sp, #4]
   b4a7a:	bd08      	pop	{r3, pc}
   b4a7c:	00030228 	.word	0x00030228

000b4a80 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4a80:	b508      	push	{r3, lr}
   b4a82:	4b02      	ldr	r3, [pc, #8]	; (b4a8c <hal_i2c_available+0xc>)
   b4a84:	681b      	ldr	r3, [r3, #0]
   b4a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4a88:	9301      	str	r3, [sp, #4]
   b4a8a:	bd08      	pop	{r3, pc}
   b4a8c:	00030228 	.word	0x00030228

000b4a90 <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4a90:	b508      	push	{r3, lr}
   b4a92:	4b02      	ldr	r3, [pc, #8]	; (b4a9c <hal_i2c_read+0xc>)
   b4a94:	681b      	ldr	r3, [r3, #0]
   b4a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4a98:	9301      	str	r3, [sp, #4]
   b4a9a:	bd08      	pop	{r3, pc}
   b4a9c:	00030228 	.word	0x00030228

000b4aa0 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4aa0:	b508      	push	{r3, lr}
   b4aa2:	4b02      	ldr	r3, [pc, #8]	; (b4aac <hal_i2c_peek+0xc>)
   b4aa4:	681b      	ldr	r3, [r3, #0]
   b4aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4aa8:	9301      	str	r3, [sp, #4]
   b4aaa:	bd08      	pop	{r3, pc}
   b4aac:	00030228 	.word	0x00030228

000b4ab0 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4ab0:	b508      	push	{r3, lr}
   b4ab2:	4b02      	ldr	r3, [pc, #8]	; (b4abc <hal_i2c_flush+0xc>)
   b4ab4:	681b      	ldr	r3, [r3, #0]
   b4ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4ab8:	9301      	str	r3, [sp, #4]
   b4aba:	bd08      	pop	{r3, pc}
   b4abc:	00030228 	.word	0x00030228

000b4ac0 <hal_i2c_init>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4ac0:	b508      	push	{r3, lr}
   b4ac2:	4b02      	ldr	r3, [pc, #8]	; (b4acc <hal_i2c_init+0xc>)
   b4ac4:	681b      	ldr	r3, [r3, #0]
   b4ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4ac8:	9301      	str	r3, [sp, #4]
   b4aca:	bd08      	pop	{r3, pc}
   b4acc:	00030228 	.word	0x00030228

000b4ad0 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4ad0:	b508      	push	{r3, lr}
   b4ad2:	4b02      	ldr	r3, [pc, #8]	; (b4adc <hal_i2c_request_ex+0xc>)
   b4ad4:	681b      	ldr	r3, [r3, #0]
   b4ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4ad8:	9301      	str	r3, [sp, #4]
   b4ada:	bd08      	pop	{r3, pc}
   b4adc:	00030228 	.word	0x00030228

000b4ae0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4ae0:	b508      	push	{r3, lr}
   b4ae2:	4b02      	ldr	r3, [pc, #8]	; (b4aec <inet_inet_ntop+0xc>)
   b4ae4:	681b      	ldr	r3, [r3, #0]
   b4ae6:	695b      	ldr	r3, [r3, #20]
   b4ae8:	9301      	str	r3, [sp, #4]
   b4aea:	bd08      	pop	{r3, pc}
   b4aec:	00030264 	.word	0x00030264

000b4af0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4af0:	b508      	push	{r3, lr}
   b4af2:	4b02      	ldr	r3, [pc, #8]	; (b4afc <netdb_freeaddrinfo+0xc>)
   b4af4:	681b      	ldr	r3, [r3, #0]
   b4af6:	689b      	ldr	r3, [r3, #8]
   b4af8:	9301      	str	r3, [sp, #4]
   b4afa:	bd08      	pop	{r3, pc}
   b4afc:	00030268 	.word	0x00030268

000b4b00 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4b00:	b508      	push	{r3, lr}
   b4b02:	4b02      	ldr	r3, [pc, #8]	; (b4b0c <netdb_getaddrinfo+0xc>)
   b4b04:	681b      	ldr	r3, [r3, #0]
   b4b06:	68db      	ldr	r3, [r3, #12]
   b4b08:	9301      	str	r3, [sp, #4]
   b4b0a:	bd08      	pop	{r3, pc}
   b4b0c:	00030268 	.word	0x00030268

000b4b10 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4b10:	b508      	push	{r3, lr}
   b4b12:	4b02      	ldr	r3, [pc, #8]	; (b4b1c <hal_usart_write+0xc>)
   b4b14:	681b      	ldr	r3, [r3, #0]
   b4b16:	68db      	ldr	r3, [r3, #12]
   b4b18:	9301      	str	r3, [sp, #4]
   b4b1a:	bd08      	pop	{r3, pc}
   b4b1c:	0003023c 	.word	0x0003023c

000b4b20 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4b20:	b508      	push	{r3, lr}
   b4b22:	4b02      	ldr	r3, [pc, #8]	; (b4b2c <hal_usart_available+0xc>)
   b4b24:	681b      	ldr	r3, [r3, #0]
   b4b26:	691b      	ldr	r3, [r3, #16]
   b4b28:	9301      	str	r3, [sp, #4]
   b4b2a:	bd08      	pop	{r3, pc}
   b4b2c:	0003023c 	.word	0x0003023c

000b4b30 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4b30:	b508      	push	{r3, lr}
   b4b32:	4b02      	ldr	r3, [pc, #8]	; (b4b3c <hal_usart_read+0xc>)
   b4b34:	681b      	ldr	r3, [r3, #0]
   b4b36:	695b      	ldr	r3, [r3, #20]
   b4b38:	9301      	str	r3, [sp, #4]
   b4b3a:	bd08      	pop	{r3, pc}
   b4b3c:	0003023c 	.word	0x0003023c

000b4b40 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4b40:	b508      	push	{r3, lr}
   b4b42:	4b02      	ldr	r3, [pc, #8]	; (b4b4c <hal_usart_peek+0xc>)
   b4b44:	681b      	ldr	r3, [r3, #0]
   b4b46:	699b      	ldr	r3, [r3, #24]
   b4b48:	9301      	str	r3, [sp, #4]
   b4b4a:	bd08      	pop	{r3, pc}
   b4b4c:	0003023c 	.word	0x0003023c

000b4b50 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4b50:	b508      	push	{r3, lr}
   b4b52:	4b02      	ldr	r3, [pc, #8]	; (b4b5c <hal_usart_flush+0xc>)
   b4b54:	681b      	ldr	r3, [r3, #0]
   b4b56:	69db      	ldr	r3, [r3, #28]
   b4b58:	9301      	str	r3, [sp, #4]
   b4b5a:	bd08      	pop	{r3, pc}
   b4b5c:	0003023c 	.word	0x0003023c

000b4b60 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4b60:	b508      	push	{r3, lr}
   b4b62:	4b02      	ldr	r3, [pc, #8]	; (b4b6c <hal_usart_available_data_for_write+0xc>)
   b4b64:	681b      	ldr	r3, [r3, #0]
   b4b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4b68:	9301      	str	r3, [sp, #4]
   b4b6a:	bd08      	pop	{r3, pc}
   b4b6c:	0003023c 	.word	0x0003023c

000b4b70 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4b70:	b508      	push	{r3, lr}
   b4b72:	4b02      	ldr	r3, [pc, #8]	; (b4b7c <hal_usart_init_ex+0xc>)
   b4b74:	681b      	ldr	r3, [r3, #0]
   b4b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4b78:	9301      	str	r3, [sp, #4]
   b4b7a:	bd08      	pop	{r3, pc}
   b4b7c:	0003023c 	.word	0x0003023c

000b4b80 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4b80:	b508      	push	{r3, lr}
   b4b82:	4b02      	ldr	r3, [pc, #8]	; (b4b8c <HAL_USB_USART_Init+0xc>)
   b4b84:	681b      	ldr	r3, [r3, #0]
   b4b86:	681b      	ldr	r3, [r3, #0]
   b4b88:	9301      	str	r3, [sp, #4]
   b4b8a:	bd08      	pop	{r3, pc}
   b4b8c:	0003024c 	.word	0x0003024c

000b4b90 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   b4b90:	b508      	push	{r3, lr}
   b4b92:	4b02      	ldr	r3, [pc, #8]	; (b4b9c <HAL_USB_USART_Begin+0xc>)
   b4b94:	681b      	ldr	r3, [r3, #0]
   b4b96:	685b      	ldr	r3, [r3, #4]
   b4b98:	9301      	str	r3, [sp, #4]
   b4b9a:	bd08      	pop	{r3, pc}
   b4b9c:	0003024c 	.word	0x0003024c

000b4ba0 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4ba0:	b508      	push	{r3, lr}
   b4ba2:	4b02      	ldr	r3, [pc, #8]	; (b4bac <HAL_USB_USART_Available_Data+0xc>)
   b4ba4:	681b      	ldr	r3, [r3, #0]
   b4ba6:	691b      	ldr	r3, [r3, #16]
   b4ba8:	9301      	str	r3, [sp, #4]
   b4baa:	bd08      	pop	{r3, pc}
   b4bac:	0003024c 	.word	0x0003024c

000b4bb0 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4bb0:	b508      	push	{r3, lr}
   b4bb2:	4b02      	ldr	r3, [pc, #8]	; (b4bbc <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4bb4:	681b      	ldr	r3, [r3, #0]
   b4bb6:	695b      	ldr	r3, [r3, #20]
   b4bb8:	9301      	str	r3, [sp, #4]
   b4bba:	bd08      	pop	{r3, pc}
   b4bbc:	0003024c 	.word	0x0003024c

000b4bc0 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4bc0:	b508      	push	{r3, lr}
   b4bc2:	4b02      	ldr	r3, [pc, #8]	; (b4bcc <HAL_USB_USART_Receive_Data+0xc>)
   b4bc4:	681b      	ldr	r3, [r3, #0]
   b4bc6:	699b      	ldr	r3, [r3, #24]
   b4bc8:	9301      	str	r3, [sp, #4]
   b4bca:	bd08      	pop	{r3, pc}
   b4bcc:	0003024c 	.word	0x0003024c

000b4bd0 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4bd0:	b508      	push	{r3, lr}
   b4bd2:	4b02      	ldr	r3, [pc, #8]	; (b4bdc <HAL_USB_USART_Send_Data+0xc>)
   b4bd4:	681b      	ldr	r3, [r3, #0]
   b4bd6:	69db      	ldr	r3, [r3, #28]
   b4bd8:	9301      	str	r3, [sp, #4]
   b4bda:	bd08      	pop	{r3, pc}
   b4bdc:	0003024c 	.word	0x0003024c

000b4be0 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4be0:	b508      	push	{r3, lr}
   b4be2:	4b02      	ldr	r3, [pc, #8]	; (b4bec <HAL_USB_USART_Flush_Data+0xc>)
   b4be4:	681b      	ldr	r3, [r3, #0]
   b4be6:	6a1b      	ldr	r3, [r3, #32]
   b4be8:	9301      	str	r3, [sp, #4]
   b4bea:	bd08      	pop	{r3, pc}
   b4bec:	0003024c 	.word	0x0003024c

000b4bf0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4bf0:	b508      	push	{r3, lr}
   b4bf2:	4b02      	ldr	r3, [pc, #8]	; (b4bfc <set_system_mode+0xc>)
   b4bf4:	681b      	ldr	r3, [r3, #0]
   b4bf6:	685b      	ldr	r3, [r3, #4]
   b4bf8:	9301      	str	r3, [sp, #4]
   b4bfa:	bd08      	pop	{r3, pc}
   b4bfc:	00030220 	.word	0x00030220

000b4c00 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4c00:	b508      	push	{r3, lr}
   b4c02:	4b02      	ldr	r3, [pc, #8]	; (b4c0c <system_delay_ms+0xc>)
   b4c04:	681b      	ldr	r3, [r3, #0]
   b4c06:	695b      	ldr	r3, [r3, #20]
   b4c08:	9301      	str	r3, [sp, #4]
   b4c0a:	bd08      	pop	{r3, pc}
   b4c0c:	00030220 	.word	0x00030220

000b4c10 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4c10:	b508      	push	{r3, lr}
   b4c12:	4b03      	ldr	r3, [pc, #12]	; (b4c20 <system_ctrl_set_app_request_handler+0x10>)
   b4c14:	681b      	ldr	r3, [r3, #0]
   b4c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4c1a:	9301      	str	r3, [sp, #4]
   b4c1c:	bd08      	pop	{r3, pc}
   b4c1e:	0000      	.short	0x0000
   b4c20:	00030220 	.word	0x00030220

000b4c24 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4c24:	b508      	push	{r3, lr}
   b4c26:	4b03      	ldr	r3, [pc, #12]	; (b4c34 <system_ctrl_set_result+0x10>)
   b4c28:	681b      	ldr	r3, [r3, #0]
   b4c2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4c2e:	9301      	str	r3, [sp, #4]
   b4c30:	bd08      	pop	{r3, pc}
   b4c32:	0000      	.short	0x0000
   b4c34:	00030220 	.word	0x00030220

000b4c38 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4c38:	b508      	push	{r3, lr}
   b4c3a:	4b02      	ldr	r3, [pc, #8]	; (b4c44 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4c3c:	681b      	ldr	r3, [r3, #0]
   b4c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4c40:	9301      	str	r3, [sp, #4]
   b4c42:	bd08      	pop	{r3, pc}
   b4c44:	00030244 	.word	0x00030244

000b4c48 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c48:	b508      	push	{r3, lr}
   b4c4a:	4b02      	ldr	r3, [pc, #8]	; (b4c54 <network_connect+0xc>)
   b4c4c:	681b      	ldr	r3, [r3, #0]
   b4c4e:	685b      	ldr	r3, [r3, #4]
   b4c50:	9301      	str	r3, [sp, #4]
   b4c52:	bd08      	pop	{r3, pc}
   b4c54:	00030240 	.word	0x00030240

000b4c58 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4c58:	b508      	push	{r3, lr}
   b4c5a:	4b02      	ldr	r3, [pc, #8]	; (b4c64 <network_connecting+0xc>)
   b4c5c:	681b      	ldr	r3, [r3, #0]
   b4c5e:	689b      	ldr	r3, [r3, #8]
   b4c60:	9301      	str	r3, [sp, #4]
   b4c62:	bd08      	pop	{r3, pc}
   b4c64:	00030240 	.word	0x00030240

000b4c68 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4c68:	b508      	push	{r3, lr}
   b4c6a:	4b02      	ldr	r3, [pc, #8]	; (b4c74 <network_disconnect+0xc>)
   b4c6c:	681b      	ldr	r3, [r3, #0]
   b4c6e:	68db      	ldr	r3, [r3, #12]
   b4c70:	9301      	str	r3, [sp, #4]
   b4c72:	bd08      	pop	{r3, pc}
   b4c74:	00030240 	.word	0x00030240

000b4c78 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4c78:	b508      	push	{r3, lr}
   b4c7a:	4b02      	ldr	r3, [pc, #8]	; (b4c84 <network_ready+0xc>)
   b4c7c:	681b      	ldr	r3, [r3, #0]
   b4c7e:	691b      	ldr	r3, [r3, #16]
   b4c80:	9301      	str	r3, [sp, #4]
   b4c82:	bd08      	pop	{r3, pc}
   b4c84:	00030240 	.word	0x00030240

000b4c88 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c88:	b508      	push	{r3, lr}
   b4c8a:	4b02      	ldr	r3, [pc, #8]	; (b4c94 <network_on+0xc>)
   b4c8c:	681b      	ldr	r3, [r3, #0]
   b4c8e:	695b      	ldr	r3, [r3, #20]
   b4c90:	9301      	str	r3, [sp, #4]
   b4c92:	bd08      	pop	{r3, pc}
   b4c94:	00030240 	.word	0x00030240

000b4c98 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4c98:	b508      	push	{r3, lr}
   b4c9a:	4b02      	ldr	r3, [pc, #8]	; (b4ca4 <network_off+0xc>)
   b4c9c:	681b      	ldr	r3, [r3, #0]
   b4c9e:	699b      	ldr	r3, [r3, #24]
   b4ca0:	9301      	str	r3, [sp, #4]
   b4ca2:	bd08      	pop	{r3, pc}
   b4ca4:	00030240 	.word	0x00030240

000b4ca8 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4ca8:	b508      	push	{r3, lr}
   b4caa:	4b02      	ldr	r3, [pc, #8]	; (b4cb4 <network_listen+0xc>)
   b4cac:	681b      	ldr	r3, [r3, #0]
   b4cae:	69db      	ldr	r3, [r3, #28]
   b4cb0:	9301      	str	r3, [sp, #4]
   b4cb2:	bd08      	pop	{r3, pc}
   b4cb4:	00030240 	.word	0x00030240

000b4cb8 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4cb8:	b508      	push	{r3, lr}
   b4cba:	4b02      	ldr	r3, [pc, #8]	; (b4cc4 <network_listening+0xc>)
   b4cbc:	681b      	ldr	r3, [r3, #0]
   b4cbe:	6a1b      	ldr	r3, [r3, #32]
   b4cc0:	9301      	str	r3, [sp, #4]
   b4cc2:	bd08      	pop	{r3, pc}
   b4cc4:	00030240 	.word	0x00030240

000b4cc8 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4cc8:	b508      	push	{r3, lr}
   b4cca:	4b02      	ldr	r3, [pc, #8]	; (b4cd4 <network_set_listen_timeout+0xc>)
   b4ccc:	681b      	ldr	r3, [r3, #0]
   b4cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4cd0:	9301      	str	r3, [sp, #4]
   b4cd2:	bd08      	pop	{r3, pc}
   b4cd4:	00030240 	.word	0x00030240

000b4cd8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b4cd8:	b508      	push	{r3, lr}
   b4cda:	4b02      	ldr	r3, [pc, #8]	; (b4ce4 <network_get_listen_timeout+0xc>)
   b4cdc:	681b      	ldr	r3, [r3, #0]
   b4cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4ce0:	9301      	str	r3, [sp, #4]
   b4ce2:	bd08      	pop	{r3, pc}
   b4ce4:	00030240 	.word	0x00030240

000b4ce8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b4ce8:	b508      	push	{r3, lr}
   b4cea:	4b02      	ldr	r3, [pc, #8]	; (b4cf4 <network_is_on+0xc>)
   b4cec:	681b      	ldr	r3, [r3, #0]
   b4cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4cf0:	9301      	str	r3, [sp, #4]
   b4cf2:	bd08      	pop	{r3, pc}
   b4cf4:	00030240 	.word	0x00030240

000b4cf8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b4cf8:	b508      	push	{r3, lr}
   b4cfa:	4b02      	ldr	r3, [pc, #8]	; (b4d04 <network_is_off+0xc>)
   b4cfc:	681b      	ldr	r3, [r3, #0]
   b4cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d00:	9301      	str	r3, [sp, #4]
   b4d02:	bd08      	pop	{r3, pc}
   b4d04:	00030240 	.word	0x00030240

000b4d08 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b4d08:	b508      	push	{r3, lr}
   b4d0a:	4b02      	ldr	r3, [pc, #8]	; (b4d14 <malloc+0xc>)
   b4d0c:	681b      	ldr	r3, [r3, #0]
   b4d0e:	681b      	ldr	r3, [r3, #0]
   b4d10:	9301      	str	r3, [sp, #4]
   b4d12:	bd08      	pop	{r3, pc}
   b4d14:	0003021c 	.word	0x0003021c

000b4d18 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b4d18:	b508      	push	{r3, lr}
   b4d1a:	4b02      	ldr	r3, [pc, #8]	; (b4d24 <free+0xc>)
   b4d1c:	681b      	ldr	r3, [r3, #0]
   b4d1e:	685b      	ldr	r3, [r3, #4]
   b4d20:	9301      	str	r3, [sp, #4]
   b4d22:	bd08      	pop	{r3, pc}
   b4d24:	0003021c 	.word	0x0003021c

000b4d28 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4d28:	b508      	push	{r3, lr}
   b4d2a:	4b02      	ldr	r3, [pc, #8]	; (b4d34 <__assert_func+0xc>)
   b4d2c:	681b      	ldr	r3, [r3, #0]
   b4d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d30:	9301      	str	r3, [sp, #4]
   b4d32:	bd08      	pop	{r3, pc}
   b4d34:	0003021c 	.word	0x0003021c

000b4d38 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4d38:	b508      	push	{r3, lr}
   b4d3a:	4b02      	ldr	r3, [pc, #8]	; (b4d44 <newlib_impure_ptr_callback+0xc>)
   b4d3c:	681b      	ldr	r3, [r3, #0]
   b4d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4d40:	9301      	str	r3, [sp, #4]
   b4d42:	bd08      	pop	{r3, pc}
   b4d44:	0003021c 	.word	0x0003021c

000b4d48 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4d48:	2100      	movs	r1, #0
   b4d4a:	f7ff bf59 	b.w	b4c00 <system_delay_ms>
	...

000b4d50 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b4d50:	4802      	ldr	r0, [pc, #8]	; (b4d5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b4d52:	2300      	movs	r3, #0
   b4d54:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b4d56:	f7ff be5b 	b.w	b4a10 <os_mutex_recursive_create>
   b4d5a:	bf00      	nop
   b4d5c:	2003e6c4 	.word	0x2003e6c4

000b4d60 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b4d60:	2200      	movs	r2, #0
   b4d62:	6840      	ldr	r0, [r0, #4]
   b4d64:	4611      	mov	r1, r2
   b4d66:	f7ff bfa7 	b.w	b4cb8 <network_listening>

000b4d6a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b4d6a:	2200      	movs	r2, #0
   b4d6c:	6840      	ldr	r0, [r0, #4]
   b4d6e:	4611      	mov	r1, r2
   b4d70:	f7ff bfb2 	b.w	b4cd8 <network_get_listen_timeout>

000b4d74 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b4d74:	6840      	ldr	r0, [r0, #4]
   b4d76:	2200      	movs	r2, #0
   b4d78:	f7ff bfa6 	b.w	b4cc8 <network_set_listen_timeout>

000b4d7c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b4d7c:	6840      	ldr	r0, [r0, #4]
   b4d7e:	2200      	movs	r2, #0
   b4d80:	f081 0101 	eor.w	r1, r1, #1
   b4d84:	f7ff bf90 	b.w	b4ca8 <network_listen>

000b4d88 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b4d88:	2300      	movs	r3, #0
   b4d8a:	6840      	ldr	r0, [r0, #4]
   b4d8c:	461a      	mov	r2, r3
   b4d8e:	4619      	mov	r1, r3
   b4d90:	f7ff bf82 	b.w	b4c98 <network_off>

000b4d94 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b4d94:	2300      	movs	r3, #0
   b4d96:	6840      	ldr	r0, [r0, #4]
   b4d98:	461a      	mov	r2, r3
   b4d9a:	4619      	mov	r1, r3
   b4d9c:	f7ff bf74 	b.w	b4c88 <network_on>

000b4da0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b4da0:	2200      	movs	r2, #0
   b4da2:	6840      	ldr	r0, [r0, #4]
   b4da4:	4611      	mov	r1, r2
   b4da6:	f7ff bf67 	b.w	b4c78 <network_ready>

000b4daa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b4daa:	2200      	movs	r2, #0
   b4dac:	6840      	ldr	r0, [r0, #4]
   b4dae:	4611      	mov	r1, r2
   b4db0:	f7ff bf52 	b.w	b4c58 <network_connecting>

000b4db4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b4db4:	6840      	ldr	r0, [r0, #4]
   b4db6:	2200      	movs	r2, #0
   b4db8:	2102      	movs	r1, #2
   b4dba:	f7ff bf55 	b.w	b4c68 <network_disconnect>

000b4dbe <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b4dbe:	2300      	movs	r3, #0
   b4dc0:	6840      	ldr	r0, [r0, #4]
   b4dc2:	461a      	mov	r2, r3
   b4dc4:	f7ff bf40 	b.w	b4c48 <network_connect>

000b4dc8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b4dc8:	4b02      	ldr	r3, [pc, #8]	; (b4dd4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b4dca:	2203      	movs	r2, #3
   b4dcc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b4dce:	4a02      	ldr	r2, [pc, #8]	; (b4dd8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b4dd0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b4dd2:	4770      	bx	lr
   b4dd4:	2003e6c8 	.word	0x2003e6c8
   b4dd8:	000b6b2c 	.word	0x000b6b2c

000b4ddc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b4ddc:	4770      	bx	lr

000b4dde <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b4dde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b4de0:	4606      	mov	r6, r0
   b4de2:	4615      	mov	r5, r2
   b4de4:	460c      	mov	r4, r1
   b4de6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b4de8:	42bc      	cmp	r4, r7
   b4dea:	d006      	beq.n	b4dfa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b4dec:	6833      	ldr	r3, [r6, #0]
   b4dee:	f814 1b01 	ldrb.w	r1, [r4], #1
   b4df2:	689b      	ldr	r3, [r3, #8]
   b4df4:	4630      	mov	r0, r6
   b4df6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b4df8:	e7f6      	b.n	b4de8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b4dfa:	4628      	mov	r0, r5
   b4dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b4dfe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b4dfe:	7c00      	ldrb	r0, [r0, #16]
   b4e00:	2200      	movs	r2, #0
   b4e02:	f7ff be35 	b.w	b4a70 <hal_i2c_write>

000b4e06 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b4e06:	7c00      	ldrb	r0, [r0, #16]
   b4e08:	2100      	movs	r1, #0
   b4e0a:	f7ff be39 	b.w	b4a80 <hal_i2c_available>

000b4e0e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b4e0e:	7c00      	ldrb	r0, [r0, #16]
   b4e10:	2100      	movs	r1, #0
   b4e12:	f7ff be3d 	b.w	b4a90 <hal_i2c_read>

000b4e16 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b4e16:	7c00      	ldrb	r0, [r0, #16]
   b4e18:	2100      	movs	r1, #0
   b4e1a:	f7ff be41 	b.w	b4aa0 <hal_i2c_peek>

000b4e1e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b4e1e:	7c00      	ldrb	r0, [r0, #16]
   b4e20:	2100      	movs	r1, #0
   b4e22:	f7ff be45 	b.w	b4ab0 <hal_i2c_flush>

000b4e26 <_ZN7TwoWireD0Ev>:
   b4e26:	b510      	push	{r4, lr}
   b4e28:	2114      	movs	r1, #20
   b4e2a:	4604      	mov	r4, r0
   b4e2c:	f7ff f935 	bl	b409a <_ZdlPvj>
   b4e30:	4620      	mov	r0, r4
   b4e32:	bd10      	pop	{r4, pc}

000b4e34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4e34:	b538      	push	{r3, r4, r5, lr}
   b4e36:	4604      	mov	r4, r0
   b4e38:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b4e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b4e3e:	2200      	movs	r2, #0
   b4e40:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b4e44:	4b09      	ldr	r3, [pc, #36]	; (b4e6c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b4e46:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b4e48:	4608      	mov	r0, r1
   b4e4a:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b4e4c:	4629      	mov	r1, r5
   b4e4e:	f7ff fe37 	bl	b4ac0 <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4e52:	30bf      	adds	r0, #191	; 0xbf
   b4e54:	d108      	bne.n	b4e68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b4e56:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b4e58:	07db      	lsls	r3, r3, #31
   b4e5a:	d505      	bpl.n	b4e68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b4e5c:	6868      	ldr	r0, [r5, #4]
   b4e5e:	f7ff ff5b 	bl	b4d18 <free>
    free(conf.tx_buffer);
   b4e62:	68e8      	ldr	r0, [r5, #12]
   b4e64:	f7ff ff58 	bl	b4d18 <free>
}
   b4e68:	4620      	mov	r0, r4
   b4e6a:	bd38      	pop	{r3, r4, r5, pc}
   b4e6c:	000b6b68 	.word	0x000b6b68

000b4e70 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b4e70:	2300      	movs	r3, #0
   b4e72:	7c00      	ldrb	r0, [r0, #16]
   b4e74:	461a      	mov	r2, r3
   b4e76:	4619      	mov	r1, r3
   b4e78:	f7ff bde2 	b.w	b4a40 <hal_i2c_begin>

000b4e7c <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b4e7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b4e7e:	2200      	movs	r2, #0
   b4e80:	2314      	movs	r3, #20
   b4e82:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b4e86:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b4e8a:	780b      	ldrb	r3, [r1, #0]
   b4e8c:	f88d 3008 	strb.w	r3, [sp, #8]
   b4e90:	684b      	ldr	r3, [r1, #4]
   b4e92:	9303      	str	r3, [sp, #12]
   b4e94:	68cb      	ldr	r3, [r1, #12]
   b4e96:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b4e98:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b4e9a:	7a0b      	ldrb	r3, [r1, #8]
   b4e9c:	9305      	str	r3, [sp, #20]
   b4e9e:	a901      	add	r1, sp, #4
   b4ea0:	f7ff fe16 	bl	b4ad0 <hal_i2c_request_ex>
}
   b4ea4:	b007      	add	sp, #28
   b4ea6:	f85d fb04 	ldr.w	pc, [sp], #4

000b4eaa <_ZN7TwoWire11requestFromEhjh>:
{
   b4eaa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b4eac:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b4eae:	f88d 1000 	strb.w	r1, [sp]
   b4eb2:	f04f 0164 	mov.w	r1, #100	; 0x64
   b4eb6:	9103      	str	r1, [sp, #12]
   b4eb8:	bf18      	it	ne
   b4eba:	2301      	movne	r3, #1
   b4ebc:	4669      	mov	r1, sp
    size_ = size;
   b4ebe:	9201      	str	r2, [sp, #4]
   b4ec0:	f88d 3008 	strb.w	r3, [sp, #8]
   b4ec4:	f7ff ffda 	bl	b4e7c <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b4ec8:	b005      	add	sp, #20
   b4eca:	f85d fb04 	ldr.w	pc, [sp], #4

000b4ece <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b4ece:	2301      	movs	r3, #1
   b4ed0:	f7ff bfeb 	b.w	b4eaa <_ZN7TwoWire11requestFromEhjh>

000b4ed4 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b4ed4:	7c00      	ldrb	r0, [r0, #16]
   b4ed6:	2200      	movs	r2, #0
   b4ed8:	f7ff bdba 	b.w	b4a50 <hal_i2c_begin_transmission>

000b4edc <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b4edc:	7c00      	ldrb	r0, [r0, #16]
   b4ede:	2200      	movs	r2, #0
   b4ee0:	f7ff bdbe 	b.w	b4a60 <hal_i2c_end_transmission>

000b4ee4 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b4ee4:	2101      	movs	r1, #1
   b4ee6:	f7ff bff9 	b.w	b4edc <_ZN7TwoWire15endTransmissionEh>

000b4eea <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b4eea:	4770      	bx	lr

000b4eec <_ZN9IPAddressD0Ev>:
   b4eec:	b510      	push	{r4, lr}
   b4eee:	2118      	movs	r1, #24
   b4ef0:	4604      	mov	r4, r0
   b4ef2:	f7ff f8d2 	bl	b409a <_ZdlPvj>
   b4ef6:	4620      	mov	r0, r4
   b4ef8:	bd10      	pop	{r4, pc}

000b4efa <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b4efa:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b4efc:	7d03      	ldrb	r3, [r0, #20]
   b4efe:	2b06      	cmp	r3, #6
{
   b4f00:	b08d      	sub	sp, #52	; 0x34
   b4f02:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f04:	f100 0704 	add.w	r7, r0, #4
   b4f08:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b4f0c:	d012      	beq.n	b4f34 <_ZNK9IPAddress7printToER5Print+0x3a>
   b4f0e:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b4f12:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b4f16:	220a      	movs	r2, #10
   b4f18:	4630      	mov	r0, r6
   b4f1a:	f000 f960 	bl	b51de <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b4f1e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b4f20:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b4f22:	d019      	beq.n	b4f58 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b4f24:	2c00      	cmp	r4, #0
   b4f26:	d0f4      	beq.n	b4f12 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b4f28:	212e      	movs	r1, #46	; 0x2e
   b4f2a:	4630      	mov	r0, r6
   b4f2c:	f000 f938 	bl	b51a0 <_ZN5Print5printEc>
   b4f30:	4404      	add	r4, r0
   b4f32:	e7ee      	b.n	b4f12 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f34:	232f      	movs	r3, #47	; 0x2f
   b4f36:	466a      	mov	r2, sp
   b4f38:	4639      	mov	r1, r7
   b4f3a:	200a      	movs	r0, #10
		buf[0] = 0;
   b4f3c:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b4f40:	f7ff fdce 	bl	b4ae0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b4f44:	4668      	mov	r0, sp
   b4f46:	f001 f9fd 	bl	b6344 <strlen>
   b4f4a:	6833      	ldr	r3, [r6, #0]
   b4f4c:	4602      	mov	r2, r0
   b4f4e:	68db      	ldr	r3, [r3, #12]
   b4f50:	4669      	mov	r1, sp
   b4f52:	4630      	mov	r0, r6
   b4f54:	4798      	blx	r3
   b4f56:	4604      	mov	r4, r0
    }
    return n;
}
   b4f58:	4620      	mov	r0, r4
   b4f5a:	b00d      	add	sp, #52	; 0x34
   b4f5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b4f60 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b4f60:	b510      	push	{r4, lr}
   b4f62:	4b05      	ldr	r3, [pc, #20]	; (b4f78 <_ZN9IPAddressC1Ev+0x18>)
   b4f64:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b4f66:	2211      	movs	r2, #17
   b4f68:	f840 3b04 	str.w	r3, [r0], #4
   b4f6c:	2100      	movs	r1, #0
   b4f6e:	f001 f9b3 	bl	b62d8 <memset>
}
   b4f72:	4620      	mov	r0, r4
   b4f74:	bd10      	pop	{r4, pc}
   b4f76:	bf00      	nop
   b4f78:	000b6b90 	.word	0x000b6b90

000b4f7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b4f7c:	4603      	mov	r3, r0
   b4f7e:	4a07      	ldr	r2, [pc, #28]	; (b4f9c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b4f80:	b510      	push	{r4, lr}
   b4f82:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b4f86:	f101 0210 	add.w	r2, r1, #16
   b4f8a:	f851 4b04 	ldr.w	r4, [r1], #4
   b4f8e:	f843 4b04 	str.w	r4, [r3], #4
   b4f92:	4291      	cmp	r1, r2
   b4f94:	d1f9      	bne.n	b4f8a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b4f96:	780a      	ldrb	r2, [r1, #0]
   b4f98:	701a      	strb	r2, [r3, #0]
}
   b4f9a:	bd10      	pop	{r4, pc}
   b4f9c:	000b6b90 	.word	0x000b6b90

000b4fa0 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b4fa0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b4fa2:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b4fa6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b4faa:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b4fae:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b4fb2:	2304      	movs	r3, #4
   b4fb4:	6041      	str	r1, [r0, #4]
   b4fb6:	7503      	strb	r3, [r0, #20]
}
   b4fb8:	bd10      	pop	{r4, pc}
	...

000b4fbc <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b4fbc:	b507      	push	{r0, r1, r2, lr}
   b4fbe:	4b06      	ldr	r3, [pc, #24]	; (b4fd8 <_ZN9IPAddressC1EPKh+0x1c>)
   b4fc0:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b4fc2:	78cb      	ldrb	r3, [r1, #3]
   b4fc4:	9300      	str	r3, [sp, #0]
   b4fc6:	788b      	ldrb	r3, [r1, #2]
   b4fc8:	784a      	ldrb	r2, [r1, #1]
   b4fca:	7809      	ldrb	r1, [r1, #0]
   b4fcc:	f7ff ffe8 	bl	b4fa0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b4fd0:	b003      	add	sp, #12
   b4fd2:	f85d fb04 	ldr.w	pc, [sp], #4
   b4fd6:	bf00      	nop
   b4fd8:	000b6b90 	.word	0x000b6b90

000b4fdc <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b4fdc:	4b01      	ldr	r3, [pc, #4]	; (b4fe4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b4fde:	4a02      	ldr	r2, [pc, #8]	; (b4fe8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b4fe0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b4fe2:	4770      	bx	lr
   b4fe4:	2003e6d0 	.word	0x2003e6d0
   b4fe8:	000b6b9c 	.word	0x000b6b9c

000b4fec <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b4fec:	2300      	movs	r3, #0
   b4fee:	6840      	ldr	r0, [r0, #4]
   b4ff0:	461a      	mov	r2, r3
   b4ff2:	f7ff be29 	b.w	b4c48 <network_connect>

000b4ff6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b4ff6:	6840      	ldr	r0, [r0, #4]
   b4ff8:	2200      	movs	r2, #0
   b4ffa:	2102      	movs	r1, #2
   b4ffc:	f7ff be34 	b.w	b4c68 <network_disconnect>

000b5000 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5000:	2200      	movs	r2, #0
   b5002:	6840      	ldr	r0, [r0, #4]
   b5004:	4611      	mov	r1, r2
   b5006:	f7ff be27 	b.w	b4c58 <network_connecting>

000b500a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b500a:	2200      	movs	r2, #0
   b500c:	6840      	ldr	r0, [r0, #4]
   b500e:	4611      	mov	r1, r2
   b5010:	f7ff be32 	b.w	b4c78 <network_ready>

000b5014 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5014:	2300      	movs	r3, #0
   b5016:	6840      	ldr	r0, [r0, #4]
   b5018:	461a      	mov	r2, r3
   b501a:	4619      	mov	r1, r3
   b501c:	f7ff be34 	b.w	b4c88 <network_on>

000b5020 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5020:	2300      	movs	r3, #0
   b5022:	6840      	ldr	r0, [r0, #4]
   b5024:	461a      	mov	r2, r3
   b5026:	4619      	mov	r1, r3
   b5028:	f7ff be36 	b.w	b4c98 <network_off>

000b502c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b502c:	6840      	ldr	r0, [r0, #4]
   b502e:	2100      	movs	r1, #0
   b5030:	f7ff be5a 	b.w	b4ce8 <network_is_on>

000b5034 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5034:	6840      	ldr	r0, [r0, #4]
   b5036:	2100      	movs	r1, #0
   b5038:	f7ff be5e 	b.w	b4cf8 <network_is_off>

000b503c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b503c:	6840      	ldr	r0, [r0, #4]
   b503e:	2200      	movs	r2, #0
   b5040:	f081 0101 	eor.w	r1, r1, #1
   b5044:	f7ff be30 	b.w	b4ca8 <network_listen>

000b5048 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5048:	6840      	ldr	r0, [r0, #4]
   b504a:	2200      	movs	r2, #0
   b504c:	f7ff be3c 	b.w	b4cc8 <network_set_listen_timeout>

000b5050 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5050:	2200      	movs	r2, #0
   b5052:	6840      	ldr	r0, [r0, #4]
   b5054:	4611      	mov	r1, r2
   b5056:	f7ff be3f 	b.w	b4cd8 <network_get_listen_timeout>

000b505a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b505a:	2200      	movs	r2, #0
   b505c:	6840      	ldr	r0, [r0, #4]
   b505e:	4611      	mov	r1, r2
   b5060:	f7ff be2a 	b.w	b4cb8 <network_listening>

000b5064 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5068:	b095      	sub	sp, #84	; 0x54
   b506a:	4614      	mov	r4, r2
   b506c:	460d      	mov	r5, r1
   b506e:	4607      	mov	r7, r0
    IPAddress addr;
   b5070:	f7ff ff76 	bl	b4f60 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5074:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5076:	221c      	movs	r2, #28
   b5078:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b507a:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b507c:	f001 f92c 	bl	b62d8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5080:	2340      	movs	r3, #64	; 0x40
   b5082:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5084:	4620      	mov	r0, r4
   b5086:	466b      	mov	r3, sp
   b5088:	aa0c      	add	r2, sp, #48	; 0x30
   b508a:	2100      	movs	r1, #0
   b508c:	f7ff fd38 	bl	b4b00 <netdb_getaddrinfo>
    if (!r) {
   b5090:	4604      	mov	r4, r0
   b5092:	2800      	cmp	r0, #0
   b5094:	d14b      	bne.n	b512e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5096:	4602      	mov	r2, r0
   b5098:	2101      	movs	r1, #1
   b509a:	6868      	ldr	r0, [r5, #4]
   b509c:	f7ff fdec 	bl	b4c78 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b50a0:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b50a2:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b50a4:	4622      	mov	r2, r4
   b50a6:	6868      	ldr	r0, [r5, #4]
   b50a8:	f7ff fde6 	bl	b4c78 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b50ac:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b50ae:	4681      	mov	r9, r0
        bool ok = false;
   b50b0:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b50b2:	2e00      	cmp	r6, #0
   b50b4:	d03b      	beq.n	b512e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b50b6:	2900      	cmp	r1, #0
   b50b8:	d139      	bne.n	b512e <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b50ba:	6873      	ldr	r3, [r6, #4]
   b50bc:	2b02      	cmp	r3, #2
   b50be:	d003      	beq.n	b50c8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b50c0:	2b0a      	cmp	r3, #10
   b50c2:	d011      	beq.n	b50e8 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b50c4:	69f6      	ldr	r6, [r6, #28]
   b50c6:	e7f4      	b.n	b50b2 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b50c8:	f1b8 0f00 	cmp.w	r8, #0
   b50cc:	d0fa      	beq.n	b50c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b50ce:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b50d0:	a806      	add	r0, sp, #24
   b50d2:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b50d4:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b50d6:	f7ff ff71 	bl	b4fbc <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b50da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b50dc:	1d3c      	adds	r4, r7, #4
   b50de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b50e0:	682b      	ldr	r3, [r5, #0]
   b50e2:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b50e4:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b50e6:	e7ed      	b.n	b50c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b50e8:	f1b9 0f00 	cmp.w	r9, #0
   b50ec:	d0ea      	beq.n	b50c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b50ee:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b50f0:	2210      	movs	r2, #16
   b50f2:	a801      	add	r0, sp, #4
   b50f4:	f001 f8f0 	bl	b62d8 <memset>
                    a.v = 6;
   b50f8:	2306      	movs	r3, #6
   b50fa:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b50fe:	ad01      	add	r5, sp, #4
   b5100:	f104 0308 	add.w	r3, r4, #8
   b5104:	3418      	adds	r4, #24
   b5106:	6818      	ldr	r0, [r3, #0]
   b5108:	6859      	ldr	r1, [r3, #4]
   b510a:	462a      	mov	r2, r5
   b510c:	c203      	stmia	r2!, {r0, r1}
   b510e:	3308      	adds	r3, #8
   b5110:	42a3      	cmp	r3, r4
   b5112:	4615      	mov	r5, r2
   b5114:	d1f7      	bne.n	b5106 <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5116:	a901      	add	r1, sp, #4
   b5118:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b511a:	ad07      	add	r5, sp, #28
   b511c:	f7ff ff2e 	bl	b4f7c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5122:	1d3c      	adds	r4, r7, #4
   b5124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5126:	682b      	ldr	r3, [r5, #0]
   b5128:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b512a:	4649      	mov	r1, r9
   b512c:	e7ca      	b.n	b50c4 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b512e:	9800      	ldr	r0, [sp, #0]
   b5130:	f7ff fcde 	bl	b4af0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5134:	4638      	mov	r0, r7
   b5136:	b015      	add	sp, #84	; 0x54
   b5138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b513c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b513c:	4b02      	ldr	r3, [pc, #8]	; (b5148 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b513e:	4a03      	ldr	r2, [pc, #12]	; (b514c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5140:	601a      	str	r2, [r3, #0]
   b5142:	2200      	movs	r2, #0
   b5144:	605a      	str	r2, [r3, #4]

} // spark
   b5146:	4770      	bx	lr
   b5148:	2003e6d4 	.word	0x2003e6d4
   b514c:	000b6ba8 	.word	0x000b6ba8

000b5150 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5152:	4606      	mov	r6, r0
   b5154:	460d      	mov	r5, r1
  size_t n = 0;
   b5156:	188f      	adds	r7, r1, r2
   b5158:	2400      	movs	r4, #0
  while (size--) {
   b515a:	42bd      	cmp	r5, r7
   b515c:	d00c      	beq.n	b5178 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b515e:	6833      	ldr	r3, [r6, #0]
   b5160:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5164:	689b      	ldr	r3, [r3, #8]
   b5166:	4630      	mov	r0, r6
   b5168:	4798      	blx	r3
     if (chunk>=0)
   b516a:	1e03      	subs	r3, r0, #0
   b516c:	db01      	blt.n	b5172 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b516e:	441c      	add	r4, r3
  while (size--) {
   b5170:	e7f3      	b.n	b515a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5172:	2c00      	cmp	r4, #0
   b5174:	bf08      	it	eq
   b5176:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5178:	4620      	mov	r0, r4
   b517a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b517c <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b517c:	b513      	push	{r0, r1, r4, lr}
   b517e:	4604      	mov	r4, r0
    }
   b5180:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5182:	b159      	cbz	r1, b519c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5184:	9101      	str	r1, [sp, #4]
   b5186:	f001 f8dd 	bl	b6344 <strlen>
   b518a:	6823      	ldr	r3, [r4, #0]
   b518c:	9901      	ldr	r1, [sp, #4]
   b518e:	68db      	ldr	r3, [r3, #12]
   b5190:	4602      	mov	r2, r0
   b5192:	4620      	mov	r0, r4
    }
   b5194:	b002      	add	sp, #8
   b5196:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b519a:	4718      	bx	r3
    }
   b519c:	b002      	add	sp, #8
   b519e:	bd10      	pop	{r4, pc}

000b51a0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b51a0:	6803      	ldr	r3, [r0, #0]
   b51a2:	689b      	ldr	r3, [r3, #8]
   b51a4:	4718      	bx	r3

000b51a6 <_ZN5Print5printEPK19__FlashStringHelper>:
   b51a6:	b508      	push	{r3, lr}
   b51a8:	f7ff ffe8 	bl	b517c <_ZN5Print5writeEPKc>
   b51ac:	bd08      	pop	{r3, pc}

000b51ae <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   b51ae:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   b51b0:	210d      	movs	r1, #13
{
   b51b2:	4605      	mov	r5, r0
  size_t n = print('\r');
   b51b4:	f7ff fff4 	bl	b51a0 <_ZN5Print5printEc>
  n += print('\n');
   b51b8:	210a      	movs	r1, #10
  size_t n = print('\r');
   b51ba:	4604      	mov	r4, r0
  n += print('\n');
   b51bc:	4628      	mov	r0, r5
   b51be:	f7ff ffef 	bl	b51a0 <_ZN5Print5printEc>
  return n;
}
   b51c2:	4420      	add	r0, r4
   b51c4:	bd38      	pop	{r3, r4, r5, pc}

000b51c6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   b51c6:	b538      	push	{r3, r4, r5, lr}
   b51c8:	4605      	mov	r5, r0
  return write(str);
   b51ca:	f7ff ffd7 	bl	b517c <_ZN5Print5writeEPKc>
   b51ce:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   b51d0:	4628      	mov	r0, r5
   b51d2:	f7ff ffec 	bl	b51ae <_ZN5Print7printlnEv>
  return n;
}
   b51d6:	4420      	add	r0, r4
   b51d8:	bd38      	pop	{r3, r4, r5, pc}

000b51da <_ZN5Print7printlnEPK19__FlashStringHelper>:
   return n;
 }

size_t Print::println(const __FlashStringHelper* str)
{
  return println(reinterpret_cast<const char*>(str));
   b51da:	f7ff bff4 	b.w	b51c6 <_ZN5Print7printlnEPKc>

000b51de <_ZN5Print11printNumberEmh>:
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b51de:	b530      	push	{r4, r5, lr}
   b51e0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b51e2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b51e4:	2a01      	cmp	r2, #1
  *str = '\0';
   b51e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b51ea:	bf98      	it	ls
   b51ec:	220a      	movls	r2, #10
   b51ee:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b51f0:	460d      	mov	r5, r1
   b51f2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b51f6:	fb01 5312 	mls	r3, r1, r2, r5
   b51fa:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b51fe:	2b09      	cmp	r3, #9
   b5200:	bf94      	ite	ls
   b5202:	3330      	addls	r3, #48	; 0x30
   b5204:	3337      	addhi	r3, #55	; 0x37
   b5206:	b2db      	uxtb	r3, r3
  } while(n);
   b5208:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b520a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b520e:	d9ef      	bls.n	b51f0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5210:	4621      	mov	r1, r4
   b5212:	f7ff ffb3 	bl	b517c <_ZN5Print5writeEPKc>
}
   b5216:	b00b      	add	sp, #44	; 0x2c
   b5218:	bd30      	pop	{r4, r5, pc}
	...

000b521c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   b521c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5220:	ec55 4b10 	vmov	r4, r5, d0
   b5224:	4606      	mov	r6, r0
   b5226:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   b5228:	ee10 2a10 	vmov	r2, s0
   b522c:	ee10 0a10 	vmov	r0, s0
   b5230:	462b      	mov	r3, r5
   b5232:	4629      	mov	r1, r5
   b5234:	f000 ff8e 	bl	b6154 <__aeabi_dcmpun>
   b5238:	b140      	cbz	r0, b524c <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   b523a:	4953      	ldr	r1, [pc, #332]	; (b5388 <_ZN5Print10printFloatEdh+0x16c>)
   b523c:	4630      	mov	r0, r6
   b523e:	f7ff ff9d 	bl	b517c <_ZN5Print5writeEPKc>
   b5242:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   b5244:	4650      	mov	r0, sl
   b5246:	b003      	add	sp, #12
   b5248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   b524c:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   b5250:	4b4e      	ldr	r3, [pc, #312]	; (b538c <_ZN5Print10printFloatEdh+0x170>)
   b5252:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5256:	4620      	mov	r0, r4
   b5258:	4649      	mov	r1, r9
   b525a:	f000 ff7b 	bl	b6154 <__aeabi_dcmpun>
   b525e:	b948      	cbnz	r0, b5274 <_ZN5Print10printFloatEdh+0x58>
   b5260:	4b4a      	ldr	r3, [pc, #296]	; (b538c <_ZN5Print10printFloatEdh+0x170>)
   b5262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   b5266:	4620      	mov	r0, r4
   b5268:	4649      	mov	r1, r9
   b526a:	f000 ff55 	bl	b6118 <__aeabi_dcmple>
   b526e:	b908      	cbnz	r0, b5274 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   b5270:	4947      	ldr	r1, [pc, #284]	; (b5390 <_ZN5Print10printFloatEdh+0x174>)
   b5272:	e7e3      	b.n	b523c <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   b5274:	4b47      	ldr	r3, [pc, #284]	; (b5394 <_ZN5Print10printFloatEdh+0x178>)
   b5276:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b527a:	4620      	mov	r0, r4
   b527c:	4629      	mov	r1, r5
   b527e:	f000 ff5f 	bl	b6140 <__aeabi_dcmpgt>
   b5282:	b108      	cbz	r0, b5288 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   b5284:	4944      	ldr	r1, [pc, #272]	; (b5398 <_ZN5Print10printFloatEdh+0x17c>)
   b5286:	e7d9      	b.n	b523c <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   b5288:	4b44      	ldr	r3, [pc, #272]	; (b539c <_ZN5Print10printFloatEdh+0x180>)
   b528a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   b528e:	4620      	mov	r0, r4
   b5290:	4629      	mov	r1, r5
   b5292:	f000 ff37 	bl	b6104 <__aeabi_dcmplt>
   b5296:	2800      	cmp	r0, #0
   b5298:	d1f4      	bne.n	b5284 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   b529a:	2200      	movs	r2, #0
   b529c:	2300      	movs	r3, #0
   b529e:	4620      	mov	r0, r4
   b52a0:	4629      	mov	r1, r5
   b52a2:	f000 ff2f 	bl	b6104 <__aeabi_dcmplt>
   b52a6:	b1d0      	cbz	r0, b52de <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   b52a8:	212d      	movs	r1, #45	; 0x2d
   b52aa:	4630      	mov	r0, r6
   b52ac:	f7ff ff78 	bl	b51a0 <_ZN5Print5printEc>
     number = -number;
   b52b0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   b52b4:	4682      	mov	sl, r0
     number = -number;
   b52b6:	461d      	mov	r5, r3
  double rounding = 0.5;
   b52b8:	4939      	ldr	r1, [pc, #228]	; (b53a0 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   b52ba:	f8df 90ec 	ldr.w	r9, [pc, #236]	; b53a8 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   b52be:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   b52c2:	2000      	movs	r0, #0
    rounding /= 10.0;
   b52c4:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   b52c8:	fa5f f38b 	uxtb.w	r3, fp
   b52cc:	429f      	cmp	r7, r3
   b52ce:	d908      	bls.n	b52e2 <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   b52d0:	4642      	mov	r2, r8
   b52d2:	464b      	mov	r3, r9
   b52d4:	f000 fdce 	bl	b5e74 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   b52d8:	f10b 0b01 	add.w	fp, fp, #1
   b52dc:	e7f4      	b.n	b52c8 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   b52de:	4682      	mov	sl, r0
   b52e0:	e7ea      	b.n	b52b8 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   b52e2:	4622      	mov	r2, r4
   b52e4:	462b      	mov	r3, r5
   b52e6:	f000 fae5 	bl	b58b4 <__adddf3>
   b52ea:	460d      	mov	r5, r1
   b52ec:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   b52ee:	f000 ff6f 	bl	b61d0 <__aeabi_d2uiz>
   b52f2:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   b52f4:	f000 fc1a 	bl	b5b2c <__aeabi_ui2d>
   b52f8:	4602      	mov	r2, r0
   b52fa:	460b      	mov	r3, r1
   b52fc:	4620      	mov	r0, r4
   b52fe:	4629      	mov	r1, r5
   b5300:	f000 fad6 	bl	b58b0 <__aeabi_dsub>
        return printNumber(val, base) + t;
   b5304:	220a      	movs	r2, #10
   b5306:	4604      	mov	r4, r0
   b5308:	460d      	mov	r5, r1
   b530a:	4630      	mov	r0, r6
   b530c:	4641      	mov	r1, r8
   b530e:	f7ff ff66 	bl	b51de <_ZN5Print11printNumberEmh>
  n += print(int_part);
   b5312:	4482      	add	sl, r0
  if (digits > 0) {
   b5314:	2f00      	cmp	r7, #0
   b5316:	d095      	beq.n	b5244 <_ZN5Print10printFloatEdh+0x28>
  return write(str);
   b5318:	4922      	ldr	r1, [pc, #136]	; (b53a4 <_ZN5Print10printFloatEdh+0x188>)
    remainder *= 10.0;
   b531a:	f8df 908c 	ldr.w	r9, [pc, #140]	; b53a8 <_ZN5Print10printFloatEdh+0x18c>
  return write(str);
   b531e:	4630      	mov	r0, r6
   b5320:	f7ff ff2c 	bl	b517c <_ZN5Print5writeEPKc>
    remainder *= 10.0;
   b5324:	f04f 0800 	mov.w	r8, #0
    n += print(".");
   b5328:	4482      	add	sl, r0
  while (digits-- > 0)
   b532a:	2f00      	cmp	r7, #0
   b532c:	d08a      	beq.n	b5244 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   b532e:	4642      	mov	r2, r8
   b5330:	464b      	mov	r3, r9
   b5332:	4620      	mov	r0, r4
   b5334:	4629      	mov	r1, r5
   b5336:	f000 fc73 	bl	b5c20 <__aeabi_dmul>
   b533a:	4604      	mov	r4, r0
   b533c:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   b533e:	f000 ff1f 	bl	b6180 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   b5342:	f1b0 0b00 	subs.w	fp, r0, #0
   b5346:	da1c      	bge.n	b5382 <_ZN5Print10printFloatEdh+0x166>
            t = print('-');
   b5348:	212d      	movs	r1, #45	; 0x2d
   b534a:	4630      	mov	r0, r6
   b534c:	f7ff ff28 	bl	b51a0 <_ZN5Print5printEc>
            val = -n;
   b5350:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   b5354:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   b5356:	220a      	movs	r2, #10
   b5358:	4630      	mov	r0, r6
   b535a:	9301      	str	r3, [sp, #4]
   b535c:	f7ff ff3f 	bl	b51de <_ZN5Print11printNumberEmh>
   b5360:	9b01      	ldr	r3, [sp, #4]
   b5362:	4418      	add	r0, r3
    n += print(toPrint);
   b5364:	4482      	add	sl, r0
    remainder -= toPrint;
   b5366:	4658      	mov	r0, fp
   b5368:	f000 fbf0 	bl	b5b4c <__aeabi_i2d>
   b536c:	4602      	mov	r2, r0
   b536e:	460b      	mov	r3, r1
   b5370:	4620      	mov	r0, r4
   b5372:	4629      	mov	r1, r5
   b5374:	f000 fa9c 	bl	b58b0 <__aeabi_dsub>
   b5378:	3f01      	subs	r7, #1
   b537a:	4604      	mov	r4, r0
   b537c:	460d      	mov	r5, r1
   b537e:	b2ff      	uxtb	r7, r7
  while (digits-- > 0)
   b5380:	e7d3      	b.n	b532a <_ZN5Print10printFloatEdh+0x10e>
            val = n;
   b5382:	4659      	mov	r1, fp
        size_t t = 0;
   b5384:	2300      	movs	r3, #0
   b5386:	e7e6      	b.n	b5356 <_ZN5Print10printFloatEdh+0x13a>
   b5388:	000b6bdc 	.word	0x000b6bdc
   b538c:	7fefffff 	.word	0x7fefffff
   b5390:	000b6be0 	.word	0x000b6be0
   b5394:	41efffff 	.word	0x41efffff
   b5398:	000b6be4 	.word	0x000b6be4
   b539c:	c1efffff 	.word	0xc1efffff
   b53a0:	3fe00000 	.word	0x3fe00000
   b53a4:	000b6489 	.word	0x000b6489
   b53a8:	40240000 	.word	0x40240000

000b53ac <_ZN5Print5printEfi>:
{
   b53ac:	b538      	push	{r3, r4, r5, lr}
   b53ae:	4604      	mov	r4, r0
   b53b0:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   b53b4:	b2cd      	uxtb	r5, r1
   b53b6:	f000 fbdb 	bl	b5b70 <__aeabi_f2d>
   b53ba:	ec41 0b10 	vmov	d0, r0, r1
   b53be:	4629      	mov	r1, r5
   b53c0:	4620      	mov	r0, r4
}
   b53c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   b53c6:	f7ff bf29 	b.w	b521c <_ZN5Print10printFloatEdh>

000b53ca <_ZN5Print7printlnEdi>:
{
   b53ca:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   b53cc:	b2c9      	uxtb	r1, r1
{
   b53ce:	4605      	mov	r5, r0
  return printFloat(n, digits);
   b53d0:	f7ff ff24 	bl	b521c <_ZN5Print10printFloatEdh>
   b53d4:	4604      	mov	r4, r0
  n += println();
   b53d6:	4628      	mov	r0, r5
   b53d8:	f7ff fee9 	bl	b51ae <_ZN5Print7printlnEv>
}
   b53dc:	4420      	add	r0, r4
   b53de:	bd38      	pop	{r3, r4, r5, pc}

000b53e0 <_ZN5Print7printlnEfi>:
{
   b53e0:	b538      	push	{r3, r4, r5, lr}
   b53e2:	4604      	mov	r4, r0
   b53e4:	ee10 0a10 	vmov	r0, s0
   b53e8:	460d      	mov	r5, r1
    return println((double)num, digits);
   b53ea:	f000 fbc1 	bl	b5b70 <__aeabi_f2d>
   b53ee:	ec41 0b10 	vmov	d0, r0, r1
   b53f2:	4629      	mov	r1, r5
   b53f4:	4620      	mov	r0, r4
}
   b53f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   b53fa:	f7ff bfe6 	b.w	b53ca <_ZN5Print7printlnEdi>
	...

000b5400 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   b5400:	4b01      	ldr	r3, [pc, #4]	; (b5408 <_GLOBAL__sub_I_RGB+0x8>)
   b5402:	2200      	movs	r2, #0
   b5404:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5406:	4770      	bx	lr
   b5408:	2003e6dc 	.word	0x2003e6dc

000b540c <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b540c:	4b05      	ldr	r3, [pc, #20]	; (b5424 <_GLOBAL__sub_I_System+0x18>)
   b540e:	2202      	movs	r2, #2
   b5410:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b5412:	4b05      	ldr	r3, [pc, #20]	; (b5428 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5414:	4a05      	ldr	r2, [pc, #20]	; (b542c <_GLOBAL__sub_I_System+0x20>)
   b5416:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5418:	2000      	movs	r0, #0
   b541a:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b541e:	f7ff bbe7 	b.w	b4bf0 <set_system_mode>
   b5422:	bf00      	nop
   b5424:	2003e6f8 	.word	0x2003e6f8
   b5428:	2003e6ec 	.word	0x2003e6ec
   b542c:	ffff0000 	.word	0xffff0000

000b5430 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5430:	4b02      	ldr	r3, [pc, #8]	; (b543c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5432:	681a      	ldr	r2, [r3, #0]
   b5434:	4b02      	ldr	r3, [pc, #8]	; (b5440 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5436:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5438:	4770      	bx	lr
   b543a:	bf00      	nop
   b543c:	2003e63c 	.word	0x2003e63c
   b5440:	2003e6fc 	.word	0x2003e6fc

000b5444 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5444:	4770      	bx	lr

000b5446 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5446:	7441      	strb	r1, [r0, #17]
}
   b5448:	4770      	bx	lr

000b544a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b544a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b544c:	7c00      	ldrb	r0, [r0, #16]
   b544e:	f7ff fb87 	bl	b4b60 <hal_usart_available_data_for_write>
}
   b5452:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5456:	bd08      	pop	{r3, pc}

000b5458 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5458:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b545a:	7c00      	ldrb	r0, [r0, #16]
   b545c:	f7ff fb60 	bl	b4b20 <hal_usart_available>
}
   b5460:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5464:	bd08      	pop	{r3, pc}

000b5466 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5466:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5468:	7c00      	ldrb	r0, [r0, #16]
   b546a:	f7ff fb69 	bl	b4b40 <hal_usart_peek>
}
   b546e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5472:	bd08      	pop	{r3, pc}

000b5474 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5474:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5476:	7c00      	ldrb	r0, [r0, #16]
   b5478:	f7ff fb5a 	bl	b4b30 <hal_usart_read>
}
   b547c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5480:	bd08      	pop	{r3, pc}

000b5482 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5482:	7c00      	ldrb	r0, [r0, #16]
   b5484:	f7ff bb64 	b.w	b4b50 <hal_usart_flush>

000b5488 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5488:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b548a:	7c45      	ldrb	r5, [r0, #17]
{
   b548c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b548e:	b12d      	cbz	r5, b549c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5490:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5492:	b003      	add	sp, #12
   b5494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5498:	f7ff bb3a 	b.w	b4b10 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b549c:	7c00      	ldrb	r0, [r0, #16]
   b549e:	9101      	str	r1, [sp, #4]
   b54a0:	f7ff fb5e 	bl	b4b60 <hal_usart_available_data_for_write>
   b54a4:	2800      	cmp	r0, #0
   b54a6:	9901      	ldr	r1, [sp, #4]
   b54a8:	dcf2      	bgt.n	b5490 <_ZN11USARTSerial5writeEh+0x8>
}
   b54aa:	4628      	mov	r0, r5
   b54ac:	b003      	add	sp, #12
   b54ae:	bd30      	pop	{r4, r5, pc}

000b54b0 <_ZN11USARTSerialD0Ev>:
   b54b0:	b510      	push	{r4, lr}
   b54b2:	2114      	movs	r1, #20
   b54b4:	4604      	mov	r4, r0
   b54b6:	f7fe fdf0 	bl	b409a <_ZdlPvj>
   b54ba:	4620      	mov	r0, r4
   b54bc:	bd10      	pop	{r4, pc}
	...

000b54c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b54c0:	b510      	push	{r4, lr}
   b54c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b54c6:	4604      	mov	r4, r0
   b54c8:	4608      	mov	r0, r1
   b54ca:	4611      	mov	r1, r2
   b54cc:	2200      	movs	r2, #0
   b54ce:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b54d2:	4b04      	ldr	r3, [pc, #16]	; (b54e4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b54d4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b54d6:	2301      	movs	r3, #1
  _serial = serial;
   b54d8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b54da:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b54dc:	f7ff fb48 	bl	b4b70 <hal_usart_init_ex>
}
   b54e0:	4620      	mov	r0, r4
   b54e2:	bd10      	pop	{r4, pc}
   b54e4:	000b6c0c 	.word	0x000b6c0c

000b54e8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b54e8:	7441      	strb	r1, [r0, #17]
}
   b54ea:	4770      	bx	lr

000b54ec <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b54ec:	4770      	bx	lr

000b54ee <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b54ee:	4770      	bx	lr

000b54f0 <_ZN9USBSerial4readEv>:
{
   b54f0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b54f2:	2100      	movs	r1, #0
   b54f4:	7c00      	ldrb	r0, [r0, #16]
   b54f6:	f7ff fb63 	bl	b4bc0 <HAL_USB_USART_Receive_Data>
}
   b54fa:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b54fe:	bd08      	pop	{r3, pc}

000b5500 <_ZN9USBSerial4peekEv>:
{
   b5500:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5502:	2101      	movs	r1, #1
   b5504:	7c00      	ldrb	r0, [r0, #16]
   b5506:	f7ff fb5b 	bl	b4bc0 <HAL_USB_USART_Receive_Data>
}
   b550a:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b550e:	bd08      	pop	{r3, pc}

000b5510 <_ZN9USBSerial17availableForWriteEv>:
{
   b5510:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5512:	7c00      	ldrb	r0, [r0, #16]
   b5514:	f7ff fb4c 	bl	b4bb0 <HAL_USB_USART_Available_Data_For_Write>
}
   b5518:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b551c:	bd08      	pop	{r3, pc}

000b551e <_ZN9USBSerial9availableEv>:
{
   b551e:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5520:	7c00      	ldrb	r0, [r0, #16]
   b5522:	f7ff fb3d 	bl	b4ba0 <HAL_USB_USART_Available_Data>
}
   b5526:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b552a:	bd08      	pop	{r3, pc}

000b552c <_ZN9USBSerial5writeEh>:
{
   b552c:	b513      	push	{r0, r1, r4, lr}
   b552e:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5530:	7c00      	ldrb	r0, [r0, #16]
{
   b5532:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b5534:	f7ff fb3c 	bl	b4bb0 <HAL_USB_USART_Available_Data_For_Write>
   b5538:	2800      	cmp	r0, #0
   b553a:	9901      	ldr	r1, [sp, #4]
   b553c:	dc01      	bgt.n	b5542 <_ZN9USBSerial5writeEh+0x16>
   b553e:	7c60      	ldrb	r0, [r4, #17]
   b5540:	b120      	cbz	r0, b554c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b5542:	7c20      	ldrb	r0, [r4, #16]
   b5544:	f7ff fb44 	bl	b4bd0 <HAL_USB_USART_Send_Data>
   b5548:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b554c:	b002      	add	sp, #8
   b554e:	bd10      	pop	{r4, pc}

000b5550 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b5550:	7c00      	ldrb	r0, [r0, #16]
   b5552:	f7ff bb45 	b.w	b4be0 <HAL_USB_USART_Flush_Data>

000b5556 <_ZN9USBSerialD0Ev>:
   b5556:	b510      	push	{r4, lr}
   b5558:	2114      	movs	r1, #20
   b555a:	4604      	mov	r4, r0
   b555c:	f7fe fd9d 	bl	b409a <_ZdlPvj>
   b5560:	4620      	mov	r0, r4
   b5562:	bd10      	pop	{r4, pc}

000b5564 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b5564:	b510      	push	{r4, lr}
   b5566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b556a:	4604      	mov	r4, r0
   b556c:	4608      	mov	r0, r1
   b556e:	2100      	movs	r1, #0
   b5570:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b5574:	4b04      	ldr	r3, [pc, #16]	; (b5588 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b5576:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5578:	2301      	movs	r3, #1
  _serial = serial;
   b557a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b557c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b557e:	4611      	mov	r1, r2
   b5580:	f7ff fafe 	bl	b4b80 <HAL_USB_USART_Init>
}
   b5584:	4620      	mov	r0, r4
   b5586:	bd10      	pop	{r4, pc}
   b5588:	000b6c3c 	.word	0x000b6c3c

000b558c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   b558c:	7c00      	ldrb	r0, [r0, #16]
   b558e:	2200      	movs	r2, #0
   b5590:	f7ff bafe 	b.w	b4b90 <HAL_USB_USART_Begin>

000b5594 <_Z19acquireSerialBufferv>:
{
   b5594:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b5596:	2214      	movs	r2, #20
{
   b5598:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b559a:	2100      	movs	r1, #0
   b559c:	f000 fe9c 	bl	b62d8 <memset>
}
   b55a0:	4620      	mov	r0, r4
   b55a2:	bd10      	pop	{r4, pc}

000b55a4 <_Z16_fetch_usbserialv>:
{
   b55a4:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b55a6:	4c0f      	ldr	r4, [pc, #60]	; (b55e4 <_Z16_fetch_usbserialv+0x40>)
{
   b55a8:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b55aa:	a803      	add	r0, sp, #12
   b55ac:	f7ff fff2 	bl	b5594 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b55b0:	7821      	ldrb	r1, [r4, #0]
   b55b2:	f3bf 8f5b 	dmb	ish
   b55b6:	f011 0101 	ands.w	r1, r1, #1
   b55ba:	d10f      	bne.n	b55dc <_Z16_fetch_usbserialv+0x38>
   b55bc:	4620      	mov	r0, r4
   b55be:	9101      	str	r1, [sp, #4]
   b55c0:	f7fe fd6d 	bl	b409e <__cxa_guard_acquire>
   b55c4:	9901      	ldr	r1, [sp, #4]
   b55c6:	b148      	cbz	r0, b55dc <_Z16_fetch_usbserialv+0x38>
   b55c8:	aa03      	add	r2, sp, #12
   b55ca:	4807      	ldr	r0, [pc, #28]	; (b55e8 <_Z16_fetch_usbserialv+0x44>)
   b55cc:	f7ff ffca 	bl	b5564 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b55d0:	4620      	mov	r0, r4
   b55d2:	f7fe fd69 	bl	b40a8 <__cxa_guard_release>
   b55d6:	4805      	ldr	r0, [pc, #20]	; (b55ec <_Z16_fetch_usbserialv+0x48>)
   b55d8:	f000 fe6a 	bl	b62b0 <atexit>
	return _usbserial;
}
   b55dc:	4802      	ldr	r0, [pc, #8]	; (b55e8 <_Z16_fetch_usbserialv+0x44>)
   b55de:	b008      	add	sp, #32
   b55e0:	bd10      	pop	{r4, pc}
   b55e2:	bf00      	nop
   b55e4:	2003e700 	.word	0x2003e700
   b55e8:	2003e704 	.word	0x2003e704
   b55ec:	000b54ed 	.word	0x000b54ed

000b55f0 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b55f0:	2200      	movs	r2, #0
   b55f2:	6840      	ldr	r0, [r0, #4]
   b55f4:	4611      	mov	r1, r2
   b55f6:	f7ff bb3f 	b.w	b4c78 <network_ready>

000b55fa <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b55fa:	2200      	movs	r2, #0
   b55fc:	6840      	ldr	r0, [r0, #4]
   b55fe:	4611      	mov	r1, r2
   b5600:	f7ff bb5a 	b.w	b4cb8 <network_listening>

000b5604 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5604:	2200      	movs	r2, #0
   b5606:	6840      	ldr	r0, [r0, #4]
   b5608:	4611      	mov	r1, r2
   b560a:	f7ff bb65 	b.w	b4cd8 <network_get_listen_timeout>

000b560e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b560e:	6840      	ldr	r0, [r0, #4]
   b5610:	2200      	movs	r2, #0
   b5612:	f7ff bb59 	b.w	b4cc8 <network_set_listen_timeout>

000b5616 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5616:	6840      	ldr	r0, [r0, #4]
   b5618:	2200      	movs	r2, #0
   b561a:	f081 0101 	eor.w	r1, r1, #1
   b561e:	f7ff bb43 	b.w	b4ca8 <network_listen>

000b5622 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5622:	2300      	movs	r3, #0
   b5624:	6840      	ldr	r0, [r0, #4]
   b5626:	461a      	mov	r2, r3
   b5628:	4619      	mov	r1, r3
   b562a:	f7ff bb35 	b.w	b4c98 <network_off>

000b562e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b562e:	2300      	movs	r3, #0
   b5630:	6840      	ldr	r0, [r0, #4]
   b5632:	461a      	mov	r2, r3
   b5634:	4619      	mov	r1, r3
   b5636:	f7ff bb27 	b.w	b4c88 <network_on>

000b563a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b563a:	2200      	movs	r2, #0
   b563c:	6840      	ldr	r0, [r0, #4]
   b563e:	4611      	mov	r1, r2
   b5640:	f7ff bb0a 	b.w	b4c58 <network_connecting>

000b5644 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5644:	6840      	ldr	r0, [r0, #4]
   b5646:	2200      	movs	r2, #0
   b5648:	2102      	movs	r1, #2
   b564a:	f7ff bb0d 	b.w	b4c68 <network_disconnect>

000b564e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b564e:	2300      	movs	r3, #0
   b5650:	6840      	ldr	r0, [r0, #4]
   b5652:	461a      	mov	r2, r3
   b5654:	f7ff baf8 	b.w	b4c48 <network_connect>

000b5658 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b5658:	4b02      	ldr	r3, [pc, #8]	; (b5664 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b565a:	2204      	movs	r2, #4
   b565c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b565e:	4a02      	ldr	r2, [pc, #8]	; (b5668 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b5660:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b5662:	4770      	bx	lr
   b5664:	2003e718 	.word	0x2003e718
   b5668:	000b6c6c 	.word	0x000b6c6c

000b566c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b566c:	4b01      	ldr	r3, [pc, #4]	; (b5674 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b566e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b5670:	4770      	bx	lr
   b5672:	bf00      	nop
   b5674:	2003e640 	.word	0x2003e640

000b5678 <serialEventRun>:
{
   b5678:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b567a:	4b0b      	ldr	r3, [pc, #44]	; (b56a8 <serialEventRun+0x30>)
   b567c:	b143      	cbz	r3, b5690 <serialEventRun+0x18>
   b567e:	f7ff ff91 	bl	b55a4 <_Z16_fetch_usbserialv>
   b5682:	6803      	ldr	r3, [r0, #0]
   b5684:	691b      	ldr	r3, [r3, #16]
   b5686:	4798      	blx	r3
   b5688:	2800      	cmp	r0, #0
   b568a:	dd01      	ble.n	b5690 <serialEventRun+0x18>
        serialEvent();
   b568c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b5690:	4b06      	ldr	r3, [pc, #24]	; (b56ac <serialEventRun+0x34>)
   b5692:	b143      	cbz	r3, b56a6 <serialEventRun+0x2e>
   b5694:	f000 f8e2 	bl	b585c <_Z22__fetch_global_Serial1v>
   b5698:	6803      	ldr	r3, [r0, #0]
   b569a:	691b      	ldr	r3, [r3, #16]
   b569c:	4798      	blx	r3
   b569e:	2800      	cmp	r0, #0
   b56a0:	dd01      	ble.n	b56a6 <serialEventRun+0x2e>
        serialEvent1();
   b56a2:	f3af 8000 	nop.w
}
   b56a6:	bd08      	pop	{r3, pc}
	...

000b56b0 <_post_loop>:
{
   b56b0:	b508      	push	{r3, lr}
	serialEventRun();
   b56b2:	f7ff ffe1 	bl	b5678 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b56b6:	f7ff f9bb 	bl	b4a30 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b56ba:	4b01      	ldr	r3, [pc, #4]	; (b56c0 <_post_loop+0x10>)
   b56bc:	6018      	str	r0, [r3, #0]
}
   b56be:	bd08      	pop	{r3, pc}
   b56c0:	2003e728 	.word	0x2003e728

000b56c4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b56c4:	4805      	ldr	r0, [pc, #20]	; (b56dc <_Z33system_initialize_user_backup_ramv+0x18>)
   b56c6:	4a06      	ldr	r2, [pc, #24]	; (b56e0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b56c8:	4906      	ldr	r1, [pc, #24]	; (b56e4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b56ca:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b56cc:	1a12      	subs	r2, r2, r0
   b56ce:	f000 fdf5 	bl	b62bc <memcpy>
    __backup_sram_signature = signature;
   b56d2:	4b05      	ldr	r3, [pc, #20]	; (b56e8 <_Z33system_initialize_user_backup_ramv+0x24>)
   b56d4:	4a05      	ldr	r2, [pc, #20]	; (b56ec <_Z33system_initialize_user_backup_ramv+0x28>)
   b56d6:	601a      	str	r2, [r3, #0]
}
   b56d8:	bd08      	pop	{r3, pc}
   b56da:	bf00      	nop
   b56dc:	2003f400 	.word	0x2003f400
   b56e0:	2003f404 	.word	0x2003f404
   b56e4:	000b6d64 	.word	0x000b6d64
   b56e8:	2003f400 	.word	0x2003f400
   b56ec:	9a271c1e 	.word	0x9a271c1e

000b56f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b56f0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b56f2:	2300      	movs	r3, #0
   b56f4:	9300      	str	r3, [sp, #0]
   b56f6:	461a      	mov	r2, r3
   b56f8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b56fc:	f7ff fa92 	bl	b4c24 <system_ctrl_set_result>
}
   b5700:	b003      	add	sp, #12
   b5702:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b5708 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b5708:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b570a:	8843      	ldrh	r3, [r0, #2]
   b570c:	2b0a      	cmp	r3, #10
   b570e:	d008      	beq.n	b5722 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b5710:	2b50      	cmp	r3, #80	; 0x50
   b5712:	d10b      	bne.n	b572c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b5714:	4b09      	ldr	r3, [pc, #36]	; (b573c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b5716:	681b      	ldr	r3, [r3, #0]
   b5718:	b14b      	cbz	r3, b572e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b571a:	b003      	add	sp, #12
   b571c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b5720:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b5722:	f7ff ffe5 	bl	b56f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b5726:	b003      	add	sp, #12
   b5728:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b572c:	2300      	movs	r3, #0
   b572e:	9300      	str	r3, [sp, #0]
   b5730:	461a      	mov	r2, r3
   b5732:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b5736:	f7ff fa75 	bl	b4c24 <system_ctrl_set_result>
}
   b573a:	e7f4      	b.n	b5726 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b573c:	2003e724 	.word	0x2003e724

000b5740 <module_user_init_hook>:
{
   b5740:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b5742:	4812      	ldr	r0, [pc, #72]	; (b578c <module_user_init_hook+0x4c>)
   b5744:	2100      	movs	r1, #0
   b5746:	f7ff faf7 	bl	b4d38 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b574a:	4b11      	ldr	r3, [pc, #68]	; (b5790 <module_user_init_hook+0x50>)
   b574c:	681a      	ldr	r2, [r3, #0]
   b574e:	4b11      	ldr	r3, [pc, #68]	; (b5794 <module_user_init_hook+0x54>)
   b5750:	429a      	cmp	r2, r3
   b5752:	4b11      	ldr	r3, [pc, #68]	; (b5798 <module_user_init_hook+0x58>)
   b5754:	bf0c      	ite	eq
   b5756:	2201      	moveq	r2, #1
   b5758:	2200      	movne	r2, #0
   b575a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b575c:	d001      	beq.n	b5762 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b575e:	f7ff ffb1 	bl	b56c4 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b5762:	f7ff f95d 	bl	b4a20 <HAL_RNG_GetRandomNumber>
   b5766:	4604      	mov	r4, r0
    srand(seed);
   b5768:	f000 fdbe 	bl	b62e8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b576c:	4b0b      	ldr	r3, [pc, #44]	; (b579c <module_user_init_hook+0x5c>)
   b576e:	b113      	cbz	r3, b5776 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b5770:	4620      	mov	r0, r4
   b5772:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b5776:	2100      	movs	r1, #0
   b5778:	4808      	ldr	r0, [pc, #32]	; (b579c <module_user_init_hook+0x5c>)
   b577a:	f7ff fa5d 	bl	b4c38 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b577e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b5782:	4807      	ldr	r0, [pc, #28]	; (b57a0 <module_user_init_hook+0x60>)
   b5784:	2100      	movs	r1, #0
   b5786:	f7ff ba43 	b.w	b4c10 <system_ctrl_set_app_request_handler>
   b578a:	bf00      	nop
   b578c:	000b566d 	.word	0x000b566d
   b5790:	2003f400 	.word	0x2003f400
   b5794:	9a271c1e 	.word	0x9a271c1e
   b5798:	2003e720 	.word	0x2003e720
   b579c:	00000000 	.word	0x00000000
   b57a0:	000b5709 	.word	0x000b5709

000b57a4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57a4:	4770      	bx	lr
	...

000b57a8 <_Z17acquireWireBufferv>:
{
   b57a8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b57aa:	4b0a      	ldr	r3, [pc, #40]	; (b57d4 <_Z17acquireWireBufferv+0x2c>)
   b57ac:	6003      	str	r3, [r0, #0]
   b57ae:	2301      	movs	r3, #1
{
   b57b0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b57b2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b57b4:	4908      	ldr	r1, [pc, #32]	; (b57d8 <_Z17acquireWireBufferv+0x30>)
   b57b6:	2020      	movs	r0, #32
   b57b8:	f000 f874 	bl	b58a4 <_ZnajRKSt9nothrow_t>
	};
   b57bc:	2520      	movs	r5, #32
   b57be:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b57c0:	4905      	ldr	r1, [pc, #20]	; (b57d8 <_Z17acquireWireBufferv+0x30>)
	};
   b57c2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b57c4:	4628      	mov	r0, r5
   b57c6:	f000 f86d 	bl	b58a4 <_ZnajRKSt9nothrow_t>
	};
   b57ca:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b57ce:	4620      	mov	r0, r4
   b57d0:	bd38      	pop	{r3, r4, r5, pc}
   b57d2:	bf00      	nop
   b57d4:	00010018 	.word	0x00010018
   b57d8:	000b6ca0 	.word	0x000b6ca0

000b57dc <_Z19__fetch_global_Wirev>:
{
   b57dc:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57de:	4d0e      	ldr	r5, [pc, #56]	; (b5818 <_Z19__fetch_global_Wirev+0x3c>)
   b57e0:	7829      	ldrb	r1, [r5, #0]
   b57e2:	f3bf 8f5b 	dmb	ish
   b57e6:	f011 0401 	ands.w	r4, r1, #1
{
   b57ea:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b57ec:	d111      	bne.n	b5812 <_Z19__fetch_global_Wirev+0x36>
   b57ee:	4628      	mov	r0, r5
   b57f0:	f7fe fc55 	bl	b409e <__cxa_guard_acquire>
   b57f4:	b168      	cbz	r0, b5812 <_Z19__fetch_global_Wirev+0x36>
   b57f6:	4668      	mov	r0, sp
   b57f8:	f7ff ffd6 	bl	b57a8 <_Z17acquireWireBufferv>
   b57fc:	466a      	mov	r2, sp
   b57fe:	4621      	mov	r1, r4
   b5800:	4806      	ldr	r0, [pc, #24]	; (b581c <_Z19__fetch_global_Wirev+0x40>)
   b5802:	f7ff fb17 	bl	b4e34 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b5806:	4628      	mov	r0, r5
   b5808:	f7fe fc4e 	bl	b40a8 <__cxa_guard_release>
   b580c:	4804      	ldr	r0, [pc, #16]	; (b5820 <_Z19__fetch_global_Wirev+0x44>)
   b580e:	f000 fd4f 	bl	b62b0 <atexit>
	return wire;
}
   b5812:	4802      	ldr	r0, [pc, #8]	; (b581c <_Z19__fetch_global_Wirev+0x40>)
   b5814:	b007      	add	sp, #28
   b5816:	bd30      	pop	{r4, r5, pc}
   b5818:	2003e72c 	.word	0x2003e72c
   b581c:	2003e730 	.word	0x2003e730
   b5820:	000b57a5 	.word	0x000b57a5

000b5824 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b5824:	4770      	bx	lr
	...

000b5828 <_Z20acquireSerial1Bufferv>:
{
   b5828:	b538      	push	{r3, r4, r5, lr}
   b582a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b582c:	2514      	movs	r5, #20
   b582e:	462a      	mov	r2, r5
   b5830:	2100      	movs	r1, #0
   b5832:	f000 fd51 	bl	b62d8 <memset>
   b5836:	8025      	strh	r5, [r4, #0]
   b5838:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b583a:	4907      	ldr	r1, [pc, #28]	; (b5858 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b583c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b583e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b5840:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5842:	f000 f82f 	bl	b58a4 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b5846:	4904      	ldr	r1, [pc, #16]	; (b5858 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b5848:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b584a:	4628      	mov	r0, r5
   b584c:	f000 f82a 	bl	b58a4 <_ZnajRKSt9nothrow_t>
    };
   b5850:	60e0      	str	r0, [r4, #12]
}
   b5852:	4620      	mov	r0, r4
   b5854:	bd38      	pop	{r3, r4, r5, pc}
   b5856:	bf00      	nop
   b5858:	000b6ca0 	.word	0x000b6ca0

000b585c <_Z22__fetch_global_Serial1v>:
{
   b585c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b585e:	4d0e      	ldr	r5, [pc, #56]	; (b5898 <_Z22__fetch_global_Serial1v+0x3c>)
   b5860:	7829      	ldrb	r1, [r5, #0]
   b5862:	f3bf 8f5b 	dmb	ish
   b5866:	f011 0401 	ands.w	r4, r1, #1
{
   b586a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b586c:	d111      	bne.n	b5892 <_Z22__fetch_global_Serial1v+0x36>
   b586e:	4628      	mov	r0, r5
   b5870:	f7fe fc15 	bl	b409e <__cxa_guard_acquire>
   b5874:	b168      	cbz	r0, b5892 <_Z22__fetch_global_Serial1v+0x36>
   b5876:	a801      	add	r0, sp, #4
   b5878:	f7ff ffd6 	bl	b5828 <_Z20acquireSerial1Bufferv>
   b587c:	aa01      	add	r2, sp, #4
   b587e:	4621      	mov	r1, r4
   b5880:	4806      	ldr	r0, [pc, #24]	; (b589c <_Z22__fetch_global_Serial1v+0x40>)
   b5882:	f7ff fe1d 	bl	b54c0 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b5886:	4628      	mov	r0, r5
   b5888:	f7fe fc0e 	bl	b40a8 <__cxa_guard_release>
   b588c:	4804      	ldr	r0, [pc, #16]	; (b58a0 <_Z22__fetch_global_Serial1v+0x44>)
   b588e:	f000 fd0f 	bl	b62b0 <atexit>
    return serial1;
}
   b5892:	4802      	ldr	r0, [pc, #8]	; (b589c <_Z22__fetch_global_Serial1v+0x40>)
   b5894:	b007      	add	sp, #28
   b5896:	bd30      	pop	{r4, r5, pc}
   b5898:	2003e744 	.word	0x2003e744
   b589c:	2003e748 	.word	0x2003e748
   b58a0:	000b5825 	.word	0x000b5825

000b58a4 <_ZnajRKSt9nothrow_t>:
   b58a4:	f7fe bbf7 	b.w	b4096 <_Znaj>

000b58a8 <__aeabi_drsub>:
   b58a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b58ac:	e002      	b.n	b58b4 <__adddf3>
   b58ae:	bf00      	nop

000b58b0 <__aeabi_dsub>:
   b58b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b58b4 <__adddf3>:
   b58b4:	b530      	push	{r4, r5, lr}
   b58b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b58ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b58be:	ea94 0f05 	teq	r4, r5
   b58c2:	bf08      	it	eq
   b58c4:	ea90 0f02 	teqeq	r0, r2
   b58c8:	bf1f      	itttt	ne
   b58ca:	ea54 0c00 	orrsne.w	ip, r4, r0
   b58ce:	ea55 0c02 	orrsne.w	ip, r5, r2
   b58d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b58d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b58da:	f000 80e2 	beq.w	b5aa2 <__adddf3+0x1ee>
   b58de:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b58e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b58e6:	bfb8      	it	lt
   b58e8:	426d      	neglt	r5, r5
   b58ea:	dd0c      	ble.n	b5906 <__adddf3+0x52>
   b58ec:	442c      	add	r4, r5
   b58ee:	ea80 0202 	eor.w	r2, r0, r2
   b58f2:	ea81 0303 	eor.w	r3, r1, r3
   b58f6:	ea82 0000 	eor.w	r0, r2, r0
   b58fa:	ea83 0101 	eor.w	r1, r3, r1
   b58fe:	ea80 0202 	eor.w	r2, r0, r2
   b5902:	ea81 0303 	eor.w	r3, r1, r3
   b5906:	2d36      	cmp	r5, #54	; 0x36
   b5908:	bf88      	it	hi
   b590a:	bd30      	pophi	{r4, r5, pc}
   b590c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b5910:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5914:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b5918:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b591c:	d002      	beq.n	b5924 <__adddf3+0x70>
   b591e:	4240      	negs	r0, r0
   b5920:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5924:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b5928:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b592c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b5930:	d002      	beq.n	b5938 <__adddf3+0x84>
   b5932:	4252      	negs	r2, r2
   b5934:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b5938:	ea94 0f05 	teq	r4, r5
   b593c:	f000 80a7 	beq.w	b5a8e <__adddf3+0x1da>
   b5940:	f1a4 0401 	sub.w	r4, r4, #1
   b5944:	f1d5 0e20 	rsbs	lr, r5, #32
   b5948:	db0d      	blt.n	b5966 <__adddf3+0xb2>
   b594a:	fa02 fc0e 	lsl.w	ip, r2, lr
   b594e:	fa22 f205 	lsr.w	r2, r2, r5
   b5952:	1880      	adds	r0, r0, r2
   b5954:	f141 0100 	adc.w	r1, r1, #0
   b5958:	fa03 f20e 	lsl.w	r2, r3, lr
   b595c:	1880      	adds	r0, r0, r2
   b595e:	fa43 f305 	asr.w	r3, r3, r5
   b5962:	4159      	adcs	r1, r3
   b5964:	e00e      	b.n	b5984 <__adddf3+0xd0>
   b5966:	f1a5 0520 	sub.w	r5, r5, #32
   b596a:	f10e 0e20 	add.w	lr, lr, #32
   b596e:	2a01      	cmp	r2, #1
   b5970:	fa03 fc0e 	lsl.w	ip, r3, lr
   b5974:	bf28      	it	cs
   b5976:	f04c 0c02 	orrcs.w	ip, ip, #2
   b597a:	fa43 f305 	asr.w	r3, r3, r5
   b597e:	18c0      	adds	r0, r0, r3
   b5980:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b5984:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5988:	d507      	bpl.n	b599a <__adddf3+0xe6>
   b598a:	f04f 0e00 	mov.w	lr, #0
   b598e:	f1dc 0c00 	rsbs	ip, ip, #0
   b5992:	eb7e 0000 	sbcs.w	r0, lr, r0
   b5996:	eb6e 0101 	sbc.w	r1, lr, r1
   b599a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b599e:	d31b      	bcc.n	b59d8 <__adddf3+0x124>
   b59a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b59a4:	d30c      	bcc.n	b59c0 <__adddf3+0x10c>
   b59a6:	0849      	lsrs	r1, r1, #1
   b59a8:	ea5f 0030 	movs.w	r0, r0, rrx
   b59ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b59b0:	f104 0401 	add.w	r4, r4, #1
   b59b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b59b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b59bc:	f080 809a 	bcs.w	b5af4 <__adddf3+0x240>
   b59c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b59c4:	bf08      	it	eq
   b59c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b59ca:	f150 0000 	adcs.w	r0, r0, #0
   b59ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b59d2:	ea41 0105 	orr.w	r1, r1, r5
   b59d6:	bd30      	pop	{r4, r5, pc}
   b59d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b59dc:	4140      	adcs	r0, r0
   b59de:	eb41 0101 	adc.w	r1, r1, r1
   b59e2:	3c01      	subs	r4, #1
   b59e4:	bf28      	it	cs
   b59e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b59ea:	d2e9      	bcs.n	b59c0 <__adddf3+0x10c>
   b59ec:	f091 0f00 	teq	r1, #0
   b59f0:	bf04      	itt	eq
   b59f2:	4601      	moveq	r1, r0
   b59f4:	2000      	moveq	r0, #0
   b59f6:	fab1 f381 	clz	r3, r1
   b59fa:	bf08      	it	eq
   b59fc:	3320      	addeq	r3, #32
   b59fe:	f1a3 030b 	sub.w	r3, r3, #11
   b5a02:	f1b3 0220 	subs.w	r2, r3, #32
   b5a06:	da0c      	bge.n	b5a22 <__adddf3+0x16e>
   b5a08:	320c      	adds	r2, #12
   b5a0a:	dd08      	ble.n	b5a1e <__adddf3+0x16a>
   b5a0c:	f102 0c14 	add.w	ip, r2, #20
   b5a10:	f1c2 020c 	rsb	r2, r2, #12
   b5a14:	fa01 f00c 	lsl.w	r0, r1, ip
   b5a18:	fa21 f102 	lsr.w	r1, r1, r2
   b5a1c:	e00c      	b.n	b5a38 <__adddf3+0x184>
   b5a1e:	f102 0214 	add.w	r2, r2, #20
   b5a22:	bfd8      	it	le
   b5a24:	f1c2 0c20 	rsble	ip, r2, #32
   b5a28:	fa01 f102 	lsl.w	r1, r1, r2
   b5a2c:	fa20 fc0c 	lsr.w	ip, r0, ip
   b5a30:	bfdc      	itt	le
   b5a32:	ea41 010c 	orrle.w	r1, r1, ip
   b5a36:	4090      	lslle	r0, r2
   b5a38:	1ae4      	subs	r4, r4, r3
   b5a3a:	bfa2      	ittt	ge
   b5a3c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b5a40:	4329      	orrge	r1, r5
   b5a42:	bd30      	popge	{r4, r5, pc}
   b5a44:	ea6f 0404 	mvn.w	r4, r4
   b5a48:	3c1f      	subs	r4, #31
   b5a4a:	da1c      	bge.n	b5a86 <__adddf3+0x1d2>
   b5a4c:	340c      	adds	r4, #12
   b5a4e:	dc0e      	bgt.n	b5a6e <__adddf3+0x1ba>
   b5a50:	f104 0414 	add.w	r4, r4, #20
   b5a54:	f1c4 0220 	rsb	r2, r4, #32
   b5a58:	fa20 f004 	lsr.w	r0, r0, r4
   b5a5c:	fa01 f302 	lsl.w	r3, r1, r2
   b5a60:	ea40 0003 	orr.w	r0, r0, r3
   b5a64:	fa21 f304 	lsr.w	r3, r1, r4
   b5a68:	ea45 0103 	orr.w	r1, r5, r3
   b5a6c:	bd30      	pop	{r4, r5, pc}
   b5a6e:	f1c4 040c 	rsb	r4, r4, #12
   b5a72:	f1c4 0220 	rsb	r2, r4, #32
   b5a76:	fa20 f002 	lsr.w	r0, r0, r2
   b5a7a:	fa01 f304 	lsl.w	r3, r1, r4
   b5a7e:	ea40 0003 	orr.w	r0, r0, r3
   b5a82:	4629      	mov	r1, r5
   b5a84:	bd30      	pop	{r4, r5, pc}
   b5a86:	fa21 f004 	lsr.w	r0, r1, r4
   b5a8a:	4629      	mov	r1, r5
   b5a8c:	bd30      	pop	{r4, r5, pc}
   b5a8e:	f094 0f00 	teq	r4, #0
   b5a92:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b5a96:	bf06      	itte	eq
   b5a98:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b5a9c:	3401      	addeq	r4, #1
   b5a9e:	3d01      	subne	r5, #1
   b5aa0:	e74e      	b.n	b5940 <__adddf3+0x8c>
   b5aa2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5aa6:	bf18      	it	ne
   b5aa8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b5aac:	d029      	beq.n	b5b02 <__adddf3+0x24e>
   b5aae:	ea94 0f05 	teq	r4, r5
   b5ab2:	bf08      	it	eq
   b5ab4:	ea90 0f02 	teqeq	r0, r2
   b5ab8:	d005      	beq.n	b5ac6 <__adddf3+0x212>
   b5aba:	ea54 0c00 	orrs.w	ip, r4, r0
   b5abe:	bf04      	itt	eq
   b5ac0:	4619      	moveq	r1, r3
   b5ac2:	4610      	moveq	r0, r2
   b5ac4:	bd30      	pop	{r4, r5, pc}
   b5ac6:	ea91 0f03 	teq	r1, r3
   b5aca:	bf1e      	ittt	ne
   b5acc:	2100      	movne	r1, #0
   b5ace:	2000      	movne	r0, #0
   b5ad0:	bd30      	popne	{r4, r5, pc}
   b5ad2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b5ad6:	d105      	bne.n	b5ae4 <__adddf3+0x230>
   b5ad8:	0040      	lsls	r0, r0, #1
   b5ada:	4149      	adcs	r1, r1
   b5adc:	bf28      	it	cs
   b5ade:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b5ae2:	bd30      	pop	{r4, r5, pc}
   b5ae4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b5ae8:	bf3c      	itt	cc
   b5aea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b5aee:	bd30      	popcc	{r4, r5, pc}
   b5af0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5af4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b5af8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5afc:	f04f 0000 	mov.w	r0, #0
   b5b00:	bd30      	pop	{r4, r5, pc}
   b5b02:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b5b06:	bf1a      	itte	ne
   b5b08:	4619      	movne	r1, r3
   b5b0a:	4610      	movne	r0, r2
   b5b0c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b5b10:	bf1c      	itt	ne
   b5b12:	460b      	movne	r3, r1
   b5b14:	4602      	movne	r2, r0
   b5b16:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5b1a:	bf06      	itte	eq
   b5b1c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b5b20:	ea91 0f03 	teqeq	r1, r3
   b5b24:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b5b28:	bd30      	pop	{r4, r5, pc}
   b5b2a:	bf00      	nop

000b5b2c <__aeabi_ui2d>:
   b5b2c:	f090 0f00 	teq	r0, #0
   b5b30:	bf04      	itt	eq
   b5b32:	2100      	moveq	r1, #0
   b5b34:	4770      	bxeq	lr
   b5b36:	b530      	push	{r4, r5, lr}
   b5b38:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5b3c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5b40:	f04f 0500 	mov.w	r5, #0
   b5b44:	f04f 0100 	mov.w	r1, #0
   b5b48:	e750      	b.n	b59ec <__adddf3+0x138>
   b5b4a:	bf00      	nop

000b5b4c <__aeabi_i2d>:
   b5b4c:	f090 0f00 	teq	r0, #0
   b5b50:	bf04      	itt	eq
   b5b52:	2100      	moveq	r1, #0
   b5b54:	4770      	bxeq	lr
   b5b56:	b530      	push	{r4, r5, lr}
   b5b58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5b5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5b60:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b5b64:	bf48      	it	mi
   b5b66:	4240      	negmi	r0, r0
   b5b68:	f04f 0100 	mov.w	r1, #0
   b5b6c:	e73e      	b.n	b59ec <__adddf3+0x138>
   b5b6e:	bf00      	nop

000b5b70 <__aeabi_f2d>:
   b5b70:	0042      	lsls	r2, r0, #1
   b5b72:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b5b76:	ea4f 0131 	mov.w	r1, r1, rrx
   b5b7a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b5b7e:	bf1f      	itttt	ne
   b5b80:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b5b84:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b5b88:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b5b8c:	4770      	bxne	lr
   b5b8e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b5b92:	bf08      	it	eq
   b5b94:	4770      	bxeq	lr
   b5b96:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b5b9a:	bf04      	itt	eq
   b5b9c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b5ba0:	4770      	bxeq	lr
   b5ba2:	b530      	push	{r4, r5, lr}
   b5ba4:	f44f 7460 	mov.w	r4, #896	; 0x380
   b5ba8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b5bac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5bb0:	e71c      	b.n	b59ec <__adddf3+0x138>
   b5bb2:	bf00      	nop

000b5bb4 <__aeabi_ul2d>:
   b5bb4:	ea50 0201 	orrs.w	r2, r0, r1
   b5bb8:	bf08      	it	eq
   b5bba:	4770      	bxeq	lr
   b5bbc:	b530      	push	{r4, r5, lr}
   b5bbe:	f04f 0500 	mov.w	r5, #0
   b5bc2:	e00a      	b.n	b5bda <__aeabi_l2d+0x16>

000b5bc4 <__aeabi_l2d>:
   b5bc4:	ea50 0201 	orrs.w	r2, r0, r1
   b5bc8:	bf08      	it	eq
   b5bca:	4770      	bxeq	lr
   b5bcc:	b530      	push	{r4, r5, lr}
   b5bce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b5bd2:	d502      	bpl.n	b5bda <__aeabi_l2d+0x16>
   b5bd4:	4240      	negs	r0, r0
   b5bd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b5bda:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b5bde:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b5be2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b5be6:	f43f aed8 	beq.w	b599a <__adddf3+0xe6>
   b5bea:	f04f 0203 	mov.w	r2, #3
   b5bee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b5bf2:	bf18      	it	ne
   b5bf4:	3203      	addne	r2, #3
   b5bf6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b5bfa:	bf18      	it	ne
   b5bfc:	3203      	addne	r2, #3
   b5bfe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b5c02:	f1c2 0320 	rsb	r3, r2, #32
   b5c06:	fa00 fc03 	lsl.w	ip, r0, r3
   b5c0a:	fa20 f002 	lsr.w	r0, r0, r2
   b5c0e:	fa01 fe03 	lsl.w	lr, r1, r3
   b5c12:	ea40 000e 	orr.w	r0, r0, lr
   b5c16:	fa21 f102 	lsr.w	r1, r1, r2
   b5c1a:	4414      	add	r4, r2
   b5c1c:	e6bd      	b.n	b599a <__adddf3+0xe6>
   b5c1e:	bf00      	nop

000b5c20 <__aeabi_dmul>:
   b5c20:	b570      	push	{r4, r5, r6, lr}
   b5c22:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5c26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b5c2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b5c2e:	bf1d      	ittte	ne
   b5c30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5c34:	ea94 0f0c 	teqne	r4, ip
   b5c38:	ea95 0f0c 	teqne	r5, ip
   b5c3c:	f000 f8de 	bleq	b5dfc <__aeabi_dmul+0x1dc>
   b5c40:	442c      	add	r4, r5
   b5c42:	ea81 0603 	eor.w	r6, r1, r3
   b5c46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b5c4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b5c4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b5c52:	bf18      	it	ne
   b5c54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b5c58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5c5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b5c60:	d038      	beq.n	b5cd4 <__aeabi_dmul+0xb4>
   b5c62:	fba0 ce02 	umull	ip, lr, r0, r2
   b5c66:	f04f 0500 	mov.w	r5, #0
   b5c6a:	fbe1 e502 	umlal	lr, r5, r1, r2
   b5c6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b5c72:	fbe0 e503 	umlal	lr, r5, r0, r3
   b5c76:	f04f 0600 	mov.w	r6, #0
   b5c7a:	fbe1 5603 	umlal	r5, r6, r1, r3
   b5c7e:	f09c 0f00 	teq	ip, #0
   b5c82:	bf18      	it	ne
   b5c84:	f04e 0e01 	orrne.w	lr, lr, #1
   b5c88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b5c8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b5c90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b5c94:	d204      	bcs.n	b5ca0 <__aeabi_dmul+0x80>
   b5c96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b5c9a:	416d      	adcs	r5, r5
   b5c9c:	eb46 0606 	adc.w	r6, r6, r6
   b5ca0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b5ca4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b5ca8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b5cac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b5cb0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b5cb4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b5cb8:	bf88      	it	hi
   b5cba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b5cbe:	d81e      	bhi.n	b5cfe <__aeabi_dmul+0xde>
   b5cc0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b5cc4:	bf08      	it	eq
   b5cc6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b5cca:	f150 0000 	adcs.w	r0, r0, #0
   b5cce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5cd2:	bd70      	pop	{r4, r5, r6, pc}
   b5cd4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b5cd8:	ea46 0101 	orr.w	r1, r6, r1
   b5cdc:	ea40 0002 	orr.w	r0, r0, r2
   b5ce0:	ea81 0103 	eor.w	r1, r1, r3
   b5ce4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b5ce8:	bfc2      	ittt	gt
   b5cea:	ebd4 050c 	rsbsgt	r5, r4, ip
   b5cee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5cf2:	bd70      	popgt	{r4, r5, r6, pc}
   b5cf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5cf8:	f04f 0e00 	mov.w	lr, #0
   b5cfc:	3c01      	subs	r4, #1
   b5cfe:	f300 80ab 	bgt.w	b5e58 <__aeabi_dmul+0x238>
   b5d02:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b5d06:	bfde      	ittt	le
   b5d08:	2000      	movle	r0, #0
   b5d0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b5d0e:	bd70      	pople	{r4, r5, r6, pc}
   b5d10:	f1c4 0400 	rsb	r4, r4, #0
   b5d14:	3c20      	subs	r4, #32
   b5d16:	da35      	bge.n	b5d84 <__aeabi_dmul+0x164>
   b5d18:	340c      	adds	r4, #12
   b5d1a:	dc1b      	bgt.n	b5d54 <__aeabi_dmul+0x134>
   b5d1c:	f104 0414 	add.w	r4, r4, #20
   b5d20:	f1c4 0520 	rsb	r5, r4, #32
   b5d24:	fa00 f305 	lsl.w	r3, r0, r5
   b5d28:	fa20 f004 	lsr.w	r0, r0, r4
   b5d2c:	fa01 f205 	lsl.w	r2, r1, r5
   b5d30:	ea40 0002 	orr.w	r0, r0, r2
   b5d34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b5d38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b5d3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5d40:	fa21 f604 	lsr.w	r6, r1, r4
   b5d44:	eb42 0106 	adc.w	r1, r2, r6
   b5d48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5d4c:	bf08      	it	eq
   b5d4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5d52:	bd70      	pop	{r4, r5, r6, pc}
   b5d54:	f1c4 040c 	rsb	r4, r4, #12
   b5d58:	f1c4 0520 	rsb	r5, r4, #32
   b5d5c:	fa00 f304 	lsl.w	r3, r0, r4
   b5d60:	fa20 f005 	lsr.w	r0, r0, r5
   b5d64:	fa01 f204 	lsl.w	r2, r1, r4
   b5d68:	ea40 0002 	orr.w	r0, r0, r2
   b5d6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5d70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b5d74:	f141 0100 	adc.w	r1, r1, #0
   b5d78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5d7c:	bf08      	it	eq
   b5d7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5d82:	bd70      	pop	{r4, r5, r6, pc}
   b5d84:	f1c4 0520 	rsb	r5, r4, #32
   b5d88:	fa00 f205 	lsl.w	r2, r0, r5
   b5d8c:	ea4e 0e02 	orr.w	lr, lr, r2
   b5d90:	fa20 f304 	lsr.w	r3, r0, r4
   b5d94:	fa01 f205 	lsl.w	r2, r1, r5
   b5d98:	ea43 0302 	orr.w	r3, r3, r2
   b5d9c:	fa21 f004 	lsr.w	r0, r1, r4
   b5da0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5da4:	fa21 f204 	lsr.w	r2, r1, r4
   b5da8:	ea20 0002 	bic.w	r0, r0, r2
   b5dac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b5db0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b5db4:	bf08      	it	eq
   b5db6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b5dba:	bd70      	pop	{r4, r5, r6, pc}
   b5dbc:	f094 0f00 	teq	r4, #0
   b5dc0:	d10f      	bne.n	b5de2 <__aeabi_dmul+0x1c2>
   b5dc2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b5dc6:	0040      	lsls	r0, r0, #1
   b5dc8:	eb41 0101 	adc.w	r1, r1, r1
   b5dcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5dd0:	bf08      	it	eq
   b5dd2:	3c01      	subeq	r4, #1
   b5dd4:	d0f7      	beq.n	b5dc6 <__aeabi_dmul+0x1a6>
   b5dd6:	ea41 0106 	orr.w	r1, r1, r6
   b5dda:	f095 0f00 	teq	r5, #0
   b5dde:	bf18      	it	ne
   b5de0:	4770      	bxne	lr
   b5de2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b5de6:	0052      	lsls	r2, r2, #1
   b5de8:	eb43 0303 	adc.w	r3, r3, r3
   b5dec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b5df0:	bf08      	it	eq
   b5df2:	3d01      	subeq	r5, #1
   b5df4:	d0f7      	beq.n	b5de6 <__aeabi_dmul+0x1c6>
   b5df6:	ea43 0306 	orr.w	r3, r3, r6
   b5dfa:	4770      	bx	lr
   b5dfc:	ea94 0f0c 	teq	r4, ip
   b5e00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5e04:	bf18      	it	ne
   b5e06:	ea95 0f0c 	teqne	r5, ip
   b5e0a:	d00c      	beq.n	b5e26 <__aeabi_dmul+0x206>
   b5e0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5e10:	bf18      	it	ne
   b5e12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5e16:	d1d1      	bne.n	b5dbc <__aeabi_dmul+0x19c>
   b5e18:	ea81 0103 	eor.w	r1, r1, r3
   b5e1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5e20:	f04f 0000 	mov.w	r0, #0
   b5e24:	bd70      	pop	{r4, r5, r6, pc}
   b5e26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b5e2a:	bf06      	itte	eq
   b5e2c:	4610      	moveq	r0, r2
   b5e2e:	4619      	moveq	r1, r3
   b5e30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b5e34:	d019      	beq.n	b5e6a <__aeabi_dmul+0x24a>
   b5e36:	ea94 0f0c 	teq	r4, ip
   b5e3a:	d102      	bne.n	b5e42 <__aeabi_dmul+0x222>
   b5e3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b5e40:	d113      	bne.n	b5e6a <__aeabi_dmul+0x24a>
   b5e42:	ea95 0f0c 	teq	r5, ip
   b5e46:	d105      	bne.n	b5e54 <__aeabi_dmul+0x234>
   b5e48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b5e4c:	bf1c      	itt	ne
   b5e4e:	4610      	movne	r0, r2
   b5e50:	4619      	movne	r1, r3
   b5e52:	d10a      	bne.n	b5e6a <__aeabi_dmul+0x24a>
   b5e54:	ea81 0103 	eor.w	r1, r1, r3
   b5e58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b5e5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5e60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b5e64:	f04f 0000 	mov.w	r0, #0
   b5e68:	bd70      	pop	{r4, r5, r6, pc}
   b5e6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b5e6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b5e72:	bd70      	pop	{r4, r5, r6, pc}

000b5e74 <__aeabi_ddiv>:
   b5e74:	b570      	push	{r4, r5, r6, lr}
   b5e76:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b5e7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b5e7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b5e82:	bf1d      	ittte	ne
   b5e84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b5e88:	ea94 0f0c 	teqne	r4, ip
   b5e8c:	ea95 0f0c 	teqne	r5, ip
   b5e90:	f000 f8a7 	bleq	b5fe2 <__aeabi_ddiv+0x16e>
   b5e94:	eba4 0405 	sub.w	r4, r4, r5
   b5e98:	ea81 0e03 	eor.w	lr, r1, r3
   b5e9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b5ea0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b5ea4:	f000 8088 	beq.w	b5fb8 <__aeabi_ddiv+0x144>
   b5ea8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b5eac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b5eb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b5eb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b5eb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b5ebc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b5ec0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b5ec4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b5ec8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b5ecc:	429d      	cmp	r5, r3
   b5ece:	bf08      	it	eq
   b5ed0:	4296      	cmpeq	r6, r2
   b5ed2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b5ed6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b5eda:	d202      	bcs.n	b5ee2 <__aeabi_ddiv+0x6e>
   b5edc:	085b      	lsrs	r3, r3, #1
   b5ede:	ea4f 0232 	mov.w	r2, r2, rrx
   b5ee2:	1ab6      	subs	r6, r6, r2
   b5ee4:	eb65 0503 	sbc.w	r5, r5, r3
   b5ee8:	085b      	lsrs	r3, r3, #1
   b5eea:	ea4f 0232 	mov.w	r2, r2, rrx
   b5eee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b5ef2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b5ef6:	ebb6 0e02 	subs.w	lr, r6, r2
   b5efa:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5efe:	bf22      	ittt	cs
   b5f00:	1ab6      	subcs	r6, r6, r2
   b5f02:	4675      	movcs	r5, lr
   b5f04:	ea40 000c 	orrcs.w	r0, r0, ip
   b5f08:	085b      	lsrs	r3, r3, #1
   b5f0a:	ea4f 0232 	mov.w	r2, r2, rrx
   b5f0e:	ebb6 0e02 	subs.w	lr, r6, r2
   b5f12:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5f16:	bf22      	ittt	cs
   b5f18:	1ab6      	subcs	r6, r6, r2
   b5f1a:	4675      	movcs	r5, lr
   b5f1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b5f20:	085b      	lsrs	r3, r3, #1
   b5f22:	ea4f 0232 	mov.w	r2, r2, rrx
   b5f26:	ebb6 0e02 	subs.w	lr, r6, r2
   b5f2a:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5f2e:	bf22      	ittt	cs
   b5f30:	1ab6      	subcs	r6, r6, r2
   b5f32:	4675      	movcs	r5, lr
   b5f34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b5f38:	085b      	lsrs	r3, r3, #1
   b5f3a:	ea4f 0232 	mov.w	r2, r2, rrx
   b5f3e:	ebb6 0e02 	subs.w	lr, r6, r2
   b5f42:	eb75 0e03 	sbcs.w	lr, r5, r3
   b5f46:	bf22      	ittt	cs
   b5f48:	1ab6      	subcs	r6, r6, r2
   b5f4a:	4675      	movcs	r5, lr
   b5f4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b5f50:	ea55 0e06 	orrs.w	lr, r5, r6
   b5f54:	d018      	beq.n	b5f88 <__aeabi_ddiv+0x114>
   b5f56:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b5f5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b5f5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b5f62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b5f66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b5f6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b5f6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b5f72:	d1c0      	bne.n	b5ef6 <__aeabi_ddiv+0x82>
   b5f74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5f78:	d10b      	bne.n	b5f92 <__aeabi_ddiv+0x11e>
   b5f7a:	ea41 0100 	orr.w	r1, r1, r0
   b5f7e:	f04f 0000 	mov.w	r0, #0
   b5f82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b5f86:	e7b6      	b.n	b5ef6 <__aeabi_ddiv+0x82>
   b5f88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b5f8c:	bf04      	itt	eq
   b5f8e:	4301      	orreq	r1, r0
   b5f90:	2000      	moveq	r0, #0
   b5f92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b5f96:	bf88      	it	hi
   b5f98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b5f9c:	f63f aeaf 	bhi.w	b5cfe <__aeabi_dmul+0xde>
   b5fa0:	ebb5 0c03 	subs.w	ip, r5, r3
   b5fa4:	bf04      	itt	eq
   b5fa6:	ebb6 0c02 	subseq.w	ip, r6, r2
   b5faa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b5fae:	f150 0000 	adcs.w	r0, r0, #0
   b5fb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b5fb6:	bd70      	pop	{r4, r5, r6, pc}
   b5fb8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b5fbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b5fc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b5fc4:	bfc2      	ittt	gt
   b5fc6:	ebd4 050c 	rsbsgt	r5, r4, ip
   b5fca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b5fce:	bd70      	popgt	{r4, r5, r6, pc}
   b5fd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b5fd4:	f04f 0e00 	mov.w	lr, #0
   b5fd8:	3c01      	subs	r4, #1
   b5fda:	e690      	b.n	b5cfe <__aeabi_dmul+0xde>
   b5fdc:	ea45 0e06 	orr.w	lr, r5, r6
   b5fe0:	e68d      	b.n	b5cfe <__aeabi_dmul+0xde>
   b5fe2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b5fe6:	ea94 0f0c 	teq	r4, ip
   b5fea:	bf08      	it	eq
   b5fec:	ea95 0f0c 	teqeq	r5, ip
   b5ff0:	f43f af3b 	beq.w	b5e6a <__aeabi_dmul+0x24a>
   b5ff4:	ea94 0f0c 	teq	r4, ip
   b5ff8:	d10a      	bne.n	b6010 <__aeabi_ddiv+0x19c>
   b5ffa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b5ffe:	f47f af34 	bne.w	b5e6a <__aeabi_dmul+0x24a>
   b6002:	ea95 0f0c 	teq	r5, ip
   b6006:	f47f af25 	bne.w	b5e54 <__aeabi_dmul+0x234>
   b600a:	4610      	mov	r0, r2
   b600c:	4619      	mov	r1, r3
   b600e:	e72c      	b.n	b5e6a <__aeabi_dmul+0x24a>
   b6010:	ea95 0f0c 	teq	r5, ip
   b6014:	d106      	bne.n	b6024 <__aeabi_ddiv+0x1b0>
   b6016:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b601a:	f43f aefd 	beq.w	b5e18 <__aeabi_dmul+0x1f8>
   b601e:	4610      	mov	r0, r2
   b6020:	4619      	mov	r1, r3
   b6022:	e722      	b.n	b5e6a <__aeabi_dmul+0x24a>
   b6024:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6028:	bf18      	it	ne
   b602a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b602e:	f47f aec5 	bne.w	b5dbc <__aeabi_dmul+0x19c>
   b6032:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6036:	f47f af0d 	bne.w	b5e54 <__aeabi_dmul+0x234>
   b603a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b603e:	f47f aeeb 	bne.w	b5e18 <__aeabi_dmul+0x1f8>
   b6042:	e712      	b.n	b5e6a <__aeabi_dmul+0x24a>

000b6044 <__gedf2>:
   b6044:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b6048:	e006      	b.n	b6058 <__cmpdf2+0x4>
   b604a:	bf00      	nop

000b604c <__ledf2>:
   b604c:	f04f 0c01 	mov.w	ip, #1
   b6050:	e002      	b.n	b6058 <__cmpdf2+0x4>
   b6052:	bf00      	nop

000b6054 <__cmpdf2>:
   b6054:	f04f 0c01 	mov.w	ip, #1
   b6058:	f84d cd04 	str.w	ip, [sp, #-4]!
   b605c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6060:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6064:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6068:	bf18      	it	ne
   b606a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b606e:	d01b      	beq.n	b60a8 <__cmpdf2+0x54>
   b6070:	b001      	add	sp, #4
   b6072:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b6076:	bf0c      	ite	eq
   b6078:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b607c:	ea91 0f03 	teqne	r1, r3
   b6080:	bf02      	ittt	eq
   b6082:	ea90 0f02 	teqeq	r0, r2
   b6086:	2000      	moveq	r0, #0
   b6088:	4770      	bxeq	lr
   b608a:	f110 0f00 	cmn.w	r0, #0
   b608e:	ea91 0f03 	teq	r1, r3
   b6092:	bf58      	it	pl
   b6094:	4299      	cmppl	r1, r3
   b6096:	bf08      	it	eq
   b6098:	4290      	cmpeq	r0, r2
   b609a:	bf2c      	ite	cs
   b609c:	17d8      	asrcs	r0, r3, #31
   b609e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b60a2:	f040 0001 	orr.w	r0, r0, #1
   b60a6:	4770      	bx	lr
   b60a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b60ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b60b0:	d102      	bne.n	b60b8 <__cmpdf2+0x64>
   b60b2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b60b6:	d107      	bne.n	b60c8 <__cmpdf2+0x74>
   b60b8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b60bc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b60c0:	d1d6      	bne.n	b6070 <__cmpdf2+0x1c>
   b60c2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b60c6:	d0d3      	beq.n	b6070 <__cmpdf2+0x1c>
   b60c8:	f85d 0b04 	ldr.w	r0, [sp], #4
   b60cc:	4770      	bx	lr
   b60ce:	bf00      	nop

000b60d0 <__aeabi_cdrcmple>:
   b60d0:	4684      	mov	ip, r0
   b60d2:	4610      	mov	r0, r2
   b60d4:	4662      	mov	r2, ip
   b60d6:	468c      	mov	ip, r1
   b60d8:	4619      	mov	r1, r3
   b60da:	4663      	mov	r3, ip
   b60dc:	e000      	b.n	b60e0 <__aeabi_cdcmpeq>
   b60de:	bf00      	nop

000b60e0 <__aeabi_cdcmpeq>:
   b60e0:	b501      	push	{r0, lr}
   b60e2:	f7ff ffb7 	bl	b6054 <__cmpdf2>
   b60e6:	2800      	cmp	r0, #0
   b60e8:	bf48      	it	mi
   b60ea:	f110 0f00 	cmnmi.w	r0, #0
   b60ee:	bd01      	pop	{r0, pc}

000b60f0 <__aeabi_dcmpeq>:
   b60f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   b60f4:	f7ff fff4 	bl	b60e0 <__aeabi_cdcmpeq>
   b60f8:	bf0c      	ite	eq
   b60fa:	2001      	moveq	r0, #1
   b60fc:	2000      	movne	r0, #0
   b60fe:	f85d fb08 	ldr.w	pc, [sp], #8
   b6102:	bf00      	nop

000b6104 <__aeabi_dcmplt>:
   b6104:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6108:	f7ff ffea 	bl	b60e0 <__aeabi_cdcmpeq>
   b610c:	bf34      	ite	cc
   b610e:	2001      	movcc	r0, #1
   b6110:	2000      	movcs	r0, #0
   b6112:	f85d fb08 	ldr.w	pc, [sp], #8
   b6116:	bf00      	nop

000b6118 <__aeabi_dcmple>:
   b6118:	f84d ed08 	str.w	lr, [sp, #-8]!
   b611c:	f7ff ffe0 	bl	b60e0 <__aeabi_cdcmpeq>
   b6120:	bf94      	ite	ls
   b6122:	2001      	movls	r0, #1
   b6124:	2000      	movhi	r0, #0
   b6126:	f85d fb08 	ldr.w	pc, [sp], #8
   b612a:	bf00      	nop

000b612c <__aeabi_dcmpge>:
   b612c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6130:	f7ff ffce 	bl	b60d0 <__aeabi_cdrcmple>
   b6134:	bf94      	ite	ls
   b6136:	2001      	movls	r0, #1
   b6138:	2000      	movhi	r0, #0
   b613a:	f85d fb08 	ldr.w	pc, [sp], #8
   b613e:	bf00      	nop

000b6140 <__aeabi_dcmpgt>:
   b6140:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6144:	f7ff ffc4 	bl	b60d0 <__aeabi_cdrcmple>
   b6148:	bf34      	ite	cc
   b614a:	2001      	movcc	r0, #1
   b614c:	2000      	movcs	r0, #0
   b614e:	f85d fb08 	ldr.w	pc, [sp], #8
   b6152:	bf00      	nop

000b6154 <__aeabi_dcmpun>:
   b6154:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6158:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b615c:	d102      	bne.n	b6164 <__aeabi_dcmpun+0x10>
   b615e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6162:	d10a      	bne.n	b617a <__aeabi_dcmpun+0x26>
   b6164:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6168:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b616c:	d102      	bne.n	b6174 <__aeabi_dcmpun+0x20>
   b616e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6172:	d102      	bne.n	b617a <__aeabi_dcmpun+0x26>
   b6174:	f04f 0000 	mov.w	r0, #0
   b6178:	4770      	bx	lr
   b617a:	f04f 0001 	mov.w	r0, #1
   b617e:	4770      	bx	lr

000b6180 <__aeabi_d2iz>:
   b6180:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6184:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6188:	d215      	bcs.n	b61b6 <__aeabi_d2iz+0x36>
   b618a:	d511      	bpl.n	b61b0 <__aeabi_d2iz+0x30>
   b618c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6190:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6194:	d912      	bls.n	b61bc <__aeabi_d2iz+0x3c>
   b6196:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b619a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b619e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b61a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b61a6:	fa23 f002 	lsr.w	r0, r3, r2
   b61aa:	bf18      	it	ne
   b61ac:	4240      	negne	r0, r0
   b61ae:	4770      	bx	lr
   b61b0:	f04f 0000 	mov.w	r0, #0
   b61b4:	4770      	bx	lr
   b61b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b61ba:	d105      	bne.n	b61c8 <__aeabi_d2iz+0x48>
   b61bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   b61c0:	bf08      	it	eq
   b61c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   b61c6:	4770      	bx	lr
   b61c8:	f04f 0000 	mov.w	r0, #0
   b61cc:	4770      	bx	lr
   b61ce:	bf00      	nop

000b61d0 <__aeabi_d2uiz>:
   b61d0:	004a      	lsls	r2, r1, #1
   b61d2:	d211      	bcs.n	b61f8 <__aeabi_d2uiz+0x28>
   b61d4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b61d8:	d211      	bcs.n	b61fe <__aeabi_d2uiz+0x2e>
   b61da:	d50d      	bpl.n	b61f8 <__aeabi_d2uiz+0x28>
   b61dc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b61e0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b61e4:	d40e      	bmi.n	b6204 <__aeabi_d2uiz+0x34>
   b61e6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b61ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b61ee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b61f2:	fa23 f002 	lsr.w	r0, r3, r2
   b61f6:	4770      	bx	lr
   b61f8:	f04f 0000 	mov.w	r0, #0
   b61fc:	4770      	bx	lr
   b61fe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b6202:	d102      	bne.n	b620a <__aeabi_d2uiz+0x3a>
   b6204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6208:	4770      	bx	lr
   b620a:	f04f 0000 	mov.w	r0, #0
   b620e:	4770      	bx	lr

000b6210 <__aeabi_d2f>:
   b6210:	ea4f 0241 	mov.w	r2, r1, lsl #1
   b6214:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   b6218:	bf24      	itt	cs
   b621a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   b621e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   b6222:	d90d      	bls.n	b6240 <__aeabi_d2f+0x30>
   b6224:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   b6228:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   b622c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   b6230:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   b6234:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   b6238:	bf08      	it	eq
   b623a:	f020 0001 	biceq.w	r0, r0, #1
   b623e:	4770      	bx	lr
   b6240:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   b6244:	d121      	bne.n	b628a <__aeabi_d2f+0x7a>
   b6246:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   b624a:	bfbc      	itt	lt
   b624c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   b6250:	4770      	bxlt	lr
   b6252:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6256:	ea4f 5252 	mov.w	r2, r2, lsr #21
   b625a:	f1c2 0218 	rsb	r2, r2, #24
   b625e:	f1c2 0c20 	rsb	ip, r2, #32
   b6262:	fa10 f30c 	lsls.w	r3, r0, ip
   b6266:	fa20 f002 	lsr.w	r0, r0, r2
   b626a:	bf18      	it	ne
   b626c:	f040 0001 	orrne.w	r0, r0, #1
   b6270:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6274:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   b6278:	fa03 fc0c 	lsl.w	ip, r3, ip
   b627c:	ea40 000c 	orr.w	r0, r0, ip
   b6280:	fa23 f302 	lsr.w	r3, r3, r2
   b6284:	ea4f 0343 	mov.w	r3, r3, lsl #1
   b6288:	e7cc      	b.n	b6224 <__aeabi_d2f+0x14>
   b628a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   b628e:	d107      	bne.n	b62a0 <__aeabi_d2f+0x90>
   b6290:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   b6294:	bf1e      	ittt	ne
   b6296:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   b629a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   b629e:	4770      	bxne	lr
   b62a0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   b62a4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   b62a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   b62ac:	4770      	bx	lr
   b62ae:	bf00      	nop

000b62b0 <atexit>:
   b62b0:	2300      	movs	r3, #0
   b62b2:	4601      	mov	r1, r0
   b62b4:	461a      	mov	r2, r3
   b62b6:	4618      	mov	r0, r3
   b62b8:	f000 b84c 	b.w	b6354 <__register_exitproc>

000b62bc <memcpy>:
   b62bc:	440a      	add	r2, r1
   b62be:	4291      	cmp	r1, r2
   b62c0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b62c4:	d100      	bne.n	b62c8 <memcpy+0xc>
   b62c6:	4770      	bx	lr
   b62c8:	b510      	push	{r4, lr}
   b62ca:	f811 4b01 	ldrb.w	r4, [r1], #1
   b62ce:	f803 4f01 	strb.w	r4, [r3, #1]!
   b62d2:	4291      	cmp	r1, r2
   b62d4:	d1f9      	bne.n	b62ca <memcpy+0xe>
   b62d6:	bd10      	pop	{r4, pc}

000b62d8 <memset>:
   b62d8:	4402      	add	r2, r0
   b62da:	4603      	mov	r3, r0
   b62dc:	4293      	cmp	r3, r2
   b62de:	d100      	bne.n	b62e2 <memset+0xa>
   b62e0:	4770      	bx	lr
   b62e2:	f803 1b01 	strb.w	r1, [r3], #1
   b62e6:	e7f9      	b.n	b62dc <memset+0x4>

000b62e8 <srand>:
   b62e8:	b538      	push	{r3, r4, r5, lr}
   b62ea:	4b10      	ldr	r3, [pc, #64]	; (b632c <srand+0x44>)
   b62ec:	681d      	ldr	r5, [r3, #0]
   b62ee:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b62f0:	4604      	mov	r4, r0
   b62f2:	b9b3      	cbnz	r3, b6322 <srand+0x3a>
   b62f4:	2018      	movs	r0, #24
   b62f6:	f7fe fd07 	bl	b4d08 <malloc>
   b62fa:	4602      	mov	r2, r0
   b62fc:	63a8      	str	r0, [r5, #56]	; 0x38
   b62fe:	b920      	cbnz	r0, b630a <srand+0x22>
   b6300:	4b0b      	ldr	r3, [pc, #44]	; (b6330 <srand+0x48>)
   b6302:	480c      	ldr	r0, [pc, #48]	; (b6334 <srand+0x4c>)
   b6304:	2142      	movs	r1, #66	; 0x42
   b6306:	f7fe fd0f 	bl	b4d28 <__assert_func>
   b630a:	490b      	ldr	r1, [pc, #44]	; (b6338 <srand+0x50>)
   b630c:	4b0b      	ldr	r3, [pc, #44]	; (b633c <srand+0x54>)
   b630e:	e9c0 1300 	strd	r1, r3, [r0]
   b6312:	4b0b      	ldr	r3, [pc, #44]	; (b6340 <srand+0x58>)
   b6314:	6083      	str	r3, [r0, #8]
   b6316:	230b      	movs	r3, #11
   b6318:	8183      	strh	r3, [r0, #12]
   b631a:	2100      	movs	r1, #0
   b631c:	2001      	movs	r0, #1
   b631e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b6322:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6324:	2200      	movs	r2, #0
   b6326:	611c      	str	r4, [r3, #16]
   b6328:	615a      	str	r2, [r3, #20]
   b632a:	bd38      	pop	{r3, r4, r5, pc}
   b632c:	2003e640 	.word	0x2003e640
   b6330:	000b6ca1 	.word	0x000b6ca1
   b6334:	000b6cb8 	.word	0x000b6cb8
   b6338:	abcd330e 	.word	0xabcd330e
   b633c:	e66d1234 	.word	0xe66d1234
   b6340:	0005deec 	.word	0x0005deec

000b6344 <strlen>:
   b6344:	4603      	mov	r3, r0
   b6346:	f813 2b01 	ldrb.w	r2, [r3], #1
   b634a:	2a00      	cmp	r2, #0
   b634c:	d1fb      	bne.n	b6346 <strlen+0x2>
   b634e:	1a18      	subs	r0, r3, r0
   b6350:	3801      	subs	r0, #1
   b6352:	4770      	bx	lr

000b6354 <__register_exitproc>:
   b6354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b6358:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b6414 <__register_exitproc+0xc0>
   b635c:	4606      	mov	r6, r0
   b635e:	f8d8 0000 	ldr.w	r0, [r8]
   b6362:	461f      	mov	r7, r3
   b6364:	460d      	mov	r5, r1
   b6366:	4691      	mov	r9, r2
   b6368:	f000 f856 	bl	b6418 <__retarget_lock_acquire_recursive>
   b636c:	4b25      	ldr	r3, [pc, #148]	; (b6404 <__register_exitproc+0xb0>)
   b636e:	681c      	ldr	r4, [r3, #0]
   b6370:	b934      	cbnz	r4, b6380 <__register_exitproc+0x2c>
   b6372:	4c25      	ldr	r4, [pc, #148]	; (b6408 <__register_exitproc+0xb4>)
   b6374:	601c      	str	r4, [r3, #0]
   b6376:	4b25      	ldr	r3, [pc, #148]	; (b640c <__register_exitproc+0xb8>)
   b6378:	b113      	cbz	r3, b6380 <__register_exitproc+0x2c>
   b637a:	681b      	ldr	r3, [r3, #0]
   b637c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b6380:	6863      	ldr	r3, [r4, #4]
   b6382:	2b1f      	cmp	r3, #31
   b6384:	dd07      	ble.n	b6396 <__register_exitproc+0x42>
   b6386:	f8d8 0000 	ldr.w	r0, [r8]
   b638a:	f000 f847 	bl	b641c <__retarget_lock_release_recursive>
   b638e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b6396:	b34e      	cbz	r6, b63ec <__register_exitproc+0x98>
   b6398:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b639c:	b988      	cbnz	r0, b63c2 <__register_exitproc+0x6e>
   b639e:	4b1c      	ldr	r3, [pc, #112]	; (b6410 <__register_exitproc+0xbc>)
   b63a0:	b923      	cbnz	r3, b63ac <__register_exitproc+0x58>
   b63a2:	f8d8 0000 	ldr.w	r0, [r8]
   b63a6:	f000 f838 	bl	b641a <__retarget_lock_release>
   b63aa:	e7f0      	b.n	b638e <__register_exitproc+0x3a>
   b63ac:	f44f 7084 	mov.w	r0, #264	; 0x108
   b63b0:	f7fe fcaa 	bl	b4d08 <malloc>
   b63b4:	2800      	cmp	r0, #0
   b63b6:	d0f4      	beq.n	b63a2 <__register_exitproc+0x4e>
   b63b8:	2300      	movs	r3, #0
   b63ba:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b63be:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b63c2:	6863      	ldr	r3, [r4, #4]
   b63c4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b63c8:	2201      	movs	r2, #1
   b63ca:	409a      	lsls	r2, r3
   b63cc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b63d0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b63d4:	4313      	orrs	r3, r2
   b63d6:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b63da:	2e02      	cmp	r6, #2
   b63dc:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b63e0:	bf02      	ittt	eq
   b63e2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b63e6:	4313      	orreq	r3, r2
   b63e8:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b63ec:	6863      	ldr	r3, [r4, #4]
   b63ee:	f8d8 0000 	ldr.w	r0, [r8]
   b63f2:	1c5a      	adds	r2, r3, #1
   b63f4:	3302      	adds	r3, #2
   b63f6:	6062      	str	r2, [r4, #4]
   b63f8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b63fc:	f000 f80e 	bl	b641c <__retarget_lock_release_recursive>
   b6400:	2000      	movs	r0, #0
   b6402:	e7c6      	b.n	b6392 <__register_exitproc+0x3e>
   b6404:	2003e7e8 	.word	0x2003e7e8
   b6408:	2003e75c 	.word	0x2003e75c
   b640c:	00000000 	.word	0x00000000
   b6410:	000b4d09 	.word	0x000b4d09
   b6414:	2003e6a4 	.word	0x2003e6a4

000b6418 <__retarget_lock_acquire_recursive>:
   b6418:	4770      	bx	lr

000b641a <__retarget_lock_release>:
   b641a:	4770      	bx	lr

000b641c <__retarget_lock_release_recursive>:
   b641c:	4770      	bx	lr

000b641e <link_code_end>:
	...

000b6420 <dynalib_user>:
   b6420:	4021 000b 405d 000b 4085 000b 4089 000b     !@..]@...@...@..
   b6430:	0000 0000 4341 3353 3837 3030 4520 6178     ....ACS37800 Exa
   b6440:	706d 656c 4100 5343 3733 3038 2030 6f6e     mple.ACS37800 no
   b6450:	2074 6564 6574 7463 6465 202e 6843 6365     t detected. Chec
   b6460:	206b 6f63 6e6e 6365 6974 6e6f 2073 6e61     k connections an
   b6470:	2064 3249 2043 6461 7264 7365 2e73 4620     d I2C address. F
   b6480:	6572 7a65 6e69 2e67 2e2e 5600 6c6f 7374     reezing....Volts
   b6490:	203a 2000 6d41 7370 203a 5000 776f 7265     : . Amps: .Power
   b64a0:	203a 6341 6974 6576 2820 2957 203a 2000     : Active (W): . 
   b64b0:	6552 6361 6974 6576 2820 4156 2952 203a     Reactive (VAR): 
   b64c0:	5000 776f 7265 203a 7041 6170 6572 746e     .Power: Apparent
   b64d0:	2820 4156 3a29 0020 5020 776f 7265 4620      (VA): . Power F
   b64e0:	6361 6f74 3a72 0020 4c20 6761 6967 676e     actor: . Lagging
   b64f0:	2000 654c 6461 6e69 0067 4320 6e6f 7573     . Leading. Consu
   b6500:	656d 0064 4720 6e65 7265 7461 6465 7200     med. Generated.r
   b6510:	6165 5264 6765 7369 6574 3a72 6520 646e     eadRegister: end
   b6520:	7254 6e61 6d73 7369 6973 6e6f 7220 7465     Transmission ret
   b6530:	7275 656e 3a64 0020 6572 6461 6552 6967     urned: .readRegi
   b6540:	7473 7265 203a 6572 7571 7365 4674 6f72     ster: requestFro
   b6550:	206d 6572 7574 6e72 6465 203a 7700 6972     m returned: .wri
   b6560:	6574 6552 6967 7473 7265 203a 6e65 5464     teRegister: endT
   b6570:	6172 736e 696d 7373 6f69 206e 6572 7574     ransmission retu
   b6580:	6e72 6465 203a 7300 7465 7942 6170 7373     rned: .setBypass
   b6590:	654e 616e 6c62 3a65 7720 6972 6574 6552     Nenable: writeRe
   b65a0:	6967 7473 7265 2820 4632 2029 6572 7574     gister (2F) retu
   b65b0:	6e72 6465 203a 7300 7465 7942 6170 7373     rned: .setBypass
   b65c0:	654e 616e 6c62 3a65 7220 6165 5264 6765     Nenable: readReg
   b65d0:	7369 6574 2072 3128 2946 7220 7465 7275     ister (1F) retur
   b65e0:	656e 3a64 0020 6573 4274 7079 7361 4e73     ned: .setBypassN
   b65f0:	6e65 6261 656c 203a 7962 6170 7373 6e5f     enable: bypass_n
   b6600:	655f 206e 7369 6320 7275 6572 746e 796c     _en is currently
   b6610:	203a 7300 7465 7942 6170 7373 654e 616e     : .setBypassNena
   b6620:	6c62 3a65 7720 6972 6574 6552 6967 7473     ble: writeRegist
   b6630:	7265 2820 4631 2029 6572 7574 6e72 6465     er (1F) returned
   b6640:	203a 7300 7465 7942 6170 7373 654e 616e     : .setBypassNena
   b6650:	6c62 3a65 7220 6165 5264 6765 7369 6574     ble: readRegiste
   b6660:	2072 3028 2946 7220 7465 7275 656e 3a64     r (0F) returned:
   b6670:	0020 6573 4274 7079 7361 4e73 6e65 6261      .setBypassNenab
   b6680:	656c 203a 6565 7270 6d6f 6220 7079 7361     le: eeprom bypas
   b6690:	5f73 5f6e 6e65 6920 2073 7563 7272 6e65     s_n_en is curren
   b66a0:	6c74 3a79 0020 6573 4274 7079 7361 4e73     tly: .setBypassN
   b66b0:	6e65 6261 656c 203a 7277 7469 5265 6765     enable: writeReg
   b66c0:	7369 6574 2072 3028 2946 7220 7465 7275     ister (0F) retur
   b66d0:	656e 3a64 0020 6567 4374 7275 6572 746e     ned: .getCurrent
   b66e0:	6f43 7261 6573 6147 6e69 203a 6572 6461     CoarseGain: read
   b66f0:	6552 6967 7473 7265 2820 4231 2029 6572     Register (1B) re
   b6700:	7574 6e72 6465 203a 6700 7465 7543 7272     turned: .getCurr
   b6710:	6e65 4374 616f 7372 4765 6961 3a6e 7320     entCoarseGain: s
   b6720:	6168 6f64 2077 6167 6e69 7320 7465 6974     hadow gain setti
   b6730:	676e 6920 2073 7563 7272 6e65 6c74 3a79     ng is currently:
   b6740:	0020 4341 3353 3837 3030 3a3a 6562 6967      .ACS37800::begi
   b6750:	3a6e 6620 6961 656c 2164 6720 7465 7543     n: failed! getCu
   b6760:	7272 6e65 4374 616f 7372 4765 6961 206e     rrentCoarseGain 
   b6770:	6572 7574 6e72 6465 203a 4100 5343 3733     returned: .ACS37
   b6780:	3038 3a30 623a 6765 6e69 203a 7573 6363     800::begin: succ
   b6790:	7365 2173 5f20 7563 7272 6e65 4374 616f     ess! _currentCoa
   b67a0:	7372 4765 6961 206e 7369 203a 7200 6165     rseGain is: .rea
   b67b0:	5264 534d 203a 6572 6461 6552 6967 7473     dRMS: readRegist
   b67c0:	7265 2820 3032 2029 6572 7574 6e72 6465     er (20) returned
   b67d0:	203a 7200 6165 5264 534d 203a 7276 736d     : .readRMS: vrms
   b67e0:	203a 7830 7200 6165 5264 534d 203a 6f76     : 0x.readRMS: vo
   b67f0:	746c 2073 4c28 4253 202c 6562 6f66 6572     lts (LSB, before
   b6800:	6320 726f 6572 7463 6f69 296e 6920 2073      correction) is 
   b6810:	7200 6165 5264 534d 203a 6f76 746c 2073     .readRMS: volts 
   b6820:	5628 202c 6661 6574 2072 6f63 7272 6365     (V, after correc
   b6830:	6974 6e6f 2029 7369 0020 6572 6461 4d52     tion) is .readRM
   b6840:	3a53 6920 6d72 3a73 3020 0078 6572 6461     S: irms: 0x.read
   b6850:	4d52 3a53 6120 706d 2073 4c28 4253 202c     RMS: amps (LSB, 
   b6860:	6562 6f66 6572 6320 726f 6572 7463 6f69     before correctio
   b6870:	296e 6920 2073 7200 6165 5264 534d 203a     n) is .readRMS: 
   b6880:	6d61 7370 2820 2c41 6120 7466 7265 6320     amps (A, after c
   b6890:	726f 6572 7463 6f69 296e 6920 2073 7200     orrection) is .r
   b68a0:	6165 5064 776f 7265 6341 6974 6576 6552     eadPowerActiveRe
   b68b0:	6361 6974 6576 203a 6572 6461 6552 6967     active: readRegi
   b68c0:	7473 7265 2820 3132 2029 6572 7574 6e72     ster (21) return
   b68d0:	6465 203a 7200 6165 5064 776f 7265 6341     ed: .readPowerAc
   b68e0:	6974 6576 6552 6361 6974 6576 203a 6170     tiveReactive: pa
   b68f0:	7463 7669 3a65 3020 0078 6572 6461 6f50     ctive: 0x.readPo
   b6900:	6577 4172 7463 7669 5265 6165 7463 7669     werActiveReactiv
   b6910:	3a65 7020 6361 6974 6576 2820 534c 2c42     e: pactive (LSB,
   b6920:	6220 6665 726f 2065 6f63 7272 6365 6974      before correcti
   b6930:	6e6f 2029 7369 0020 6572 6461 6f50 6577     on) is .readPowe
   b6940:	4172 7463 7669 5265 6165 7463 7669 3a65     rActiveReactive:
   b6950:	7020 6361 6974 6576 2820 2c57 6120 7466      pactive (W, aft
   b6960:	7265 6320 726f 6572 7463 6f69 296e 6920     er correction) i
   b6970:	2073 7200 6165 5064 776f 7265 6341 6974     s .readPowerActi
   b6980:	6576 6552 6361 6974 6576 203a 6970 616d     veReactive: pima
   b6990:	3a67 3020 0078 6572 6461 6f50 6577 4172     g: 0x.readPowerA
   b69a0:	7463 7669 5265 6165 7463 7669 3a65 7020     ctiveReactive: p
   b69b0:	6d69 6761 2820 534c 2c42 6220 6665 726f     imag (LSB, befor
   b69c0:	2065 6f63 7272 6365 6974 6e6f 2029 7369     e correction) is
   b69d0:	0020 6572 6461 6f50 6577 4172 7463 7669      .readPowerActiv
   b69e0:	5265 6165 7463 7669 3a65 7020 6d69 6761     eReactive: pimag
   b69f0:	2820 4156 2c52 6120 7466 7265 6320 726f      (VAR, after cor
   b6a00:	6572 7463 6f69 296e 6920 2073 7200 6165     rection) is .rea
   b6a10:	5064 776f 7265 6146 7463 726f 203a 6572     dPowerFactor: re
   b6a20:	6461 6552 6967 7473 7265 2820 3232 2029     adRegister (22) 
   b6a30:	6572 7574 6e72 6465 203a 7200 6165 5064     returned: .readP
   b6a40:	776f 7265 6146 7463 726f 203a 6170 7070     owerFactor: papp
   b6a50:	7261 6e65 3a74 3020 0078 6572 6461 6f50     arent: 0x.readPo
   b6a60:	6577 4672 6361 6f74 3a72 7020 7061 6170     werFactor: pappa
   b6a70:	6572 746e 2820 534c 2c42 6220 6665 726f     rent (LSB, befor
   b6a80:	2065 6f63 7272 6365 6974 6e6f 2029 7369     e correction) is
   b6a90:	0020 6572 6461 6f50 6577 4672 6361 6f74      .readPowerFacto
   b6aa0:	3a72 7020 7061 6170 6572 746e 2820 4156     r: papparent (VA
   b6ab0:	202c 6661 6574 2072 6f63 7272 6365 6974     , after correcti
   b6ac0:	6e6f 2029 7369 0020 6572 6461 6f50 6577     on) is .readPowe
   b6ad0:	4672 6361 6f74 3a72 7020 6166 7463 726f     rFactor: pfactor
   b6ae0:	203a 7830 7200 6165 5064 776f 7265 6146     : 0x.readPowerFa
   b6af0:	7463 726f 203a 6670 6361 6f74 2072 7369     ctor: pfactor is
   b6b00:	0020 0000                                    ...

000b6b04 <_ZL22ACS37800_CRS_SNS_GAINS>:
   b6b04:	0000 3f80 0000 4000 0000 4040 0000 4060     ...?...@..@@..`@
   b6b14:	0000 4080 0000 4090 0000 40b0 0000 4100     ...@...@...@...A

000b6b24 <_ZTVN5spark13EthernetClassE>:
	...
   b6b2c:	4dbf 000b 4db5 000b 4dab 000b 4da1 000b     .M...M...M...M..
   b6b3c:	4d95 000b 4d89 000b 502d 000b 5035 000b     .M...M..-P..5P..
   b6b4c:	4d7d 000b 4d75 000b 4d6b 000b 4d61 000b     }M..uM..kM..aM..
   b6b5c:	5065 000b                                   eP..

000b6b60 <_ZTV7TwoWire>:
	...
   b6b68:	4ddd 000b 4e27 000b 4dff 000b 4ddf 000b     .M..'N...M...M..
   b6b78:	4e07 000b 4e0f 000b 4e17 000b 4e1f 000b     .N...N...N...N..

000b6b88 <_ZTV9IPAddress>:
	...
   b6b90:	4efb 000b 4eeb 000b 4eed 000b 7061 0070     .N...N...N..app.

000b6ba0 <_ZTVN5spark12NetworkClassE>:
	...
   b6ba8:	4fed 000b 4ff7 000b 5001 000b 500b 000b     .O...O...P...P..
   b6bb8:	5015 000b 5021 000b 502d 000b 5035 000b     .P..!P..-P..5P..
   b6bc8:	503d 000b 5049 000b 5051 000b 505b 000b     =P..IP..QP..[P..
   b6bd8:	5065 000b 616e 006e 6e69 0066 766f 0066     eP..nan.inf.ovf.
   b6be8:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
   b6bf8:	2553 007a 7361 7463 6d69 0065               S%z.asctime.

000b6c04 <_ZTV11USARTSerial>:
	...
   b6c0c:	5445 000b 54b1 000b 5489 000b 5151 000b     ET...T...T..QQ..
   b6c1c:	5459 000b 5475 000b 5467 000b 5483 000b     YT..uT..gT...T..
   b6c2c:	5447 000b 544b 000b                         GT..KT..

000b6c34 <_ZTV9USBSerial>:
	...
   b6c3c:	54ef 000b 5557 000b 552d 000b 5151 000b     .T..WU..-U..QQ..
   b6c4c:	551f 000b 54f1 000b 5501 000b 5551 000b     .U...T...U..QU..
   b6c5c:	5511 000b 54e9 000b                         .U...T..

000b6c64 <_ZTVN5spark9WiFiClassE>:
	...
   b6c6c:	564f 000b 5645 000b 563b 000b 55f1 000b     OV..EV..;V...U..
   b6c7c:	562f 000b 5623 000b 502d 000b 5035 000b     /V..#V..-P..5P..
   b6c8c:	5617 000b 560f 000b 5605 000b 55fb 000b     .V...V...V...U..
   b6c9c:	5065 000b                                   eP..

000b6ca0 <_ZSt7nothrow>:
   b6ca0:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b6cb0:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b6cc0:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b6cd0:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b6ce0:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b6cf0:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b6d00:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b6d11 <link_const_variable_data_end>:
   b6d11:	00          	.byte	0x00
	...

000b6d14 <link_constructors_location>:
   b6d14:	000b4251 	.word	0x000b4251
   b6d18:	000b4d51 	.word	0x000b4d51
   b6d1c:	000b4dc9 	.word	0x000b4dc9
   b6d20:	000b4fdd 	.word	0x000b4fdd
   b6d24:	000b513d 	.word	0x000b513d
   b6d28:	000b5401 	.word	0x000b5401
   b6d2c:	000b540d 	.word	0x000b540d
   b6d30:	000b5431 	.word	0x000b5431
   b6d34:	000b5659 	.word	0x000b5659

000b6d38 <link_constructors_end>:
	...
